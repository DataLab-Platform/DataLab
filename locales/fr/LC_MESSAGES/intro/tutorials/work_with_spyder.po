# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, DataLab Platform Developers
# This file is distributed under the same license as the DataLab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: DataLab \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-06 14:46+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: fr\n"
"Language-Team: fr <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

msgid "Tutorial showing how to use Spyder to work with DataLab, the open-source data analysis and visualization platform"
msgstr ""

msgid "DataLab, Spyder, tutorial, data analysis, data visualization, data processing, data science, scientific computing, scientific visualization"
msgstr ""

msgid ":octicon:`book;1em;sd-text-info` DataLab and Spyder: a perfect match"
msgstr ""

msgid "This tutorial shows how to use `Spyder`_ to work with DataLab through an example, using fake algorithms and data that represent an hypothetical research/technical work. The goal is to illustrate how to use DataLab to test your algorithms with some data, and how to debug them if necessary."
msgstr ""

msgid "The example is quite simple, but it illustrates the basic concepts of working with DataLab *and* `Spyder`_."
msgstr ""

msgid "DataLab and Spyder: a perfect match"
msgstr ""

msgid "DataLab and `Spyder`_ are **complementary** tools. While `Spyder`_ is a powerful development environment with interactive scientific computing capabilities, DataLab is a versatile data analysis tool that may be used to perform a wide range of tasks, from simple data visualization to complex data analysis and processing. In other words, `Spyder`_ is a **development** tool, while DataLab is a **data analysis** tool. You can use `Spyder`_ to develop algorithms and then use DataLab to analyze data with those algorithms."
msgstr ""

msgid "Basic concepts"
msgstr ""

msgid "In the context of your research or technical work, we assume that you are developing a software to process data (signals or images): this software may either be a stand-alone application or a library that you will use in other applications, or even a simple script that you will run from the command line. In any case, you will need to follow a development process that will include the following steps:"
msgstr ""

msgid "Prototype the algorithm in a development environment, such as `Spyder`_."
msgstr ""

msgid "Develop the algorithm in a development environment, such as `Spyder`_."
msgstr ""

msgid "Test the algorithm with some data."
msgstr ""

msgid "Debug the algorithm if necessary."
msgstr ""

msgid "Repeat steps 2 and 3 until the algorithm works as expected."
msgstr ""

msgid "Use the algorithm in your application."
msgstr ""

msgid "DataLab can help you with step 0 because it provides all the processing primitives that you need to prototype your algorithm: you can load data, visualize it, and perform basic processing operations. We won't cover this step in the following paragraphs because the DataLab documentation already provides a lot of information about it."
msgstr ""

msgid "In this tutorial, we will see how to use DataLab to perform steps 2 and 3. We assume that you already have prototyped (preferably in DataLab!) and developed your algorithm in `Spyder`_. Now, you want to test it with some data, but without quitting `Spyder`_ because you may need to do some changes to your algorithm and re-test it. Besides, your workflow is already set up in `Spyder`_ and you don't want to change it."
msgstr ""

msgid "In this tutorial, we assume that you have already installed DataLab and that you have started it. If you haven't done it yet, please refer to the :ref:`installation` section of the documentation."
msgstr ""

msgid "Besides, we assume that you have already installed `Spyder`_ and that you have started it. If you haven't done it yet, please refer to the `Spyder`_ documentation. **Note that you don't need to install DataLab in the same environment as Spyder.**: that's the whole point of DataLab, it is a stand-alone application that can be used from any environment. For this tutorial, you only need to install the DataLab Simple Client (``pip install cdlclient``) in the same environment as `Spyder`_."
msgstr ""

msgid "Testing your algorithm with DataLab"
msgstr ""

msgid "Let's assume that you have developed algorithms in the ``my_work`` module of your project. You have already prototyped them in DataLab, and you have developed them in `Spyder`_ by writing functions that take some data as input and return some processed data as output. Now, you want to test these algorithms with some data."
msgstr ""

msgid "To test these algorithms, you have written two functions in the ``my_work`` module:"
msgstr ""

msgid "``test_my_1d_algorithm``: this function returns some 1D data that will allow you to validate your first algorithm which works on 1D data."
msgstr ""

msgid "``test_my_2d_algorithm``: this function returns some 2D data that will allow you to validate your second algorithm which works on 2D data."
msgstr ""

msgid "You can now use DataLab to visualize the data returned by these functions directly from `Spyder`_:"
msgstr ""

msgid "First, you need to start both DataLab and `Spyder`_."
msgstr ""

msgid "Remember that DataLab is a stand-alone application that can be used from any environment, so you don't need to install it in the same environment as `Spyder`_ because the connection between these two applications is done through a communication protocol."
msgstr ""

msgid "Here is how to do it:"
msgstr ""

msgid "If we execute the first two cells, we will see the following output in the `Spyder`_ console:"
msgstr ""

msgid "On this screenshot, we can see the result of evaluating the first two cells: the first cell connects to DataLab, and the second cell visualizes the 1D data returned by the ``test_my_1d_algorithm`` function."
msgstr ""

msgid "On this screenshot, we can see the result of evaluating the third cell: the ``test_my_2d_algorithm`` function returns a 2D array, and we can visualize it directly in DataLab."
msgstr ""

msgid "Debugging your algorithm with DataLab"
msgstr ""

msgid "Now that you have tested your algorithms with some data, you may want to debug them if necessary. To do so, you can combine the `Spyder`_ debugging capabilities with DataLab."
msgstr ""

msgid "Here is the code of the fake algorithm that we want to debug, in which we have introduced an optional ``debug_with_datalab`` parameter that - if set to ``True`` - will create a proxy object allowing to visualize the data step-by-step in DataLab:"
msgstr ""

msgid "The corresponding ``test_my_2d_algorithm`` function also has an optional ``debug_with_datalab`` parameter that is simply passed to the ``generate_2d_data`` function."
msgstr ""

msgid "Now, we can use `Spyder`_ to debug the ``test_my_2d_algorithm`` function:"
msgstr ""

msgid "In this simple example, the algorithm is just iterating 10 times and generating a 1D array at each iteration. Each 1D array is then stacked in a 2D array that is returned by the ``generate_2d_data`` function. With the ``debug_with_datalab`` parameter set to ``True``, we can visualize each 1D array in DataLab: that way, we can check that the algorithm is working as expected."
msgstr ""

msgid "On this screenshot, we can see the result of evaluating the first cell: the ``test_my_2d_algorithm`` function is called with the ``debug_with_datalab`` parameter set to ``True``: 10 1D arrays are generated and visualized in DataLab."
msgstr ""

msgid "If we had executed the script using `Spyder`_ debugger and set a breakpoint in the ``generate_2d_data`` function, we would have seen the generated 1D arrays in DataLab at each iteration: since DataLab is executed in a separate process, we would have been able to manipulate the data in DataLab while the algorithm is paused in `Spyder`_."
msgstr ""

