# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, DataLab Platform Developers
# This file is distributed under the same license as the DataLab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: DataLab \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-06 14:46+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: fr\n"
"Language-Team: fr <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

msgid "Processor"
msgstr ""

msgid "The :mod:`datalab.gui.processor` package provides the **processor objects** for signals and images."
msgstr ""

msgid "Processor objects are the bridge between the computation modules (in :mod:`sigima.computation`) and the GUI modules (in :mod:`datalab.gui`). They are used to call the computation functions and to update the GUI from inside the data panel objects."
msgstr ""

msgid "When implementing a processing feature in DataLab, the steps are usually the following:"
msgstr ""

msgid "Add an action in the :mod:`datalab.gui.actionhandler` module to trigger the processing feature from the GUI (e.g. a menu item or a toolbar button)."
msgstr ""

msgid "Implement the computation function in the :mod:`sigima.computation` module (that would eventually call the algorithm from the :mod:`sigima.algorithms` module)."
msgstr ""

msgid "Implement the processor object method in this package to call the computation function and eventually update the GUI."
msgstr ""

msgid "The processor objects are organized in submodules according to their purpose:"
msgstr ""

msgid ":mod:`datalab.gui.processor.base`: Common processing features"
msgstr ""

msgid ":mod:`datalab.gui.processor.signal`: Signal processing features"
msgstr ""

msgid ":mod:`datalab.gui.processor.image`: Image processing features"
msgstr ""

msgid "Generic processing types"
msgstr ""

msgid "To support consistent processing workflows, the :class:`BaseProcessor` class defines five generic processing methods, each corresponding to a fundamental input/output pattern. These methods are tightly integrated with the GUI logic: the input objects are taken from the current selection in the active panel (Signal or Image), and the output objects are automatically appended to the same panel."
msgstr ""

msgid "Descriptions:"
msgstr ""

msgid "``compute_1_to_1``: Applies an independent transformation to each selected object."
msgstr ""

msgid "``compute_1_to_0``: Runs an analysis or measurement producing metadata or scalar data."
msgstr ""

msgid "``compute_1_to_n``: Produces multiple output objects from a single input (e.g. ROI extraction)."
msgstr ""

msgid "``compute_n_to_1``: Aggregates multiple objects into one (e.g. sum, average); supports pairwise mode."
msgstr ""

msgid "``compute_2_to_1``: Applies a binary operation with a second operand (object or constant); supports pairwise mode."
msgstr ""

msgid "Method name"
msgstr ""

msgid "Signature"
msgstr ""

msgid "Multi-selection behavior"
msgstr ""

msgid "``compute_1_to_1``"
msgstr ""

msgid "1 object ➝ 1 object"
msgstr ""

msgid "k ➝ k"
msgstr ""

msgid "``compute_1_to_0``"
msgstr ""

msgid "1 object ➝ no object"
msgstr ""

msgid "k ➝ 0"
msgstr ""

msgid "``compute_1_to_n``"
msgstr ""

msgid "1 object ➝ n objects"
msgstr ""

msgid "k ➝ k·n"
msgstr ""

msgid "``compute_n_to_1``"
msgstr ""

msgid "n objects ➝ 1 object"
msgstr ""

msgid "n ➝ 1<br>n ➝ n (pairwise mode)"
msgstr ""

msgid "``compute_2_to_1``"
msgstr ""

msgid "1 object + 1 operand ➝ 1 object"
msgstr ""

msgid "k + 1 ➝ k<br>n + n ➝ n (pairwise mode)"
msgstr ""

msgid "These methods are for internal or advanced use (e.g. plugin or macro authors) and will evolve without backward compatibility guarantees."
msgstr ""

msgid "Future developments (such as a visual pipeline editor) may require generalizing this model to support additional sources and destinations beyond the current panel-based selection/output logic."
msgstr ""

