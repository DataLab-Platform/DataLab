# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Codra - Pierre Raybaut
# This file is distributed under the same license as the DataLab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: DataLab \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-13 18:19+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: fr\n"
"Language-Team: fr <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.0\n"

#: ../../dev/guidelines.rst:4
msgid "Coding guidelines"
msgstr ""

#: ../../dev/guidelines.rst:7
msgid "Generic coding guidelines"
msgstr ""

#: ../../dev/guidelines.rst:9
msgid ""
"We follow the `PEP 8 <https://www.python.org/dev/peps/pep-0008/>`_ coding"
" style."
msgstr ""

#: ../../dev/guidelines.rst:11
msgid "In particular, we are especially strict about the following guidelines:"
msgstr ""

#: ../../dev/guidelines.rst:13
msgid "Limit all lines to a maximum of 79 characters."
msgstr ""

#: ../../dev/guidelines.rst:14
msgid "Respect the naming conventions (classes, functions, variables, etc.)."
msgstr ""

#: ../../dev/guidelines.rst:15
msgid "Use specific exceptions instead of the generic :class:`Exception`."
msgstr ""

#: ../../dev/guidelines.rst:17
msgid "To enforce these guidelines, the following tools are mandatory:"
msgstr ""

#: ../../dev/guidelines.rst:19
msgid "`black <https://pypi.org/project/black/>`_ for code formatting."
msgstr ""

#: ../../dev/guidelines.rst:20
msgid "`isort <https://pypi.org/project/isort/>`_ for import sorting."
msgstr ""

#: ../../dev/guidelines.rst:21
msgid "`pylint <https://pypi.org/project/pylint/>`_ for static code analysis."
msgstr ""

#: ../../dev/guidelines.rst:24
msgid "black"
msgstr ""

#: ../../dev/guidelines.rst:26
msgid ""
"If you are using `Visual Studio Code <https://code.visualstudio.com/>`_, "
"the project settings will automatically format your code on save."
msgstr ""

#: ../../dev/guidelines.rst:29
msgid ""
"Or you may use `black` manually. To format your code, run the following "
"command::"
msgstr ""

#: ../../dev/guidelines.rst:34
msgid "isort"
msgstr ""

#: ../../dev/guidelines.rst:36
msgid ""
"Again, if you are using `Visual Studio Code "
"<https://code.visualstudio.com/>`_, the project settings will "
"automatically sort your imports on save."
msgstr ""

#: ../../dev/guidelines.rst:39
msgid ""
"Or you may use `isort` manually. To sort your imports, run the following "
"command::"
msgstr ""

#: ../../dev/guidelines.rst:44
msgid "pylint"
msgstr ""

#: ../../dev/guidelines.rst:46
msgid "To run `pylint`, run the following command::"
msgstr ""

#: ../../dev/guidelines.rst:50
msgid ""
"If you are using `Visual Studio Code <https://code.visualstudio.com/>`_ "
"on Windows, you may run the task \"Run Pylint\" to run `pylint` on the "
"project."
msgstr ""

#: ../../dev/guidelines.rst:55
msgid "A `pylint` rating greater than 9/10 is required to merge a pull request."
msgstr ""

#: ../../dev/guidelines.rst:58
msgid "Specific coding guidelines"
msgstr ""

#: ../../dev/guidelines.rst:60
msgid ""
"In addition to the generic coding guidelines, we have the following "
"specific guidelines:"
msgstr ""

#: ../../dev/guidelines.rst:63
msgid ""
"Write docstrings for all classes, methods and functions. The docstrings "
"should follow the `Google style <http://google-"
"styleguide.googlecode.com/svn/trunk/pyguide.html?showone=Comments#Comments>`_."
msgstr ""

#: ../../dev/guidelines.rst:66
msgid ""
"Add typing annotations for all functions and methods. The annotations "
"should use the future syntax (``from __future__ import annotations``)"
msgstr ""

#: ../../dev/guidelines.rst:69
msgid ""
"Try to keep the code as simple as possible. If you have to write a "
"complex piece of code, try to split it into several functions or classes."
msgstr ""

#: ../../dev/guidelines.rst:72
msgid ""
"Add as many comments as possible. The code should be self-explanatory, "
"but it is always useful to add some comments to explain the general idea "
"of the code, or to explain some tricky parts."
msgstr ""

#: ../../dev/guidelines.rst:76
msgid ""
"Do not use ``from module import *`` statements, even in the ``__init__`` "
"module of a package."
msgstr ""

#: ../../dev/guidelines.rst:79
msgid ""
"Avoid using mixins (multiple inheritance) when possible. It is often "
"possible to use composition instead of inheritance."
msgstr ""

#: ../../dev/guidelines.rst:82
msgid ""
"Avoid using ``__getattr__`` and ``__setattr__`` methods. They are often "
"used to implement lazy initialization, but this can be done in a more "
"explicit way."
msgstr ""

