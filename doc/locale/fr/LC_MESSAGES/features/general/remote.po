# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, DataLab Platform Developers
# This file is distributed under the same license as the DataLab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: DataLab \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-05 15:36+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../doc/features/general/remote.rst:-1
msgid ""
"How to remote control DataLab, the open-source scientific data analysis "
"and visualization platform"
msgstr ""
"Comment contrôler à distance DataLab, la plateforme open-source d'analyse"
" et de visualisation de données scientifiques"

#: ../../doc/features/general/remote.rst:-1
msgid ""
"DataLab, remote control, XML-RPC, Python, IDE, Spyder, Jupyter, third-"
"party application, signal, image, HDF5, calculation, processor"
msgstr ""
"DataLab, contrôle à distance, XML-RPC, Python, IDE, Spyder, Jupyter, "
"application tierce, signal, image, HDF5, calcul, processeur"

#: ../../doc/features/general/remote.rst:4
msgid "Remote controlling"
msgstr "Contrôle à distance"

#: ../../doc/features/general/remote.rst:10
msgid ""
"DataLab may be controlled remotely using the `XML-RPC`_ protocol which is"
" natively supported by Python (and many other languages). Remote "
"controlling allows to access DataLab main features from a separate "
"process."
msgstr ""
"DataLab peut être contrôlé à distance en utilisant le protocole `XML-"
"RPC`_ qui est nativement supporté par Python (et beaucoup d'autres "
"langages). Le contrôle à distance permet d'accéder aux principales "
"fonctionnalités de DataLab à partir d'un processus séparé."

#: ../../doc/features/general/remote.rst:16
msgid ""
"If you are looking for a lighweight alternative solution to remote "
"control DataLab (i.e. without having to install the whole DataLab package"
" and its dependencies on your environment), please have a look at the "
"`DataLab Simple Client`_ package (`pip install cdlclient`)."
msgstr ""
"Si vous recherchez une solution alternative légère pour contrôler DataLab"
" à distance (c'est-à-dire sans avoir à installer l'ensemble du package "
"DataLab et ses dépendances sur votre environnement), veuillez consulter "
"le package `DataLab Simple Client`_ (`pip install cdlclient`)."

#: ../../doc/features/general/remote.rst:24
msgid "From an IDE"
msgstr "Depuis un IDE"

#: ../../doc/features/general/remote.rst:26
msgid ""
"DataLab may be controlled remotely from an IDE (e.g. `Spyder`_ or any "
"other IDE, or even a Jupyter Notebook) that runs a Python script. It "
"allows to connect to a running DataLab instance, adds a signal and an "
"image, and then runs calculations. This feature is exposed by the "
"`RemoteProxy` class that is provided in module ``cdl.proxy``."
msgstr ""
"DataLab peut être contrôlé à distance depuis un IDE (par exemple "
"`Spyder`_ ou tout autre IDE, ou même un Jupyter Notebook) qui exécute un "
"script Python. Il permet de se connecter à une instance de DataLab en "
"cours d'exécution, d'ajouter un signal et une image, puis d'exécuter des "
"calculs. Cette fonctionnalité est exposée par la classe RemoteProxy "
"fournie dans le module cdl.proxy."

#: ../../doc/features/general/remote.rst:33
msgid "From a third-party application"
msgstr "Depuis une application tierce"

#: ../../doc/features/general/remote.rst:35
msgid ""
"DataLab may also be controlled remotely from a third-party application, "
"for the same purpose."
msgstr ""
"DataLab peut également être contrôlé à distance depuis une application "
"tierce, dans le même but."

#: ../../doc/features/general/remote.rst:38
msgid ""
"If the third-party application is written in Python 3, it may directly "
"use the `RemoteProxy` class as mentioned above. From another language, it"
" is also achievable, but it requires to implement a XML-RPC client in "
"this language using the same methods of proxy server as in the "
"`RemoteProxy` class."
msgstr ""
"Si l'application tierce est écrite en Python 3, elle peut directement "
"utiliser la classe RemoteProxy comme mentionné ci-dessus. Depuis un autre"
" langage, c'est également réalisable, mais cela nécessite d'implémenter "
"un client XML-RPC dans ce langage en utilisant les mêmes méthodes de "
"serveur proxy que dans la classe RemoteProxy."

#: ../../doc/features/general/remote.rst:43
msgid ""
"Data (signals and images) may also be exchanged between DataLab and the "
"remote client application, in both directions."
msgstr ""
"Les données (signaux et images) peuvent également être échangées entre "
"DataLab et l'application cliente distante, dans les deux sens."

#: ../../doc/features/general/remote.rst:46
msgid ""
"The remote client application may be written in any language that "
"supports XML-RPC. For example, it is possible to write a remote client "
"application in Python, Java, C++, C#, etc. The remote client application "
"may be a graphical application or a command line application."
msgstr ""
"L'application cliente distante peut être écrite dans n'importe quel "
"langage qui prend en charge XML-RPC. Par exemple, il est possible "
"d'écrire une application cliente distante en Python, Java, C++, C#, etc. "
"L'application cliente distante peut être une application graphique ou une"
" application en ligne de commande."

#: ../../doc/features/general/remote.rst:51
msgid ""
"The remote client application may be run on the same computer as DataLab "
"or on a different computer. In the latter case, the remote client "
"application must know the IP address of the computer running DataLab."
msgstr ""
"L'application cliente distante peut être exécutée sur le même ordinateur "
"que DataLab ou sur un ordinateur différent. Dans ce dernier cas, "
"l'application cliente distante doit connaître l'adresse IP de "
"l'ordinateur exécutant DataLab."

#: ../../doc/features/general/remote.rst:55
msgid ""
"The remote client application may be run before or after DataLab. In the "
"latter case, the remote client application must try to connect to DataLab"
" until it succeeds."
msgstr ""
"L'application cliente distante peut être exécutée avant ou après DataLab."
" Dans ce dernier cas, l'application cliente distante doit essayer de se "
"connecter à DataLab jusqu'à ce qu'elle réussisse."

#: ../../doc/features/general/remote.rst:60
msgid "Supported features"
msgstr "Fonctionnalités prises en charge"

#: ../../doc/features/general/remote.rst:62
msgid "Supported features are the following:"
msgstr "Les fonctionnalités prises en charge sont les suivantes :"

#: ../../doc/features/general/remote.rst:64
msgid "Switch to signal or image panel"
msgstr "Basculer vers le panneau de signal ou d'image"

#: ../../doc/features/general/remote.rst:65
msgid "Remove all signals and images"
msgstr "Supprimer tous les signaux et images"

#: ../../doc/features/general/remote.rst:66
msgid "Save current session to a HDF5 file"
msgstr "Enregistrer la session en cours dans un fichier HDF5"

#: ../../doc/features/general/remote.rst:67
msgid "Open HDF5 files into current session"
msgstr "Ouvrir des fichiers HDF5 dans la session en cours"

#: ../../doc/features/general/remote.rst:68
msgid "Browse HDF5 file"
msgstr "Parcourir un fichier HDF5"

#: ../../doc/features/general/remote.rst:69
msgid "Open a signal or an image from file"
msgstr "Ouvrir un signal ou une image à partir d'un fichier"

#: ../../doc/features/general/remote.rst:70
msgid "Add a signal"
msgstr "Ajouter un signal"

#: ../../doc/features/general/remote.rst:71
msgid "Add an image"
msgstr "Ajouter une image"

#: ../../doc/features/general/remote.rst:72
msgid "Get object list"
msgstr "Obtenir la liste des objets"

#: ../../doc/features/general/remote.rst:73
msgid "Run calculation with parameters"
msgstr "Exécuter un calcul avec des paramètres"

#: ../../doc/features/general/remote.rst:77
msgid ""
"The signal and image objects are described on this section: :ref:`ref-to-"
"model`."
msgstr ""
"Les objets signal et image sont décrits dans cette section : :ref:`ref-"
"to-model`."

#: ../../doc/features/general/remote.rst:79
msgid ""
"Some examples are provided to help implementing such a communication "
"between your application and DataLab:"
msgstr ""
"Quelques exemples sont fournis pour aider à implémenter une telle "
"communication entre votre application et DataLab :"

#: ../../doc/features/general/remote.rst:82
msgid "See module: ``cdl.tests.remoteclient_app``"
msgstr "Voir le module : ``cdl.tests.remoteclient_app``"

#: ../../doc/features/general/remote.rst:83
msgid "See module: ``cdl.tests.remoteclient_unit``"
msgstr "Voir le module : ``cdl.tests.remoteclient_unit``"

#: ../../doc/features/general/remote.rst:87
msgid ""
"Screenshot of remote client application test "
"(``cdl.tests.remoteclient_app``)"
msgstr ""
"Capture d'écran du test de l'application cliente distante "
"(``cdl.tests.remoteclient_app``)"

#: ../../doc/features/general/remote.rst:90 cdl.core.remote.RemoteClient:5 of
msgid "Examples"
msgstr "Exemples"

#: ../../doc/features/general/remote.rst:92
msgid ""
"When using Python 3, you may directly use the `RemoteProxy` class as in "
"examples cited above or below."
msgstr ""
"Lorsque vous utilisez Python 3, vous pouvez utiliser directement la "
"classe `RemoteProxy` comme dans les exemples cités ci-dessus ou ci-"
"dessous."

#: ../../doc/features/general/remote.rst:95
msgid ""
"Here is an example in Python 3 of a script that connects to a running "
"DataLab instance, adds a signal and an image, and then runs calculations "
"(the cell structure of the script make it convenient to be used in "
"`Spyder`_ IDE):"
msgstr ""
"Voici un exemple en Python 3 d'un script qui se connecte à une instance "
"de DataLab en cours d'exécution, ajoute un signal et une image, puis "
"exécute des calculs (la structure de cellule du script le rend pratique à"
" utiliser dans l'IDE `Spyder`_):"

#: ../../doc/features/general/remote.rst:101
msgid "Here is a Python 2.7 reimplementation of this class:"
msgstr "Voici une réimplémentation de cette classe en Python 2.7 :"

#: ../../doc/features/general/remote.rst:106
msgid "Connection dialog"
msgstr "Boîte de dialogue de connexion"

#: ../../doc/features/general/remote.rst:108
msgid ""
"The DataLab package also provides a connection dialog that may be used to"
" connect to a running DataLab instance. It is exposed by the "
":py:class:`cdl.widgets.connection.ConnectionDialog` class."
msgstr ""
"Le package DataLab fournit également une boîte de dialogue de connexion "
"qui peut être utilisée pour se connecter à une instance de DataLab en "
"cours d'exécution. Elle est exposée par la classe "
":py:class:`cdl.widgets.connection.ConnectionDialog`."

#: ../../doc/features/general/remote.rst:114
msgid ""
"Screenshot of connection dialog "
"(``cdl.widgets.connection.ConnectionDialog``)"
msgstr ""
"Capture d'écran de la boîte de dialogue de connexion "
"(``cdl.widgets.connection.ConnectionDialog``)"

#: ../../doc/features/general/remote.rst:116
msgid "Example of use:"
msgstr "Exemple d'utilisation :"

#: ../../doc/features/general/remote.rst:121
msgid "Public API: remote client"
msgstr "API publique : client distant"

#: cdl.core.remote.RemoteClient:1 of
msgid ""
"Object representing a proxy/client to DataLab XML-RPC server. This object"
" is used to call DataLab functions from a Python script."
msgstr ""
"Objet représentant un proxy/client vers le serveur XML-RPC de DataLab. "
"Cet objet est utilisé pour appeler les fonctions de DataLab à partir d'un"
" script Python."

#: cdl.core.remote.RemoteClient:6 of
msgid ""
"Here is a simple example of how to use RemoteClient in a Python script or"
" in a Jupyter notebook:"
msgstr ""
"Voici un exemple simple de l'utilisation de RemoteClient dans un script "
"Python ou dans un notebook Jupyter :"

#: cdl.core.remote.RemoteClient.connect:1 of
msgid "Try to connect to DataLab XML-RPC server."
msgstr "Tentative de connexion au serveur XML-RPC de DataLab."

#: ../../doc/features/general/remote.rst
msgid "Parameters"
msgstr "Paramètres"

#: cdl.core.remote.RemoteClient.connect:3 of
msgid ""
"XML-RPC port to connect to. If not specified, the port is automatically "
"retrieved from DataLab configuration."
msgstr ""
"Port XML-RPC auquel se connecter. Si non spécifié, le port est "
"automatiquement récupéré à partir de la configuration de DataLab."

#: cdl.core.remote.RemoteClient.connect:5 of
msgid "Timeout in seconds. Defaults to 5.0."
msgstr "Délai d'attente en secondes. Par défaut, 5.0."

#: cdl.core.remote.RemoteClient.connect:6 of
msgid "Number of retries. Defaults to 10."
msgstr "Nombre de tentatives. Par défaut, 10."

#: ../../doc/features/general/remote.rst
msgid "Raises"
msgstr "Lève"

#: cdl.core.remote.RemoteClient.connect:8 of
msgid "Unable to connect to DataLab"
msgstr "Impossible de se connecter à DataLab"

#: cdl.core.remote.RemoteClient.connect:9 of
msgid "Invalid timeout (must be >= 0.0)"
msgstr "Délai d'attente non valide (doit être >= 0.0)"

#: cdl.core.remote.RemoteClient.connect:10 of
msgid "Invalid number of retries (must be >= 1)"
msgstr "Nombre de tentatives non valide (doit être >= 1)"

#: cdl.core.remote.RemoteClient.disconnect:1 of
msgid "Disconnect from DataLab XML-RPC server."
msgstr "Déconnexion du serveur XML-RPC de DataLab."

#: cdl.core.remote.RemoteClient.is_connected:1 of
msgid "Return True if connected to DataLab XML-RPC server."
msgstr "Renvoie True si connecté au serveur XML-RPC de DataLab."

#: cdl.core.remote.RemoteClient.get_method_list:1 of
msgid "Return list of available methods."
msgstr "Renvoie la liste des méthodes disponibles."

#: cdl.core.remote.RemoteClient.add_signal:1 of
msgid "Add signal data to DataLab."
msgstr "Ajouter des données de signal à DataLab."

#: cdl.core.remote.RemoteClient.add_signal:3 of
msgid "Signal title"
msgstr "Titre du signal"

#: cdl.core.remote.RemoteClient.add_signal:4 of
msgid "X data"
msgstr "Données X"

#: cdl.core.remote.RemoteClient.add_signal:5 of
msgid "Y data"
msgstr "Données Y"

#: cdl.core.remote.RemoteClient.add_image:5
#: cdl.core.remote.RemoteClient.add_signal:6 of
msgid "X unit. Defaults to None."
msgstr "Unité X. Par défaut, None."

#: cdl.core.remote.RemoteClient.add_image:6
#: cdl.core.remote.RemoteClient.add_signal:7 of
msgid "Y unit. Defaults to None."
msgstr "Unité Y. Par défaut, None."

#: cdl.core.remote.RemoteClient.add_image:8
#: cdl.core.remote.RemoteClient.add_signal:8 of
msgid "X label. Defaults to None."
msgstr "Libellé X. Par défaut, None."

#: cdl.core.remote.RemoteClient.add_image:9
#: cdl.core.remote.RemoteClient.add_signal:9 of
msgid "Y label. Defaults to None."
msgstr "Libellé Y. Par défaut, None."

#: ../../doc/features/general/remote.rst
#: cdl.core.baseproxy.AbstractCDLControl.context_no_refresh of
msgid "Returns"
msgstr "Renvoie"

#: cdl.core.remote.RemoteClient.add_signal:11 of
msgid "True if signal was added successfully, False otherwise"
msgstr "True si le signal a été ajouté avec succès, False sinon"

#: cdl.core.remote.RemoteClient.add_signal:13 of
msgid "Invalid xdata dtype"
msgstr "Type de données xdata non valide"

#: cdl.core.remote.RemoteClient.add_signal:14 of
msgid "Invalid ydata dtype"
msgstr "Type de données ydata non valide"

#: cdl.core.remote.RemoteClient.add_image:1 of
msgid "Add image data to DataLab."
msgstr "Ajouter des données d'image à DataLab."

#: cdl.core.remote.RemoteClient.add_image:3 of
msgid "Image title"
msgstr "Titre de l'image"

#: cdl.core.remote.RemoteClient.add_image:4 of
msgid "Image data"
msgstr "Données de l'image"

#: cdl.core.remote.RemoteClient.add_image:7 of
msgid "Z unit. Defaults to None."
msgstr "Unité Z. Par défaut, None."

#: cdl.core.remote.RemoteClient.add_image:10 of
msgid "Z label. Defaults to None."
msgstr "Libellé Z. Par défaut, None."

#: cdl.core.remote.RemoteClient.add_image:12 of
msgid "True if image was added successfully, False otherwise"
msgstr "True si l'image a été ajoutée avec succès, False sinon"

#: cdl.core.remote.RemoteClient.add_image:14 of
msgid "Invalid data dtype"
msgstr "Type de données non valide"

#: cdl.core.remote.RemoteClient.add_object:1 of
msgid "Add object to DataLab."
msgstr "Ajouter un objet à DataLab."

#: cdl.core.remote.RemoteClient.add_object:3 of
msgid "Signal or image object"
msgstr "Objet signal ou image"

#: cdl.core.remote.RemoteClient.calc:1 of
msgid "Call compute function ``name`` in current panel's processor."
msgstr ""
"Appeler la fonction de calcul ``name`` dans le processeur du panneau en "
"cours."

#: cdl.core.remote.RemoteClient.calc:3 of
msgid "Compute function name"
msgstr "Nom de la fonction de calcul"

#: cdl.core.remote.RemoteClient.calc:4 of
msgid "Compute function parameter. Defaults to None."
msgstr "Paramètre de la fonction de calcul. Par défaut, None."

#: cdl.core.remote.RemoteClient.calc:6 of
msgid "unknown function"
msgstr ""

#: cdl.core.remote.RemoteClient.get_object:1 of
msgid "Get object (signal/image) from index."
msgstr "Obtenir un objet (signal/image) à partir de l'index."

#: cdl.core.remote.RemoteClient.get_object:3
#: cdl.core.remote.RemoteClient.get_object_shapes:3 of
msgid ""
"Object number, or object id, or object title. Defaults to None (current "
"object)."
msgstr ""
"Numéro d'objet, ou identifiant d'objet, ou titre d'objet. Par défaut, "
"None (objet en cours)."

#: cdl.core.remote.RemoteClient.get_object:5
#: cdl.core.remote.RemoteClient.get_object_shapes:5 of
msgid "Panel name. Defaults to None (current panel)."
msgstr "Nom du panneau. Par défaut, None (panneau en cours)."

#: cdl.core.remote.RemoteClient.get_object:7 of
msgid "Object"
msgstr "Objet"

#: cdl.core.remote.RemoteClient.get_object:9 of
msgid "if object not found"
msgstr "si l'objet n'est pas trouvé"

#: cdl.core.remote.RemoteClient.get_object_shapes:1 of
msgid "Get plot item shapes associated to object (signal/image)."
msgstr ""
"Obtenir les formes géométriques des éléments de tracé associés à l'objet "
"(signal/image)."

#: cdl.core.remote.RemoteClient.get_object_shapes:7 of
msgid "List of plot item shapes"
msgstr "Liste des formes géométriques des éléments de tracé"

#: cdl.core.remote.RemoteClient.add_annotations_from_items:1 of
msgid "Add object annotations (annotation plot items)."
msgstr "Ajouter des annotations d'objet (éléments de tracé d'annotation)."

#: cdl.core.remote.RemoteClient.add_annotations_from_items:3 of
msgid "annotation plot items"
msgstr "éléments de tracé d'annotation"

#: cdl.core.remote.RemoteClient.add_annotations_from_items:4 of
msgid "refresh plot. Defaults to True."
msgstr "rafraîchir le tracé. Par défaut, True."

#: cdl.core.baseproxy.BaseProxy.add_label_with_title:5
#: cdl.core.baseproxy.BaseProxy.get_object_uuids:4
#: cdl.core.remote.RemoteClient.add_annotations_from_items:5 of
msgid ""
"panel name (valid values: \"signal\", \"image\"). If None, current panel "
"is used."
msgstr ""
"nom du panneau (valeurs valides : \"signal\", \"image\"). Si None, le "
"panneau en cours est utilisé."

#: cdl.core.baseproxy.BaseProxy.add_label_with_title:1 of
msgid "Add a label with object title on the associated plot"
msgstr "Ajouter une étiquette avec le titre de l'objet sur le tracé associé"

#: cdl.core.baseproxy.BaseProxy.add_label_with_title:3 of
msgid "Label title. Defaults to None. If None, the title is the object title."
msgstr ""
"Titre de l'étiquette. Par défaut, None. Si None, le titre est le titre de"
" l'objet."

#: cdl.core.baseproxy.BaseProxy.close_application:1 of
msgid "Close DataLab application"
msgstr "Fermer l'application DataLab"

#: cdl.core.baseproxy.AbstractCDLControl.context_no_refresh:1 of
msgid "Return a context manager to temporarily disable auto refresh."
msgstr ""
"Renvoie un gestionnaire de contexte pour désactiver temporairement le "
"rafraîchissement automatique."

#: cdl.core.baseproxy.AbstractCDLControl.context_no_refresh:3 of
msgid "Context manager"
msgstr "Gestionnaire de contexte"

#: cdl.core.baseproxy.AbstractCDLControl.context_no_refresh:6 of
msgid "Example"
msgstr "Exemple"

#: cdl.core.baseproxy.BaseProxy.delete_metadata:1 of
msgid "Delete metadata of selected objects"
msgstr "Supprimer les métadonnées des objets sélectionnés"

#: cdl.core.baseproxy.BaseProxy.delete_metadata:3 of
msgid "Refresh plot. Defaults to True."
msgstr "Rafraîchir le tracé. Par défaut, True."

#: cdl.core.baseproxy.BaseProxy.delete_metadata:4 of
msgid "Keep ROI. Defaults to False."
msgstr "Conserver la ROI. Par défaut, False."

#: cdl.core.baseproxy.BaseProxy.get_current_panel:1 of
msgid "Return current panel name."
msgstr "Renvoie le nom du panneau en cours."

#: cdl.core.baseproxy.BaseProxy.get_current_panel:3 of
msgid "\"signal\", \"image\", \"macro\"))"
msgstr "\"signal\", \"image\", \"macro\"))"

#: ../../doc/features/general/remote.rst
msgid "Return type"
msgstr "Type de retour"

#: cdl.core.baseproxy.BaseProxy.get_group_titles_with_object_infos:1 of
msgid "Return groups titles and lists of inner objects uuids and titles."
msgstr ""
"Renvoie les titres des groupes et les listes des uuids et titres des "
"objets internes."

#: cdl.core.baseproxy.BaseProxy.get_group_titles_with_object_infos:3 of
msgid "groups titles, lists of inner objects uuids and titles"
msgstr "titres des groupes, listes des uuids et titres des objets internes"

#: cdl.core.baseproxy.BaseProxy.get_object_titles:1 of
msgid ""
"Get object (signal/image) list for current panel. Objects are sorted by "
"group number and object index in group."
msgstr ""
"Obtenir la liste des objets (signal/image) pour le panneau en cours. Les "
"objets sont triés par numéro de groupe et index d'objet dans le groupe."

#: cdl.core.baseproxy.BaseProxy.get_object_titles:4 of
msgid ""
"panel name (valid values: \"signal\", \"image\", \"macro\"). If None, "
"current data panel is used (i.e. signal or image panel)."
msgstr ""
"nom du panneau (valeurs valides : \"signal\", \"image\", \"macro\"). Si "
"None, le panneau de données en cours est utilisé (c'est-à-dire le panneau"
" de signal ou d'image)."

#: cdl.core.baseproxy.BaseProxy.get_object_titles:7 of
msgid "List of object titles"
msgstr "Liste des titres des objets"

#: cdl.core.baseproxy.BaseProxy.get_object_titles:9
#: cdl.core.baseproxy.BaseProxy.get_object_uuids:9 of
msgid "if panel not found"
msgstr "si le panneau n'est pas trouvé"

#: cdl.core.baseproxy.BaseProxy.get_object_uuids:1 of
msgid ""
"Get object (signal/image) uuid list for current panel. Objects are sorted"
" by group number and object index in group."
msgstr ""
"Obtenir la liste des uuids des objets (signal/image) pour le panneau en "
"cours. Les objets sont triés par numéro de groupe et index d'objet dans "
"le groupe."

#: cdl.core.baseproxy.BaseProxy.get_object_uuids:7 of
msgid "List of object uuids"
msgstr "Liste des uuid des objets"

#: cdl.core.baseproxy.AbstractCDLControl.get_public_methods:1 of
msgid "Return all public methods of the class, except itself."
msgstr "Renvoie toutes les méthodes publiques de la classe, sauf elle-même."

#: cdl.core.baseproxy.AbstractCDLControl.get_public_methods:3 of
msgid "List of public methods"
msgstr "Liste des méthodes publiques"

#: cdl.core.baseproxy.BaseProxy.get_sel_object_uuids:1 of
msgid "Return selected objects uuids."
msgstr "Renvoie les uuids des objets sélectionnés."

#: cdl.core.baseproxy.BaseProxy.get_sel_object_uuids:3 of
msgid "If True, also return objects from selected groups."
msgstr "Si True, renvoie également les objets des groupes sélectionnés."

#: cdl.core.baseproxy.BaseProxy.get_sel_object_uuids:5 of
msgid "List of selected objects uuids."
msgstr "Liste des uuids des objets sélectionnés."

#: cdl.core.baseproxy.BaseProxy.get_version:1 of
msgid "Return DataLab public version."
msgstr "Renvoie la version de DataLab."

#: cdl.core.baseproxy.BaseProxy.get_version:3 of
msgid "DataLab version"
msgstr "Version de DataLab"

#: cdl.core.baseproxy.BaseProxy.import_h5_file:1 of
msgid "Open DataLab HDF5 browser to Import HDF5 file."
msgstr "Ouvrir le navigateur HDF5 de DataLab pour importer un fichier HDF5."

#: cdl.core.baseproxy.BaseProxy.import_h5_file:3
#: cdl.core.baseproxy.BaseProxy.save_to_h5_file:3 of
msgid "HDF5 file name"
msgstr "Nom du fichier HDF5"

#: cdl.core.baseproxy.BaseProxy.import_h5_file:4
#: cdl.core.baseproxy.BaseProxy.open_h5_files:5 of
msgid "Reset all application data. Defaults to None."
msgstr "Réinitialiser toutes les données de l'application. Par défaut, None."

#: cdl.core.baseproxy.BaseProxy.import_macro_from_file:1 of
msgid "Import macro from file"
msgstr "Importer une macro à partir d'un fichier"

#: cdl.core.baseproxy.BaseProxy.import_macro_from_file:3 of
msgid "Filename."
msgstr "Nom du fichier."

#: cdl.core.baseproxy.BaseProxy.load_from_files:1 of
msgid "Open objects from files in current panel (signals/images)."
msgstr "Ouvrir des objets à partir de fichiers dans le panneau en cours "

#: cdl.core.baseproxy.BaseProxy.load_from_files:3 of
msgid "list of file names"
msgstr "liste des noms de fichiers"

#: cdl.core.baseproxy.BaseProxy.open_h5_files:1 of
msgid "Open a DataLab HDF5 file or import from any other HDF5 file."
msgstr ""
"Ouvrir un fichier HDF5 de DataLab ou importer à partir de tout autre "
"fichier HDF5."

#: cdl.core.baseproxy.BaseProxy.open_h5_files:3 of
msgid "List of HDF5 files to open. Defaults to None."
msgstr "Liste des fichiers HDF5 à ouvrir. Par défaut, None."

#: cdl.core.baseproxy.BaseProxy.open_h5_files:4 of
msgid "Import all objects from HDF5 files. Defaults to None."
msgstr "Importer tous les objets à partir des fichiers HDF5. Par défaut, None."

#: cdl.core.baseproxy.BaseProxy.raise_window:1 of
msgid "Raise DataLab window"
msgstr "Faire apparaître la fenêtre de DataLab"

#: cdl.core.baseproxy.BaseProxy.reset_all:1 of
msgid "Reset all application data"
msgstr "Réinitialiser toutes les données de l'application"

#: cdl.core.baseproxy.BaseProxy.run_macro:1 of
msgid "Run macro."
msgstr "Exécute la macro."

#: cdl.core.baseproxy.BaseProxy.run_macro:3
#: cdl.core.baseproxy.BaseProxy.stop_macro:3 of
msgid "Macro number, or macro title. Defaults to None (current macro)."
msgstr "Numéro de macro, ou titre de macro. Par défaut, None (macro en cours)."

#: cdl.core.baseproxy.BaseProxy.run_macro:6
#: cdl.core.baseproxy.BaseProxy.stop_macro:6 of
msgid "if macro not found"
msgstr "si la macro n'est pas trouvée"

#: cdl.core.baseproxy.BaseProxy.save_to_h5_file:1 of
msgid "Save to a DataLab HDF5 file."
msgstr "Enregistrer dans un fichier HDF5 de DataLab."

#: cdl.core.baseproxy.BaseProxy.select_groups:1 of
msgid "Select groups in current panel."
msgstr "Sélectionner des groupes dans le panneau en cours."

#: cdl.core.baseproxy.BaseProxy.select_groups:3 of
msgid ""
"List of group numbers (1 to N), or list of group uuids, or None to select"
" all groups. Defaults to None."
msgstr ""
"Liste des numéros de groupe (1 à N), ou liste des uuids de groupe, ou "
"None pour sélectionner tous les groupes. Par défaut, None."

#: cdl.core.baseproxy.BaseProxy.select_groups:5
#: cdl.core.baseproxy.BaseProxy.select_objects:4 of
msgid ""
"panel name (valid values: \"signal\", \"image\"). If None, current panel "
"is used. Defaults to None."
msgstr ""
"nom du panneau (valeurs valides : \"signal\", \"image\"). Si None, le "
"panneau en cours est utilisé. Par défaut, None."

#: cdl.core.baseproxy.BaseProxy.select_objects:1 of
msgid "Select objects in current panel."
msgstr "Sélectionner des objets dans le panneau en cours."

#: cdl.core.baseproxy.BaseProxy.select_objects:3 of
msgid "List of object numbers (1 to N) or uuids to select"
msgstr "Liste des numéros d'objet (1 à N) ou uuids à sélectionner"

#: cdl.core.baseproxy.BaseProxy.set_current_panel:1 of
msgid "Switch to panel."
msgstr "Basculer vers le panneau."

#: cdl.core.baseproxy.BaseProxy.set_current_panel:3 of
msgid "Panel name (valid values: \"signal\", \"image\", \"macro\"))"
msgstr "Nom du panneau (valeurs valides : \"signal\", \"image\", \"macro\"))"

#: cdl.core.baseproxy.BaseProxy.stop_macro:1 of
msgid "Stop macro."
msgstr "Arrête la macro."

#: cdl.core.baseproxy.BaseProxy.toggle_auto_refresh:1 of
msgid "Toggle auto refresh state."
msgstr "Basculer l'état du rafraîchissement automatique."

#: cdl.core.baseproxy.BaseProxy.toggle_auto_refresh:3 of
msgid "Auto refresh state"
msgstr "État du rafraîchissement automatique"

#: cdl.core.baseproxy.BaseProxy.toggle_show_titles:1 of
msgid "Toggle show titles state."
msgstr "Basculer l'état d'affichage des titres."

#: cdl.core.baseproxy.BaseProxy.toggle_show_titles:3 of
msgid "Show titles state"
msgstr "État d'affichage des titres"

#: ../../doc/features/general/remote.rst:127
msgid "Public API: additional methods"
msgstr "API publique : méthodes supplémentaires"

#: ../../doc/features/general/remote.rst:129
msgid ""
"The remote control class methods (either using the proxy or the remote "
"client) may be completed with additional methods which are dynamically "
"added at runtime. This mechanism allows to access the methods of the "
"processors of DataLab (see :mod:`cdl.core.gui.processor`)."
msgstr ""
"Les méthodes de la classe de contrôle à distance (en utilisant le proxy "
"ou le client distant) peuvent être complétées par des méthodes "
"supplémentaires qui sont ajoutées dynamiquement à l'exécution. Ce "
"mécanisme permet d'accéder aux méthodes des processeurs de DataLab (voir "
":mod:`cdl.core.gui.processor`)."

#: ../../doc/features/general/remote.rst:135
msgid "Signal processor"
msgstr "Processeur de signal"

#: ../../doc/features/general/remote.rst:137
msgid ""
"When working with signals, the methods of "
":class:`cdl.core.gui.processor.signal.SignalProcessor` may be accessed."
msgstr ""
"Lorsque vous travaillez avec des signaux, les méthodes de "
":class:`cdl.core.gui.processor.signal.SignalProcessor` peuvent être "
"accédées."

#: cdl.core.gui.processor.signal.SignalProcessor:1 of
msgid "Object handling signal processing: operations, processing, analysis"
msgstr "Objet de traitement de signal : opérations, traitement, analyse"

#: cdl.core.gui.processor.signal.SignalProcessor.compute_sum:1 of
msgid "Compute sum with :py:func:`cdl.computation.signal.compute_addition`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_addition_constant:1 of
msgid ""
"Compute sum with a constant with "
":py:func:`cdl.computation.signal.compute_addition_constant`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_average:1 of
msgid ""
"Compute average with :py:func:`cdl.computation.signal.compute_addition` "
"and divide by the number of signals"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_product:1 of
msgid "Compute product with :py:func:`cdl.computation.signal.compute_product`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_product_constant:1 of
msgid ""
"Compute product with a constant with "
":py:func:`cdl.computation.signal.compute_product_constant`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_swap_axes:1 of
msgid "Swap data axes with :py:func:`cdl.computation.signal.compute_swap_axes`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_abs:1 of
msgid "Compute absolute value with :py:func:`cdl.computation.signal.compute_abs`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_re:1 of
msgid "Compute real part with :py:func:`cdl.computation.signal.compute_re`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_im:1 of
msgid "Compute imaginary part with :py:func:`cdl.computation.signal.compute_im`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_astype:1 of
msgid "Convert data type with :py:func:`cdl.computation.signal.compute_astype`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_log10:1 of
msgid "Compute Log10 with :py:func:`cdl.computation.signal.compute_log10`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_exp:1 of
msgid "Compute Log10 with :py:func:`cdl.computation.signal.compute_exp`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_sqrt:1 of
msgid "Compute square root with :py:func:`cdl.computation.signal.compute_sqrt`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_power:1 of
msgid "Compute power with :py:func:`cdl.computation.signal.compute_power`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_arithmetic:1 of
msgid ""
"Compute arithmetic operation between two signals with "
":py:func:`cdl.computation.signal.compute_arithmetic`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_difference:1 of
msgid ""
"Compute difference between two signals with "
":py:func:`cdl.computation.signal.compute_difference`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_difference_constant:1
#: of
msgid ""
"Compute difference with a constant with "
":py:func:`cdl.computation.signal.compute_difference_constant`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_quadratic_difference:1
#: of
msgid ""
"Compute quadratic difference between two signals with "
":py:func:`cdl.computation.signal.compute_quadratic_difference`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_division:1 of
msgid ""
"Compute division between two signals with "
":py:func:`cdl.computation.signal.compute_division`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_division_constant:1 of
msgid ""
"Compute division by a constant with "
":py:func:`cdl.computation.signal.compute_division_constant`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_peak_detection:1 of
msgid ""
"Detect peaks from data with "
":py:func:`cdl.computation.signal.compute_peak_detection`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_reverse_x:1 of
msgid "Reverse X axis with :py:func:`cdl.computation.signal.compute_reverse_x`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_cartesian2polar:1 of
msgid ""
"Convert cartesian to polar coordinates with "
":py:func:`cdl.computation.signal.compute_cartesian2polar`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_polar2cartesian:1 of
msgid ""
"Convert polar to cartesian coordinates with "
":py:func:`cdl.computation.signal.compute_polar2cartesian`."
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_normalize:1 of
msgid "Normalize data with :py:func:`cdl.computation.signal.compute_normalize`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_derivative:1 of
msgid ""
"Compute derivative with "
":py:func:`cdl.computation.signal.compute_derivative`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_integral:1 of
msgid "Compute integral with :py:func:`cdl.computation.signal.compute_integral`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_calibration:1 of
msgid ""
"Compute data linear calibration with "
":py:func:`cdl.computation.signal.compute_calibration`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_clip:1 of
msgid ""
"Compute maximum data clipping with "
":py:func:`cdl.computation.signal.compute_clip`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_offset_correction:1 of
msgid ""
"Compute offset correction with "
":py:func:`cdl.computation.signal.compute_offset_correction`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_gaussian_filter:1 of
msgid ""
"Compute gaussian filter with "
":py:func:`cdl.computation.signal.compute_gaussian_filter`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_moving_average:1 of
msgid ""
"Compute moving average with "
":py:func:`cdl.computation.signal.compute_moving_average`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_moving_median:1 of
msgid ""
"Compute moving median with "
":py:func:`cdl.computation.signal.compute_moving_median`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_wiener:1 of
msgid ""
"Compute Wiener filter with "
":py:func:`cdl.computation.signal.compute_wiener`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_highpass:1
#: cdl.core.gui.processor.signal.SignalProcessor.compute_lowpass:1 of
msgid ""
"Compute high-pass filter with "
":py:func:`cdl.computation.signal.compute_filter`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_bandpass:1 of
msgid ""
"Compute band-pass filter with "
":py:func:`cdl.computation.signal.compute_filter`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_bandstop:1 of
msgid ""
"Compute band-stop filter with "
":py:func:`cdl.computation.signal.compute_filter`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_fft:1 of
msgid "Compute FFT with :py:func:`cdl.computation.signal.compute_fft`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_ifft:1 of
msgid "Compute iFFT with :py:func:`cdl.computation.signal.compute_ifft`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_magnitude_spectrum:1
#: of
msgid ""
"Compute magnitude spectrum with "
":py:func:`cdl.computation.signal.compute_magnitude_spectrum`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_phase_spectrum:1 of
msgid ""
"Compute phase spectrum with "
":py:func:`cdl.computation.signal.compute_phase_spectrum`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_psd:1 of
msgid ""
"Compute power spectral density with "
":py:func:`cdl.computation.signal.compute_psd`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_interpolation:1 of
msgid ""
"Compute interpolation with "
":py:func:`cdl.computation.signal.compute_interpolation`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_resampling:1 of
msgid ""
"Compute resampling with "
":py:func:`cdl.computation.signal.compute_resampling`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_detrending:1 of
msgid ""
"Compute detrending with "
":py:func:`cdl.computation.signal.compute_detrending`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_convolution:1 of
msgid ""
"Compute convolution with "
":py:func:`cdl.computation.signal.compute_convolution`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_windowing:1 of
msgid "Compute windowing with :py:func:`cdl.computation.signal.compute_windowing`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_allan_variance:1 of
msgid ""
"Compute Allan variance with "
":py:func:`cdl.computation.signal.compute_allan_variance`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_allan_deviation:1 of
msgid ""
"Compute Allan deviation with "
":py:func:`cdl.computation.signal.compute_allan_deviation`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_overlapping_allan_variance:1
#: of
msgid ""
"Compute overlapping Allan variance with "
":py:func:`cdl.computation.signal.compute_overlapping_allan_variance`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_modified_allan_variance:1
#: of
msgid ""
"Compute modified Allan variance with "
":py:func:`cdl.computation.signal.compute_modified_allan_variance`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_hadamard_variance:1 of
msgid ""
"Compute Hadamard variance with "
":py:func:`cdl.computation.signal.compute_hadamard_variance`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_total_variance:1 of
msgid ""
"Compute total variance with "
":py:func:`cdl.computation.signal.compute_total_variance`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_time_deviation:1 of
msgid ""
"Compute time deviation with "
":py:func:`cdl.computation.signal.compute_time_deviation`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_all_stability:1 of
msgid "Compute all stability analysis features using the following functions:"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_all_stability:4 of
msgid ":py:func:`cdl.computation.signal.compute_allan_variance`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_all_stability:5 of
msgid ":py:func:`cdl.computation.signal.compute_allan_deviation`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_all_stability:6 of
msgid ":py:func:`cdl.computation.signal.compute_overlapping_allan_variance`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_all_stability:7 of
msgid ":py:func:`cdl.computation.signal.compute_modified_allan_variance`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_all_stability:8 of
msgid ":py:func:`cdl.computation.signal.compute_hadamard_variance`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_all_stability:9 of
msgid ":py:func:`cdl.computation.signal.compute_total_variance`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_all_stability:10 of
msgid ":py:func:`cdl.computation.signal.compute_time_deviation`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_polyfit:1 of
msgid "Compute polynomial fitting curve"
msgstr "Calculer la courbe de régression polynomiale"

#: cdl.core.gui.processor.signal.SignalProcessor.compute_fit:1 of
msgid "Compute fitting curve using an interactive dialog"
msgstr "Calculer la courbe de régression avec une boîte de dialogue interactive"

#: cdl.core.gui.processor.signal.SignalProcessor.compute_fit:3 of
msgid "Title of the dialog"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_fit:4 of
msgid "Fitting dialog function"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_multigaussianfit:1 of
msgid "Compute multi-Gaussian fitting curve using an interactive dialog"
msgstr "Calculer la courbe de régression multi-gaussienne avec une boîte de dialogue interactive"

#: cdl.core.gui.processor.signal.SignalProcessor.compute_fwhm:1 of
msgid "Compute FWHM with :py:func:`cdl.computation.signal.compute_fwhm`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_fw1e2:1 of
msgid "Compute FW at 1/e² with :py:func:`cdl.computation.signal.compute_fw1e2`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_stats:1 of
msgid ""
"Compute data statistics with "
":py:func:`cdl.computation.signal.compute_stats`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_histogram:1 of
msgid "Compute histogram with :py:func:`cdl.computation.signal.compute_histogram`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_contrast:1 of
msgid "Compute contrast with :py:func:`cdl.computation.signal.compute_contrast`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_x_at_minmax:1 of
msgid ""
"Compute x at min/max with "
":py:func:`cdl.computation.signal.compute_x_at_minmax`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_x_at_y:1 of
msgid "Compute x at y with :py:func:`cdl.computation.signal.compute_x_at_y`."
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_sampling_rate_period:1
#: of
msgid ""
"Compute sampling rate and period (mean and std) with "
":py:func:`cdl.computation.signal.compute_sampling_rate_period`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_bandwidth_3db:1 of
msgid ""
"Compute bandwidth at -3dB with "
":py:func:`cdl.computation.signal.compute_bandwidth_3db`"
msgstr ""

#: cdl.core.gui.processor.signal.SignalProcessor.compute_dynamic_parameters:1
#: of
msgid ""
"Compute Dynamic Parameters (ENOB, SINAD, THD, SFDR, SNR) with "
":py:func:`cdl.computation.signal.compute_dynamic_parameters`"
msgstr ""

#: ../../doc/features/general/remote.rst:145
msgid "Image processor"
msgstr "Processeur d'image"

#: ../../doc/features/general/remote.rst:147
msgid ""
"When working with images, the methods of "
":class:`cdl.core.gui.processor.image.ImageProcessor` may be accessed."
msgstr ""
"Lorsque vous travaillez avec des images, les méthodes de "
":class:`cdl.core.gui.processor.image.ImageProcessor` peuvent être "
"accédées."

#: cdl.core.gui.processor.image.ImageProcessor:1 of
msgid "Object handling image processing: operations, processing, analysis"
msgstr "Objet de traitement d'image : opérations, traitement, analyse"

#: cdl.core.gui.processor.image.ImageProcessor.compute_normalize:1 of
msgid "Normalize data with :py:func:`cdl.computation.image.compute_normalize`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_sum:1 of
msgid "Compute sum with :py:func:`cdl.computation.image.compute_addition`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_addition_constant:1 of
msgid ""
"Compute sum with a constant using "
":py:func:`cdl.computation.image.compute_addition_constant`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_average:1 of
msgid ""
"Compute average with :py:func:`cdl.computation.image.compute_addition` "
"and dividing by the number of images"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_product:1 of
msgid "Compute product with :py:func:`cdl.computation.image.compute_product`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_product_constant:1 of
msgid ""
"Compute product with a constant using "
":py:func:`cdl.computation.image.compute_product_constant`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_logp1:1 of
msgid ""
"Compute base 10 logarithm using "
":py:func:`cdl.computation.image.compute_logp1`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_rotate:1 of
msgid ""
"Rotate data arbitrarily using "
":py:func:`cdl.computation.image.compute_rotate`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_rotate90:1 of
msgid "Rotate data 90° with :py:func:`cdl.computation.image.compute_rotate90`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_rotate270:1 of
msgid "Rotate data 270° with :py:func:`cdl.computation.image.compute_rotate270`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_fliph:1 of
msgid ""
"Flip data horizontally using "
":py:func:`cdl.computation.image.compute_fliph`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_flipv:1 of
msgid "Flip data vertically with :py:func:`cdl.computation.image.compute_flipv`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.distribute_on_grid:1 of
msgid "Distribute images on a grid"
msgstr "Distribuer les images sur une grille"

#: cdl.core.gui.processor.image.ImageProcessor.reset_positions:1 of
msgid "Reset image positions"
msgstr "Réinitialiser les positions des images"

#: cdl.core.gui.processor.image.ImageProcessor.compute_resize:1 of
msgid "Resize image with :py:func:`cdl.computation.image.compute_resize`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_binning:1 of
msgid "Binning image with :py:func:`cdl.computation.image.compute_binning`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_line_profile:1 of
msgid ""
"Compute profile along a vertical or horizontal line with "
":py:func:`cdl.computation.image.compute_line_profile`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_segment_profile:1 of
msgid ""
"Compute profile along a segment with "
":py:func:`cdl.computation.image.compute_segment_profile`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_average_profile:1 of
msgid ""
"Compute average profile with "
":py:func:`cdl.computation.image.compute_average_profile`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_radial_profile:1 of
msgid ""
"Compute radial profile with "
":py:func:`cdl.computation.image.compute_radial_profile`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_histogram:1 of
msgid "Compute histogram with :py:func:`cdl.computation.image.compute_histogram`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_swap_axes:1 of
msgid "Swap data axes with :py:func:`cdl.computation.image.compute_swap_axes`."
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_abs:1 of
msgid "Compute absolute value with :py:func:`cdl.computation.image.compute_abs`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_re:1 of
msgid "Compute real part with :py:func:`cdl.computation.image.compute_re`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_im:1 of
msgid "Compute imaginary part with :py:func:`cdl.computation.image.compute_im`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_astype:1 of
msgid "Convert data type with :py:func:`cdl.computation.image.compute_astype`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_log10:1 of
msgid "Compute Log10 with :py:func:`cdl.computation.image.compute_log10`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_exp:1 of
msgid "Compute Log10 with :py:func:`cdl.computation.image.compute_exp`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_arithmetic:1 of
msgid ""
"Compute arithmetic operation between two images with "
":py:func:`cdl.computation.image.compute_arithmetic`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_difference:1 of
msgid ""
"Compute difference between two images with "
":py:func:`cdl.computation.image.compute_difference`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_difference_constant:1 of
msgid ""
"Compute difference with a constant with "
":py:func:`cdl.computation.image.compute_difference_constant`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_quadratic_difference:1
#: of
msgid ""
"Compute quadratic difference between two images with "
":py:func:`cdl.computation.image.compute_quadratic_difference`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_division:1 of
msgid ""
"Compute division between two images with "
":py:func:`cdl.computation.image.compute_division`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_division_constant:1 of
msgid ""
"Compute division by a constant with "
":py:func:`cdl.computation.image.compute_division_constant`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_flatfield:1 of
msgid ""
"Compute flat field correction with "
":py:func:`cdl.computation.image.compute_flatfield`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_calibration:1 of
msgid ""
"Compute data linear calibration with "
":py:func:`cdl.computation.image.compute_calibration`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_clip:1 of
msgid ""
"Compute maximum data clipping with "
":py:func:`cdl.computation.image.compute_clip`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_offset_correction:1 of
msgid ""
"Compute offset correction with "
":py:func:`cdl.computation.image.compute_offset_correction`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_gaussian_filter:1 of
msgid ""
"Compute gaussian filter with "
":py:func:`cdl.computation.image.compute_gaussian_filter`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_moving_average:1 of
msgid ""
"Compute moving average with "
":py:func:`cdl.computation.image.compute_moving_average`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_moving_median:1 of
msgid ""
"Compute moving median with "
":py:func:`cdl.computation.image.compute_moving_median`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_wiener:1 of
msgid "Compute Wiener filter with :py:func:`cdl.computation.image.compute_wiener`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_fft:1 of
msgid "Compute FFT with :py:func:`cdl.computation.image.compute_fft`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_ifft:1 of
msgid "Compute iFFT with :py:func:`cdl.computation.image.compute_ifft`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_magnitude_spectrum:1 of
msgid ""
"Compute magnitude spectrum with "
":py:func:`cdl.computation.image.compute_magnitude_spectrum`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_phase_spectrum:1 of
msgid ""
"Compute phase spectrum with "
":py:func:`cdl.computation.image.compute_phase_spectrum`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_psd:1 of
msgid ""
"Compute Power Spectral Density (PSD) with "
":py:func:`cdl.computation.image.compute_psd`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_butterworth:1 of
msgid ""
"Compute Butterworth filter with "
":py:func:`cdl.computation.image.compute_butterworth`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_threshold:1 of
msgid ""
"Compute parametric threshold with "
":py:func:`cdl.computation.image.threshold.compute_threshold`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_threshold_isodata:1 of
msgid ""
"Compute threshold using Isodata algorithm with "
":py:func:`cdl.computation.image.threshold.compute_threshold_isodata`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_threshold_li:1 of
msgid ""
"Compute threshold using Li algorithm with "
":py:func:`cdl.computation.image.threshold.compute_threshold_li`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_threshold_mean:1 of
msgid ""
"Compute threshold using Mean algorithm with "
":py:func:`cdl.computation.image.threshold.compute_threshold_mean`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_threshold_minimum:1 of
msgid ""
"Compute threshold using Minimum algorithm with "
":py:func:`cdl.computation.image.threshold.compute_threshold_minimum`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_threshold_otsu:1 of
msgid ""
"Compute threshold using Otsu algorithm with "
":py:func:`cdl.computation.image.threshold.compute_threshold_otsu`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_threshold_triangle:1 of
msgid ""
"Compute threshold using Triangle algorithm with "
":py:func:`cdl.computation.image.threshold.compute_threshold_triangle`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_threshold_yen:1 of
msgid ""
"Compute threshold using Yen algorithm with "
":py:func:`cdl.computation.image.threshold.compute_threshold_yen`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_threshold:1 of
msgid "Compute all threshold algorithms using the following functions:"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_threshold:4 of
msgid ":py:func:`cdl.computation.image.threshold.compute_threshold_isodata`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_threshold:5 of
msgid ":py:func:`cdl.computation.image.threshold.compute_threshold_li`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_threshold:6 of
msgid ":py:func:`cdl.computation.image.threshold.compute_threshold_mean`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_threshold:7 of
msgid ":py:func:`cdl.computation.image.threshold.compute_threshold_minimum`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_threshold:8 of
msgid ":py:func:`cdl.computation.image.threshold.compute_threshold_otsu`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_threshold:9 of
msgid ":py:func:`cdl.computation.image.threshold.compute_threshold_triangle`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_threshold:10 of
msgid ":py:func:`cdl.computation.image.threshold.compute_threshold_yen`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_adjust_gamma:1 of
msgid ""
"Compute gamma correction with "
":py:func:`cdl.computation.image.exposure.compute_adjust_gamma`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_adjust_log:1 of
msgid ""
"Compute log correction with "
":py:func:`cdl.computation.image.exposure.compute_adjust_log`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_adjust_sigmoid:1 of
msgid ""
"Compute sigmoid correction with "
":py:func:`cdl.computation.image.exposure.compute_adjust_sigmoid`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_rescale_intensity:1 of
msgid ""
"Rescale image intensity levels with "
":py:func`cdl.computation.image.exposure.compute_rescale_intensity`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_equalize_hist:1 of
msgid ""
"Histogram equalization with "
":py:func:`cdl.computation.image.exposure.compute_equalize_hist`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_equalize_adapthist:1 of
msgid ""
"Adaptive histogram equalization with "
":py:func:`cdl.computation.image.exposure.compute_equalize_adapthist`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_denoise_tv:1 of
msgid ""
"Compute Total Variation denoising with "
":py:func:`cdl.computation.image.restoration.compute_denoise_tv`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_denoise_bilateral:1 of
msgid ""
"Compute bilateral filter denoising with "
":py:func:`cdl.computation.image.restoration.compute_denoise_bilateral`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_denoise_wavelet:1 of
msgid ""
"Compute Wavelet denoising with "
":py:func:`cdl.computation.image.restoration.compute_denoise_wavelet`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_denoise_tophat:1 of
msgid ""
"Denoise using White Top-Hat with "
":py:func:`cdl.computation.image.restoration.compute_denoise_tophat`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_denoise:1 of
msgid "Compute all denoising filters using the following functions:"
msgstr "Calculer tous les filtres de débruitage en utilisant les fonctions suivantes :"

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_denoise:4 of
msgid ":py:func:`cdl.computation.image.restoration.compute_denoise_tv`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_denoise:5 of
msgid ":py:func:`cdl.computation.image.restoration.compute_denoise_bilateral`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_denoise:6 of
msgid ":py:func:`cdl.computation.image.restoration.compute_denoise_wavelet`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_denoise:7 of
msgid ":py:func:`cdl.computation.image.restoration.compute_denoise_tophat`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_white_tophat:1 of
msgid ""
"Compute White Top-Hat with "
":py:func:`cdl.computation.image.morphology.compute_white_tophat`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_black_tophat:1 of
msgid ""
"Compute Black Top-Hat with "
":py:func:`cdl.computation.image.morphology.compute_black_tophat`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_erosion:1 of
msgid ""
"Compute Erosion with "
":py:func:`cdl.computation.image.morphology.compute_erosion`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_dilation:1 of
msgid ""
"Compute Dilation with "
":py:func:`cdl.computation.image.morphology.compute_dilation`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_opening:1 of
msgid ""
"Compute morphological opening with "
":py:func:`cdl.computation.image.morphology.compute_opening`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_closing:1 of
msgid ""
"Compute morphological closing with "
":py:func:`cdl.computation.image.morphology.compute_closing`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_morphology:1 of
msgid "Compute all morphology filters using the following functions:"
msgstr "Calculer tous les filtres de morphologie en utilisant les fonctions suivantes :"

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_morphology:4 of
msgid ":py:func:`cdl.computation.image.morphology.compute_white_tophat`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_morphology:5 of
msgid ":py:func:`cdl.computation.image.morphology.compute_black_tophat`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_morphology:6 of
msgid ":py:func:`cdl.computation.image.morphology.compute_erosion`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_morphology:7 of
msgid ":py:func:`cdl.computation.image.morphology.compute_dilation`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_morphology:8 of
msgid ":py:func:`cdl.computation.image.morphology.compute_opening`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_morphology:9 of
msgid ":py:func:`cdl.computation.image.morphology.compute_closing`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_canny:1 of
msgid ""
"Compute Canny filter with "
":py:func:`cdl.computation.image.edges.compute_canny`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_roberts:1 of
msgid ""
"Compute Roberts filter with "
":py:func:`cdl.computation.image.edges.compute_roberts`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_prewitt:1 of
msgid ""
"Compute Prewitt filter with "
":py:func:`cdl.computation.image.edges.compute_prewitt`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_prewitt_h:1 of
msgid ""
"Compute Prewitt filter (horizontal) with "
":py:func:`cdl.computation.image.edges.compute_prewitt_h`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_prewitt_v:1 of
msgid ""
"Compute Prewitt filter (vertical) with "
":py:func:`cdl.computation.image.edges.compute_prewitt_v`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_sobel:1 of
msgid ""
"Compute Sobel filter with "
":py:func:`cdl.computation.image.edges.compute_sobel`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_sobel_h:1 of
msgid ""
"Compute Sobel filter (horizontal) with "
":py:func:`cdl.computation.image.edges.compute_sobel_h`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_sobel_v:1 of
msgid ""
"Compute Sobel filter (vertical) with "
":py:func:`cdl.computation.image.edges.compute_sobel_v`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_scharr:1 of
msgid ""
"Compute Scharr filter with "
":py:func:`cdl.computation.image.edges.compute_scharr`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_scharr_h:1 of
msgid ""
"Compute Scharr filter (horizontal) with "
":py:func:`cdl.computation.image.edges.compute_scharr_h`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_scharr_v:1 of
msgid ""
"Compute Scharr filter (vertical) with "
":py:func:`cdl.computation.image.edges.compute_scharr_v`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_farid:1 of
msgid ""
"Compute Farid filter with "
":py:func:`cdl.computation.image.edges.compute_farid`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_farid_h:1 of
msgid ""
"Compute Farid filter (horizontal) with "
":py:func:`cdl.computation.image.edges.compute_farid_h`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_farid_v:1 of
msgid ""
"Compute Farid filter (vertical) with "
":py:func:`cdl.computation.image.edges.compute_farid_v`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_laplace:1 of
msgid ""
"Compute Laplace filter with "
":py:func:`cdl.computation.image.edges.compute_laplace`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_edges:1 of
msgid "Compute all edges filters using the following functions:"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_edges:4 of
msgid ":py:func:`cdl.computation.image.edges.compute_roberts`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_edges:5 of
msgid ":py:func:`cdl.computation.image.edges.compute_prewitt`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_edges:6 of
msgid ":py:func:`cdl.computation.image.edges.compute_prewitt_h`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_edges:7 of
msgid ":py:func:`cdl.computation.image.edges.compute_prewitt_v`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_edges:8 of
msgid ":py:func:`cdl.computation.image.edges.compute_sobel`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_edges:9 of
msgid ":py:func:`cdl.computation.image.edges.compute_sobel_h`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_edges:10 of
msgid ":py:func:`cdl.computation.image.edges.compute_sobel_v`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_edges:11 of
msgid ":py:func:`cdl.computation.image.edges.compute_scharr`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_edges:12 of
msgid ":py:func:`cdl.computation.image.edges.compute_scharr_h`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_edges:13 of
msgid ":py:func:`cdl.computation.image.edges.compute_scharr_v`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_edges:14 of
msgid ":py:func:`cdl.computation.image.edges.compute_farid`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_edges:15 of
msgid ":py:func:`cdl.computation.image.edges.compute_farid_h`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_edges:16 of
msgid ":py:func:`cdl.computation.image.edges.compute_farid_v`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_all_edges:17 of
msgid ":py:func:`cdl.computation.image.edges.compute_laplace`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_stats:1 of
msgid ""
"Compute data statistics with "
":py:func:`cdl.computation.image.compute_stats`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_centroid:1 of
msgid ""
"Compute image centroid with "
":py:func:`cdl.computation.image.compute_centroid`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_enclosing_circle:1 of
msgid ""
"Compute minimum enclosing circle with "
":py:func:`cdl.computation.image.compute_enclosing_circle`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_peak_detection:1 of
msgid ""
"Compute 2D peak detection with "
":py:func:`cdl.computation.image.compute_peak_detection`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_contour_shape:1 of
msgid ""
"Compute contour shape fit with "
":py:func:`cdl.computation.image.detection.compute_contour_shape`"
msgstr ""

#: cdl.core.gui.processor.image.ImageProcessor.compute_hough_circle_peaks:1 of
msgid ""
"Compute peak detection based on a circle Hough transform with "
":py:func:`cdl.computation.image.compute_hough_circle_peaks`"
msgstr ""
"Calculer la détection de pics basée sur une transformée de Hough "
"circulaire"

#: cdl.core.gui.processor.image.ImageProcessor.compute_blob_dog:1 of
#, fuzzy
msgid ""
"Compute blob detection using Difference of Gaussian method with "
":py:func:`cdl.computation.image.detection.compute_blob_dog`"
msgstr ""
"Calculer la détection de taches en utilisant la méthode de différence de "
"Gaussienne"

#: cdl.core.gui.processor.image.ImageProcessor.compute_blob_doh:1 of
#, fuzzy
msgid ""
"Compute blob detection using Determinant of Hessian method with "
":py:func:`cdl.computation.image.detection.compute_blob_doh`"
msgstr ""
"Calculer la détection de taches en utilisant la méthode du déterminant de"
" Hessian"

#: cdl.core.gui.processor.image.ImageProcessor.compute_blob_log:1 of
#, fuzzy
msgid ""
"Compute blob detection using Laplacian of Gaussian method with "
":py:func:`cdl.computation.image.detection.compute_blob_log`"
msgstr ""
"Calculer la détection de taches en utilisant la méthode du Laplacien de "
"Gaussienne"

#: cdl.core.gui.processor.image.ImageProcessor.compute_blob_opencv:1 of
msgid ""
"Compute blob detection using OpenCV with "
":py:func:`cdl.computation.image.detection.compute_blob_opencv`"
msgstr ""
