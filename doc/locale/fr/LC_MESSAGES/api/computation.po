# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, DataLab Platform Developers
# This file is distributed under the same license as the DataLab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: DataLab \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-31 15:00+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: fr\n"
"Language-Team: fr <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

msgid "Computation (:mod:`cdl.computation`)"
msgstr ""

msgid "This package contains the computation functions used by the DataLab project. Those functions operate directly on DataLab objects (i.e. :class:`cdl.obj.SignalObj` and :class:`cdl.obj.ImageObj`) and are designed to be used in the DataLab pipeline, but can be used independently as well."
msgstr ""

msgid "The :mod:`cdl.computation` package is the main entry point for the DataLab computation functions when manipulating DataLab objects. See the :mod:`cdl.algorithms` package for algorithms that operate directly on NumPy arrays."
msgstr ""

msgid "Each computation module defines a set of computation objects, that is, functions that implement processing features and classes that implement the corresponding parameters (in the form of :py:class:`guidata.dataset.datatypes.Dataset` subclasses). The computation functions takes a DataLab object (e.g. :class:`cdl.obj.SignalObj`) and a parameter object (e.g. :py:class:`cdl.param.MovingAverageParam`) as input and return a DataLab object as output (the result of the computation). The parameter object is used to configure the computation function (e.g. the size of the moving average window)."
msgstr ""

msgid "In DataLab overall architecture, the purpose of this package is to provide the computation functions that are used by the :mod:`cdl.core.gui.processor` module, based on the algorithms defined in the :mod:`cdl.algorithms` module and on the data model defined in the :mod:`cdl.obj` (or :mod:`cdl.core.model`) module."
msgstr ""

msgid "The computation modules are organized in subpackages according to their purpose. The following subpackages are available:"
msgstr ""

msgid ":mod:`cdl.computation.base`: Common processing features"
msgstr ""

msgid ":mod:`cdl.computation.signal`: Signal processing features"
msgstr ""

msgid ":mod:`cdl.computation.image`: Image processing features"
msgstr ""

msgid "Common processing features"
msgstr ""

msgid "Arithmetic parameters"
msgstr ""

msgid "Single choice from: '+', '-', '×', '/'. Default: '+'."
msgstr ""

msgid "type"
msgstr ""

msgid "guidata.dataset.dataitems.ChoiceItem"
msgstr ""

msgid "Default: 1.0."
msgstr ""

msgid "guidata.dataset.dataitems.FloatItem"
msgstr ""

msgid "Default: 0.0."
msgstr ""

msgid "Default: ''."
msgstr ""

msgid "guidata.dataset.dataitems.StringItem"
msgstr ""

msgid "Result\\.  Default: True."
msgstr ""

msgid "guidata.dataset.dataitems.BoolItem"
msgstr ""

msgid "Returns a new instance of :py:class:`ArithmeticParam` with the fields set to the given values."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "Returns"
msgstr ""

msgid "New instance of :py:class:`ArithmeticParam`."
msgstr ""

msgid "Return the operation string"
msgstr ""

msgid "Update the operation item"
msgstr ""

msgid "Gaussian filter parameters"
msgstr ""

msgid "σ\\.  Default: 1.0."
msgstr ""

msgid "Returns a new instance of :py:class:`GaussianParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`GaussianParam`."
msgstr ""

msgid "Moving average parameters"
msgstr ""

msgid "Size of the moving window\\.  Integer higher than 1\\. Default: 3."
msgstr ""

msgid "guidata.dataset.dataitems.IntItem"
msgstr ""

msgid "Mode of the filter: - 'reflect': reflect the data at the boundary - 'constant': pad with a constant value - 'nearest': pad with the nearest value - 'mirror': reflect the data at the boundary with the data itself - 'wrap': circular boundary\\. Single choice from: 'reflect', 'constant', 'nearest', 'mirror', 'wrap'. Default: 'reflect'."
msgstr ""

msgid "Returns a new instance of :py:class:`MovingAverageParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`MovingAverageParam`."
msgstr ""

msgid "Moving median parameters"
msgstr ""

msgid "Size of the moving window\\.  Integer higher than 1, odd\\. Default: 3."
msgstr ""

msgid "Mode of the filter: - 'reflect': reflect the data at the boundary - 'constant': pad with a constant value - 'nearest': pad with the nearest value - 'mirror': reflect the data at the boundary with the data itself - 'wrap': circular boundary\\. Single choice from: 'reflect', 'constant', 'nearest', 'mirror', 'wrap'. Default: 'nearest'."
msgstr ""

msgid "Returns a new instance of :py:class:`MovingMedianParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`MovingMedianParam`."
msgstr ""

msgid "Data clipping parameters"
msgstr ""

msgid "Lower clipping value\\.  Default: None."
msgstr ""

msgid "Upper clipping value\\.  Default: None."
msgstr ""

msgid "Returns a new instance of :py:class:`ClipParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`ClipParam`."
msgstr ""

msgid "Normalize parameters"
msgstr ""

msgid "Normalize with respect to\\.  Single choice from: 'maximum', 'amplitude', 'area', 'energy', 'rms'. Default: 'maximum'."
msgstr ""

msgid "Returns a new instance of :py:class:`NormalizeParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`NormalizeParam`."
msgstr ""

msgid "Histogram parameters"
msgstr ""

msgid "Number of bins\\.  Integer higher than 1\\. Default: 256."
msgstr ""

msgid "Lower limit\\.  Default: None."
msgstr ""

msgid "Upper limit\\.  Default: None."
msgstr ""

msgid "Returns a new instance of :py:class:`HistogramParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`HistogramParam`."
msgstr ""

msgid "Return suffix for the histogram computation"
msgstr ""

msgid "data array"
msgstr ""

msgid "FFT parameters"
msgstr ""

msgid "Shift zero frequency to center\\. Default: None."
msgstr ""

msgid "Returns a new instance of :py:class:`FFTParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`FFTParam`."
msgstr ""

msgid "Spectrum parameters"
msgstr ""

msgid "Default: False."
msgstr ""

msgid "Returns a new instance of :py:class:`SpectrumParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`SpectrumParam`."
msgstr ""

msgid "Parameter used to set a constant value to used in operations"
msgstr ""

msgid "Constant value\\.  Default: None."
msgstr ""

msgid "Returns a new instance of :py:class:`ConstantParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`ConstantParam`."
msgstr ""

msgid "Create a result object, as returned by the callback function of the :func:`cdl.core.gui.processor.base.BaseProcessor.compute_11` method"
msgstr ""

msgid "source signal or image object"
msgstr ""

#, python-brace-format
msgid "name of the function. If provided, the title of the result object will be `{name}({src.short_id})|{suffix})`, unless the name is a single character, in which case the title will be `{src.short_id}{name}{suffix}` where `name` is an operator and `suffix` is the other term of the operation."
msgstr ""

msgid "suffix to add to the title. Optional."
msgstr ""

msgid "Result signal or image object"
msgstr ""

msgid "Create a result  object, as returned by the callback function of the :func:`cdl.core.gui.processor.base.BaseProcessor.compute_n1n` method"
msgstr ""

msgid "input signal or image object"
msgstr ""

msgid "name of the processing function"
msgstr ""

msgid "Output signal or image object"
msgstr ""

msgid "Create new signal object as a result of a compute_11 function"
msgstr ""

msgid "As opposed to the `dst_11` functions, this function creates a new signal object without copying the original object metadata, except for the \"source\" entry."
msgstr ""

msgid "suffix to add to the title"
msgstr ""

msgid "units of the output signal"
msgstr ""

msgid "labels of the output signal"
msgstr ""

msgid "Output signal object"
msgstr ""

msgid "Calculate result properties by executing a computation function on a signal/image object."
msgstr ""

msgid "title of the result properties"
msgstr ""

msgid "signal or image object"
msgstr ""

msgid "dictionary of labeled computation functions. The keys are the labels of the computation functions and the values are the functions themselves (each function must take a single argument - which is the data of the ROI or the whole signal/image - and return a float)"
msgstr ""

msgid "Result properties object"
msgstr ""

msgid "Signal processing features"
msgstr ""

msgid "Restore data outside the Region Of Interest (ROI) of the input signal after a computation, only if the input signal has a ROI, and if the output signal has the same ROI as the input signal, and if the data types are the same, and if the shapes are the same. Otherwise, do nothing."
msgstr ""

msgid "destination signal object"
msgstr ""

msgid "source signal object"
msgstr ""

msgid "Wrap a 1 array → 1 array function (the simple case of y1 = f(y0)) to produce a 1 signal → 1 signal function, which can be used inside DataLab's infrastructure to perform computations with :class:`cdl.core.gui.processor.signal.SignalProcessor`."
msgstr ""

msgid "This wrapping mechanism using a class is necessary for the resulted function to be pickable by the ``multiprocessing`` module."
msgstr ""

msgid "The instance of this wrapper is callable and returns a :class:`cdl.obj.SignalObj` object."
msgstr ""

msgid "Example"
msgstr ""

msgid "1 array → 1 array function"
msgstr ""

msgid "Additional positional arguments to pass to the function"
msgstr ""

msgid "Additional keyword arguments to pass to the function"
msgstr ""

msgid "Add **dst** and **src** signals and return **dst** signal modified in place"
msgstr ""

msgid "destination signal"
msgstr ""

msgid "source signal"
msgstr ""

msgid "Modified **dst** signal (modified in place)"
msgstr ""

msgid "Multiply **dst** and **src** signals and return **dst** signal modified in place"
msgstr ""

msgid "Add **dst** and a constant value and return a the new result signal object"
msgstr ""

msgid "input signal object"
msgstr ""

msgid "constant value"
msgstr ""

msgid "Result signal object **src** + **p.value** (new object)"
msgstr ""

msgid "Subtract a constant value from a signal"
msgstr ""

msgid "Result signal object **src** - **p.value** (new object)"
msgstr ""

msgid "Multiply **dst** by a constant value and return the new result signal object"
msgstr ""

msgid "Result signal object **src** * **p.value** (new object)"
msgstr ""

msgid "Divide a signal by a constant value"
msgstr ""

msgid "Result signal object **src** / **p.value** (new object)"
msgstr ""

msgid "Perform arithmetic operation on two signals"
msgstr ""

msgid "source signal 1"
msgstr ""

msgid "source signal 2"
msgstr ""

msgid "parameters"
msgstr ""

msgid "Result signal object"
msgstr ""

msgid "Compute difference between two signals"
msgstr ""

msgid "If uncertainty is available, it is propagated."
msgstr ""

msgid "Result signal object **src1** - **src2**"
msgstr ""

msgid "Compute quadratic difference between two signals"
msgstr ""

msgid "Result signal object (**src1** - **src2**) / sqrt(2.0)"
msgstr ""

msgid "Compute division between two signals"
msgstr ""

msgid "Result signal object **src1** / **src2**"
msgstr ""

msgid "Extract multiple regions of interest from data"
msgstr ""

msgid "group of parameters"
msgstr ""

msgid "Signal with multiple regions of interest"
msgstr ""

msgid "Extract single region of interest from data"
msgstr ""

msgid "ROI parameters"
msgstr ""

msgid "Signal with single region of interest"
msgstr ""

msgid "Swap axes"
msgstr ""

msgid "Compute inverse with :py:data:`numpy.invert`"
msgstr ""

msgid "Compute absolute value with :py:data:`numpy.absolute`"
msgstr ""

msgid "Compute real part with :py:func:`numpy.real`"
msgstr ""

msgid "Compute imaginary part with :py:func:`numpy.imag`"
msgstr ""

msgid "Convert signal data type parameters"
msgstr ""

msgid "Destination data type\\. Output image data type. Single choice from: 'float32', 'float64', 'complex128'. Default: 'float32'."
msgstr ""

msgid "Returns a new instance of :py:class:`DataTypeSParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`DataTypeSParam`."
msgstr ""

msgid "Convert data type with :py:func:`numpy.astype`"
msgstr ""

msgid "Compute Log10 with :py:data:`numpy.log10`"
msgstr ""

msgid "Compute exponential with :py:data:`numpy.exp`"
msgstr ""

msgid "Compute square root with :py:data:`numpy.sqrt`"
msgstr ""

msgid "Power parameters"
msgstr ""

msgid "Default: 2.0."
msgstr ""

msgid "Returns a new instance of :py:class:`PowerParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`PowerParam`."
msgstr ""

msgid "Compute power with :py:data:`numpy.power`"
msgstr ""

msgid "Peak detection parameters"
msgstr ""

msgid "Integer between 0 and 100, unit: %\\. Default: 30."
msgstr ""

msgid "Minimum distance\\.  Integer higher than 1, unit: points\\. Default: 1."
msgstr ""

msgid "Returns a new instance of :py:class:`PeakDetectionParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`PeakDetectionParam`."
msgstr ""

msgid "Peak detection with :py:func:`cdl.algorithms.signal.peak_indices`"
msgstr ""

msgid "Normalize data with :py:func:`cdl.algorithms.signal.normalize`"
msgstr ""

msgid "Compute derivative with :py:func:`numpy.gradient`"
msgstr ""

msgid "Compute integral with :py:func:`scipy.integrate.cumulative_trapezoid`"
msgstr ""

msgid "Signal calibration parameters"
msgstr ""

msgid "Calibrate\\.  Single choice from: 'x', 'y'. Default: 'y'."
msgstr ""

msgid "Returns a new instance of :py:class:`XYCalibrateParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`XYCalibrateParam`."
msgstr ""

msgid "Compute linear calibration"
msgstr ""

msgid "Compute maximum data clipping with :py:func:`numpy.clip`"
msgstr ""

msgid "Correct offset: subtract the mean value of the signal in the specified range (baseline correction)"
msgstr ""

msgid "Compute gaussian filter with :py:func:`scipy.ndimage.gaussian_filter`"
msgstr ""

msgid "Compute moving average with :py:func:`scipy.ndimage.uniform_filter`"
msgstr ""

msgid "Compute moving median with :py:func:`scipy.ndimage.median_filter`"
msgstr ""

msgid "Compute Wiener filter with :py:func:`scipy.signal.wiener`"
msgstr ""

msgid "Filter types"
msgstr ""

msgid "Base class for high-pass, low-pass, band-pass and band-stop filters"
msgstr ""

msgid "Filter method\\.  Single choice from: 'bessel', 'butter', 'cheby1', 'cheby2', 'ellip'. Default: 'bessel'."
msgstr ""

msgid "Filter order\\.  Integer higher than 1\\. Default: 3."
msgstr ""

msgid "Low cutoff frequency\\.  Float higher than 0, non zero, unit: hz\\. Default: None."
msgstr ""

msgid "High cutoff frequency\\.  Float higher than 0, non zero, unit: hz\\. Default: None."
msgstr ""

msgid "Passband ripple\\.  Float higher than 0, non zero, unit: db\\. Default: 1."
msgstr ""

msgid "Stopband attenuation\\.  Float higher than 0, non zero, unit: db\\. Default: 1."
msgstr ""

msgid "Returns a new instance of :py:class:`BaseHighLowBandParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`BaseHighLowBandParam`."
msgstr ""

msgid "Return the Nyquist frequency of a signal object"
msgstr ""

msgid "signal object"
msgstr ""

msgid "Update the filter parameters from a signal object"
msgstr ""

msgid "Return the filter parameters (a and b) as a tuple. These parameters are used in the scipy.signal filter functions (eg. `scipy.signal.filtfilt`)."
msgstr ""

msgid "filter parameters"
msgstr ""

msgid "Return type"
msgstr ""

msgid "Low-pass filter parameters"
msgstr ""

msgid "Returns a new instance of :py:class:`LowPassFilterParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`LowPassFilterParam`."
msgstr ""

msgid "High-pass filter parameters"
msgstr ""

msgid "Returns a new instance of :py:class:`HighPassFilterParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`HighPassFilterParam`."
msgstr ""

msgid "Band-pass filter parameters"
msgstr ""

msgid "Returns a new instance of :py:class:`BandPassFilterParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`BandPassFilterParam`."
msgstr ""

msgid "Band-stop filter parameters"
msgstr ""

msgid "Returns a new instance of :py:class:`BandStopFilterParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`BandStopFilterParam`."
msgstr ""

msgid "Compute frequency filter (low-pass, high-pass, band-pass, band-stop), with :py:func:`scipy.signal.filtfilt`"
msgstr ""

msgid "Compute FFT with :py:func:`cdl.algorithms.signal.fft1d`"
msgstr ""

msgid "Compute iFFT with :py:func:`cdl.algorithms.signal.ifft1d`"
msgstr ""

msgid "Compute magnitude spectrum with :py:func:`cdl.algorithms.signal.magnitude_spectrum`"
msgstr ""

msgid "Compute phase spectrum with :py:func:`cdl.algorithms.signal.phase_spectrum`"
msgstr ""

msgid "Compute power spectral density with :py:func:`cdl.algorithms.signal.psd`"
msgstr ""

msgid "Polynomial fitting parameters"
msgstr ""

msgid "Integer between 1 and 10\\. Default: 3."
msgstr ""

msgid "Returns a new instance of :py:class:`PolynomialFitParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`PolynomialFitParam`."
msgstr ""

msgid "Compute histogram with :py:func:`numpy.histogram`"
msgstr ""

msgid "Interpolation parameters"
msgstr ""

msgid "Interpolation method\\.  Single choice from: 'linear', 'spline', 'quadratic', 'cubic', 'barycentric', 'pchip'. Default: 'linear'."
msgstr ""

msgid "Value to use for points outside the interpolation domain (used only with linear, cubic and pchip methods). Default: None."
msgstr ""

msgid "Returns a new instance of :py:class:`InterpolationParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`InterpolationParam`."
msgstr ""

msgid "Interpolate data with :py:func:`cdl.algorithms.signal.interpolate`"
msgstr ""

msgid "Resample parameters"
msgstr ""

msgid "X\\ :subscript:`min`\\.  Default: None."
msgstr ""

msgid "X\\ :subscript:`max`\\.  Default: None."
msgstr ""

msgid "Single choice from: 'dx', 'nbpts'. Default: 'nbpts'."
msgstr ""

msgid "ΔX\\.  Default: None."
msgstr ""

msgid "Number of points\\.  Default: None."
msgstr ""

msgid "Returns a new instance of :py:class:`ResamplingParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`ResamplingParam`."
msgstr ""

msgid "Resample data with :py:func:`cdl.algorithms.signal.interpolate`"
msgstr ""

msgid "Detrending parameters"
msgstr ""

msgid "Detrending method\\.  Single choice from: 'linear', 'constant'. Default: 'linear'."
msgstr ""

msgid "Returns a new instance of :py:class:`DetrendingParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`DetrendingParam`."
msgstr ""

msgid "Detrend data with :py:func:`scipy.signal.detrend`"
msgstr ""

msgid "Compute convolution of two signals with :py:func:`scipy.signal.convolve`"
msgstr ""

msgid "Windowing parameters"
msgstr ""

msgid "Single choice from: 'barthann', 'bartlett', 'blackman', 'blackman-harris', 'bohman', 'boxcar', 'cosine', 'exponential', 'flat-top', 'gaussian', 'hamming', 'hanning', 'kaiser', 'lanczos', 'nuttall', 'parzen', 'rectangular', 'taylor', 'tukey'. Default: 'hamming'."
msgstr ""

msgid "Shape parameter of the tukey windowing function\\. Default: 0.5."
msgstr ""

msgid "Shape parameter of the kaiser windowing function\\. Default: 14.0."
msgstr ""

msgid "Shape parameter of the gaussian windowing function\\. Default: 0.5."
msgstr ""

msgid "Returns a new instance of :py:class:`WindowingParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`WindowingParam`."
msgstr ""

msgid "Compute windowing (available methods: hamming, hanning, bartlett, blackman, tukey, rectangular) with :py:func:`cdl.algorithms.signal.windowing`"
msgstr ""

msgid "Reverse x-axis"
msgstr ""

msgid "Choice of angle unit."
msgstr ""

msgid "Angle unit\\.  Single choice from: 'rad', 'deg'. Default: 'rad'."
msgstr ""

msgid "Returns a new instance of :py:class:`AngleUnitParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`AngleUnitParam`."
msgstr ""

msgid "Convert cartesian coordinates to polar coordinates with :py:func:`cdl.algorithms.coordinates.cartesian2polar`."
msgstr ""

msgid "Source signal."
msgstr ""

msgid "Parameters."
msgstr ""

msgid "Result signal object."
msgstr ""

msgid "Convert polar coordinates to cartesian coordinates with :py:func:`cdl.algorithms.coordinates.polar2cartesian`."
msgstr ""

msgid "This function assumes that the x-axis represents the radius and the y-axis represents the angle. Negative values are not allowed for the radius, and will be clipped to 0 (a warning will be raised)."
msgstr ""

msgid "Allan variance parameters"
msgstr ""

msgid "Max τ\\.  Integer higher than 1, unit: pts\\. Default: 100."
msgstr ""

msgid "Returns a new instance of :py:class:`AllanVarianceParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`AllanVarianceParam`."
msgstr ""

msgid "Compute Allan variance with :py:func:`cdl.algorithms.signal.allan_variance`"
msgstr ""

msgid "Compute Allan deviation with :py:func:`cdl.algorithms.signal.allan_deviation`"
msgstr ""

msgid "Compute Overlapping Allan variance."
msgstr ""

msgid "Compute Modified Allan variance."
msgstr ""

msgid "Compute Hadamard variance."
msgstr ""

msgid "Compute Total variance."
msgstr ""

msgid "Compute Time Deviation (TDEV)."
msgstr ""

msgid "Calculate result shape by executing a computation function on a signal object, taking into account the signal ROIs."
msgstr ""

msgid "result title"
msgstr ""

msgid "result shape kind"
msgstr ""

msgid "input image object"
msgstr ""

msgid "computation function"
msgstr ""

msgid "computation function arguments"
msgstr ""

msgid "if True, add a label item (and the geometrical shape) to plot (default to False)"
msgstr ""

msgid "Result shape object or None if no result is found"
msgstr ""

msgid "The computation function must take either a single argument (the data) or multiple arguments (the data followed by the computation parameters)."
msgstr ""

msgid "Moreover, the computation function must return a 1D NumPy array (or a list, or a tuple) containing the result of the computation."
msgstr ""

msgid "FWHM parameters"
msgstr ""

msgid "Single choice from: 'zero-crossing', 'gauss', 'lorentz', 'voigt'. Default: 'zero-crossing'."
msgstr ""

msgid "X\\ :subscript:`MIN`\\. Lower x boundary (empty for no limit, i.e. Start of the signal)\\. Default: None."
msgstr ""

msgid "X\\ :subscript:`MAX`\\. Upper x boundary (empty for no limit, i.e. End of the signal)\\. Default: None."
msgstr ""

msgid "Returns a new instance of :py:class:`FWHMParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`FWHMParam`."
msgstr ""

msgid "Compute FWHM with :py:func:`cdl.algorithms.signal.fwhm`"
msgstr ""

msgid "Segment coordinates"
msgstr ""

msgid "Compute FW at 1/e² with :py:func:`cdl.algorithms.signal.fw1e2`"
msgstr ""

msgid "Parameter dataset for abscissa finding"
msgstr ""

msgid "Ordinate\\.  Default: 0."
msgstr ""

msgid "Returns a new instance of :py:class:`FindAbscissaParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`FindAbscissaParam`."
msgstr ""

msgid "Compute the smallest x-value at a given y-value for a signal object."
msgstr ""

msgid "The signal object containing x and y data."
msgstr ""

msgid "The parameter dataset for finding the abscissa."
msgstr ""

msgid "An object containing the x-value."
msgstr ""

msgid "Compute statistics on a signal"
msgstr ""

msgid "Compute bandwidth at -3 dB with :py:func:`cdl.algorithms.signal.bandwidth`"
msgstr ""

msgid "Result properties with bandwidth"
msgstr ""

msgid "Parameters for dynamic range computation (ENOB, SNR, SINAD, THD, SFDR)"
msgstr ""

msgid "Float higher than 0.0, unit: v\\. Default: 0.16."
msgstr ""

msgid "Unit for sinad\\. Single choice from: 'dBc', 'dBFS'. Default: 'dBc'."
msgstr ""

msgid "Number of harmonics\\. Number of harmonics to consider for thd\\. Integer higher than 1\\. Default: 5."
msgstr ""

msgid "Returns a new instance of :py:class:`DynamicParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`DynamicParam`."
msgstr ""

msgid "Compute Dynamic parameters using the following functions:"
msgstr ""

msgid "Freq: :py:func:`cdl.algorithms.signal.sinus_frequency`"
msgstr ""

msgid "ENOB: :py:func:`cdl.algorithms.signal.enob`"
msgstr ""

msgid "SNR: :py:func:`cdl.algorithms.signal.snr`"
msgstr ""

msgid "SINAD: :py:func:`cdl.algorithms.signal.sinad`"
msgstr ""

msgid "THD: :py:func:`cdl.algorithms.signal.thd`"
msgstr ""

msgid "SFDR: :py:func:`cdl.algorithms.signal.sfdr`"
msgstr ""

msgid "Result properties with ENOB, SNR, SINAD, THD, SFDR"
msgstr ""

msgid "Compute sampling rate and period using the following functions:"
msgstr ""

msgid "fs: :py:func:`cdl.algorithms.signal.sampling_rate`"
msgstr ""

msgid "T: :py:func:`cdl.algorithms.signal.sampling_period`"
msgstr ""

msgid "Result properties with sampling rate and period"
msgstr ""

msgid "Compute contrast with :py:func:`cdl.algorithms.signal.contrast`"
msgstr ""

msgid "Compute the smallest argument at the minima and the smallest argument at the maxima."
msgstr ""

msgid "The signal object."
msgstr ""

msgid "An object containing the x-values at the minima and the maxima."
msgstr ""

msgid "Image processing features"
msgstr ""

msgid "Base image processing features"
msgstr ""

msgid "Restore data outside the Region Of Interest (ROI) of the input image after a computation, only if the input image has a ROI, and if the output image has the same ROI as the input image, and if the data types are compatible, and if the shapes are the same. Otherwise, do nothing."
msgstr ""

msgid "output image object"
msgstr ""

msgid "Wrap a 1 array → 1 array function to produce a 1 image → 1 image function, which can be used inside DataLab's infrastructure to perform computations with :class:`cdl.core.gui.processor.image.ImageProcessor`."
msgstr ""

msgid "The instance of this wrapper is callable and returns a :class:`cdl.obj.ImageObj` object."
msgstr ""

msgid "Create a result signal object, as returned by the callback function of the :func:`cdl.core.gui.processor.base.BaseProcessor.compute_11` method"
msgstr ""

msgid "Add **dst** and **src** images and return **dst** image modified in place"
msgstr ""

msgid "Output image object (modified in place)"
msgstr ""

msgid "Multiply **dst** and **src** images and return **dst** image modified in place"
msgstr ""

msgid "Add **dst** and a constant value and return the new result image object"
msgstr ""

msgid "Result image object **src** + **p.value** (new object)"
msgstr ""

msgid "Subtract a constant value from an image and return the new result image object"
msgstr ""

msgid "Result image object **src** - **p.value** (new object)"
msgstr ""

msgid "Multiply **dst** by a constant value and return the new result image object"
msgstr ""

msgid "Result image object **src** * **p.value** (new object)"
msgstr ""

msgid "Divide an image by a constant value and return the new result image object"
msgstr ""

msgid "Result image object **src** / **p.value** (new object)"
msgstr ""

msgid "Compute arithmetic operation on two images"
msgstr ""

msgid "arithmetic parameters"
msgstr ""

msgid "Result image object"
msgstr ""

msgid "Compute difference between two images"
msgstr ""

msgid "Result image object **src1** - **src2** (new object)"
msgstr ""

msgid "Compute quadratic difference between two images"
msgstr ""

msgid "Result image object (**src1** - **src2**) / sqrt(2.0) (new object)"
msgstr ""

msgid "Compute division between two images"
msgstr ""

msgid "Result image object **src1** / **src2** (new object)"
msgstr ""

msgid "Flat-field parameters"
msgstr ""

msgid "Returns a new instance of :py:class:`FlatFieldParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`FlatFieldParam`."
msgstr ""

msgid "Compute flat field correction with :py:func:`cdl.algorithms.image.flatfield`"
msgstr ""

msgid "raw data image object"
msgstr ""

msgid "flat field image object"
msgstr ""

msgid "flat field parameters"
msgstr ""

msgid "Output image object"
msgstr ""

msgid "Normalize image data depending on its maximum, with :py:func:`cdl.algorithms.image.normalize`"
msgstr ""

msgid "Log10 parameters"
msgstr ""

msgid "Default: None."
msgstr ""

msgid "Returns a new instance of :py:class:`LogP1Param` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`LogP1Param`."
msgstr ""

msgid "Compute log10(z+n) with :py:data:`numpy.log10`"
msgstr ""

msgid "Rotate parameters"
msgstr ""

msgid "Angle (°)\\.  Default: None."
msgstr ""

msgid "Single choice from: 'constant', 'nearest', 'reflect', 'wrap'. Default: 'constant'."
msgstr ""

msgid "Value used for points outside the boundaries of the input if mode is 'constant'\\. Default: 0.0."
msgstr ""

msgid "Reshape the output array so that the input array is contained completely in the output\\. Default: False."
msgstr ""

msgid "Default: True."
msgstr ""

msgid "Spline interpolation order\\. Integer between 0 and 5\\. Default: 3."
msgstr ""

msgid "Returns a new instance of :py:class:`RotateParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`RotateParam`."
msgstr ""

msgid "Apply rotation to coords associated to image obj"
msgstr ""

msgid "rotation angle (in degrees)"
msgstr ""

msgid "image object"
msgstr ""

msgid "original image object"
msgstr ""

msgid "coordinates to rotate"
msgstr ""

msgid "Output data"
msgstr ""

msgid "Rotate data with :py:func:`scipy.ndimage.rotate`"
msgstr ""

msgid "Rotate data 90° with :py:func:`numpy.rot90`"
msgstr ""

msgid "Rotate data 270° with :py:func:`numpy.rot90`"
msgstr ""

msgid "Apply HFlip to coords"
msgstr ""

msgid "Flip data horizontally with :py:func:`numpy.fliplr`"
msgstr ""

msgid "Apply VFlip to coords"
msgstr ""

msgid "Flip data vertically with :py:func:`numpy.flipud`"
msgstr ""

msgid "Grid parameters"
msgstr ""

msgid "Distribute over\\.  Single choice from: 'col', 'row'. Default: 'col'."
msgstr ""

msgid "Columns\\.  Integer, non zero\\. Default: 1."
msgstr ""

msgid "Integer, non zero\\. Default: 1."
msgstr ""

msgid "Column spacing\\.  Float higher than 0.0\\. Default: 0.0."
msgstr ""

msgid "Row spacing\\.  Float higher than 0.0\\. Default: 0.0."
msgstr ""

msgid "Returns a new instance of :py:class:`GridParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`GridParam`."
msgstr ""

msgid "Resize parameters"
msgstr ""

msgid "Returns a new instance of :py:class:`ResizeParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`ResizeParam`."
msgstr ""

msgid "Zooming function with :py:func:`scipy.ndimage.zoom`"
msgstr ""

msgid "Binning parameters"
msgstr ""

msgid "Cluster size (X)\\. Number of adjacent pixels to be combined together along x-axis. Integer higher than 2\\. Default: 2."
msgstr ""

msgid "Cluster size (Y)\\. Number of adjacent pixels to be combined together along y-axis. Integer higher than 2\\. Default: 2."
msgstr ""

msgid "Single choice from: 'sum', 'average', 'median', 'min', 'max'. Default: 'sum'."
msgstr ""

msgid "Data type\\. Output image data type. Single choice from: 'dtype', 'float32', 'float64', 'complex128', 'uint8', 'int16', 'uint16', 'int32'. Default: 'dtype'."
msgstr ""

msgid "Change pixel size so that overall image size remains the same. Default: False."
msgstr ""

msgid "Returns a new instance of :py:class:`BinningParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`BinningParam`."
msgstr ""

msgid "Binning function on data with :py:func:`cdl.algorithms.image.binning`"
msgstr ""

msgid "parameters defining the regions of interest"
msgstr ""

msgid "Extract single ROI"
msgstr ""

msgid "Horizontal or vertical profile parameters"
msgstr ""

msgid "Single choice from: 'horizontal', 'vertical'. Default: 'horizontal'."
msgstr ""

msgid "Integer higher than 0\\. Default: 0."
msgstr ""

msgid "Column\\.  Integer higher than 0\\. Default: 0."
msgstr ""

msgid "Returns a new instance of :py:class:`LineProfileParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`LineProfileParam`."
msgstr ""

msgid "Compute horizontal or vertical profile"
msgstr ""

msgid "Signal object with the profile"
msgstr ""

msgid "Segment profile parameters"
msgstr ""

msgid "Start row\\.  Integer higher than 0\\. Default: 0."
msgstr ""

msgid "Start column\\.  Integer higher than 0\\. Default: 0."
msgstr ""

msgid "End row\\.  Integer higher than 0\\. Default: 0."
msgstr ""

msgid "End column\\.  Integer higher than 0\\. Default: 0."
msgstr ""

msgid "Returns a new instance of :py:class:`SegmentProfileParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`SegmentProfileParam`."
msgstr ""

msgid "Compute segment profile"
msgstr ""

msgid "Signal object with the segment profile"
msgstr ""

msgid "Average horizontal or vertical profile parameters"
msgstr ""

msgid "Integer higher than -1\\. Default: -1."
msgstr ""

msgid "Column 1\\.  Integer higher than 0\\. Default: 0."
msgstr ""

msgid "Column 2\\.  Integer higher than -1\\. Default: -1."
msgstr ""

msgid "Returns a new instance of :py:class:`AverageProfileParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`AverageProfileParam`."
msgstr ""

msgid "Compute horizontal or vertical average profile"
msgstr ""

msgid "Signal object with the average profile"
msgstr ""

msgid "Radial profile parameters"
msgstr ""

msgid "Center position\\.  Single choice from: 'centroid', 'center', 'user'. Default: 'centroid'."
msgstr ""

msgid "X\\ :subscript:`Center`\\.  Float, unit: pixel\\. Default: None."
msgstr ""

msgid "Returns a new instance of :py:class:`RadialProfileParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`RadialProfileParam`."
msgstr ""

msgid "Update parameters from image"
msgstr ""

msgid "Callback for choice item"
msgstr ""

msgid "Compute radial profile around the centroid with :py:func:`cdl.algorithms.image.get_radial_profile`"
msgstr ""

msgid "Signal object with the radial profile"
msgstr ""

msgid "Compute histogram of the image data, with :py:func:`numpy.histogram`"
msgstr ""

msgid "Signal object with the histogram"
msgstr ""

msgid "Swap image axes with :py:func:`numpy.transpose`"
msgstr ""

msgid "Compute the inverse of an image and return the new result image object"
msgstr ""

msgid "Result image object 1 / **src** (new object)"
msgstr ""

msgid "Convert image data type parameters"
msgstr ""

msgid "Destination data type\\. Output image data type. Single choice from: 'float32', 'float64', 'complex128', 'uint8', 'int16', 'uint16', 'int32'. Default: 'float32'."
msgstr ""

msgid "Returns a new instance of :py:class:`DataTypeIParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`DataTypeIParam`."
msgstr ""

msgid "Convert image data type with :py:func:`cdl.algorithms.datatypes.clip_astype`"
msgstr ""

msgid "Compute log10 with :py:data:`numpy.log10`"
msgstr ""

msgid "Image linear calibration parameters"
msgstr ""

msgid "Returns a new instance of :py:class:`ZCalibrateParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`ZCalibrateParam`."
msgstr ""

msgid "calibration parameters"
msgstr ""

msgid "Apply clipping with :py:func:`numpy.clip`"
msgstr ""

msgid "Apply offset correction"
msgstr ""

msgid "Compute FFT with :py:func:`cdl.algorithms.image.fft2d`"
msgstr ""

msgid "Compute inverse FFT with :py:func:`cdl.algorithms.image.ifft2d`"
msgstr ""

msgid "Compute magnitude spectrum with :py:func:`cdl.algorithms.image.magnitude_spectrum`"
msgstr ""

msgid "Compute phase spectrum with :py:func:`cdl.algorithms.image.phase_spectrum`"
msgstr ""

msgid "Compute power spectral density with :py:func:`cdl.algorithms.image.psd`"
msgstr ""

msgid "Butterworth filter parameters"
msgstr ""

msgid "Cut-off frequency ratio\\. Cut-off frequency ratio\\. Float between 0.0 and 0.5\\. Default: 0.005."
msgstr ""

msgid "If true, apply high-pass filter instead of low-pass\\. Default: False."
msgstr ""

msgid "Order of the butterworth filter\\. Integer higher than 1\\. Default: 2."
msgstr ""

msgid "Returns a new instance of :py:class:`ButterworthParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`ButterworthParam`."
msgstr ""

msgid "Compute Butterworth filter with :py:func:`skimage.filters.butterworth`"
msgstr ""

msgid "Calculate result shape by executing a computation function on an image object, taking into account the image origin (x0, y0), scale (dx, dy) and ROIs."
msgstr ""

msgid "Moreover, the computation function must return a single value or a NumPy array containing the result of the computation. This array contains the coordinates of points, polygons, circles or ellipses in the form [[x, y], ...], or [[x0, y0, x1, y1, ...], ...], or [[x0, y0, r], ...], or [[x0, y0, a, b, theta], ...]."
msgstr ""

msgid "Return centroid coordinates with :py:func:`cdl.algorithms.image.get_centroid_fourier`"
msgstr ""

msgid "input data"
msgstr ""

msgid "Centroid coordinates"
msgstr ""

msgid "Compute centroid with :py:func:`cdl.algorithms.image.get_centroid_fourier`"
msgstr ""

msgid "input image"
msgstr ""

msgid "Return diameter coords for the circle contour enclosing image values above threshold (FWHM)"
msgstr ""

msgid "Diameter coords"
msgstr ""

msgid "Compute minimum enclosing circle with :py:func:`cdl.algorithms.image.get_enclosing_circle`"
msgstr ""

msgid "Circle Hough transform parameters"
msgstr ""

msgid "Radius\\ :subscript:`min`\\.  Integer higher than 0, non zero, unit: pixels\\. Default: None."
msgstr ""

msgid "Radius\\ :subscript:`max`\\.  Integer higher than 0, non zero, unit: pixels\\. Default: None."
msgstr ""

msgid "Minimal distance\\.  Integer higher than 0\\. Default: None."
msgstr ""

msgid "Returns a new instance of :py:class:`HoughCircleParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`HoughCircleParam`."
msgstr ""

msgid "Compute Hough circles with :py:func:`cdl.algorithms.image.get_hough_circle_peaks`"
msgstr ""

msgid "Circle coordinates"
msgstr ""

msgid "Compute statistics on an image"
msgstr ""

msgid "Result properties"
msgstr ""

msgid "Threshold features"
msgstr ""

msgid "Threshold computation module"
msgstr ""

msgid "Histogram threshold parameters"
msgstr ""

msgid "Threshold method\\.  Single choice from: 'manual', 'isodata', 'li', 'mean', 'minimum', 'otsu', 'triangle', 'yen'. Default: 'manual'."
msgstr ""

msgid "Threshold value\\.  Default: 0.0."
msgstr ""

msgid "Single choice from: '>', '<'. Default: '>'."
msgstr ""

msgid "Returns a new instance of :py:class:`ThresholdParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`ThresholdParam`."
msgstr ""

msgid "Compute the threshold, using one of the available algorithms:"
msgstr ""

msgid "Manual: a fixed threshold value"
msgstr ""

msgid "ISODATA: :py:func:`skimage.filters.threshold_isodata`"
msgstr ""

msgid "Li: :py:func:`skimage.filters.threshold_li`"
msgstr ""

msgid "Mean: :py:func:`skimage.filters.threshold_mean`"
msgstr ""

msgid "Minimum: :py:func:`skimage.filters.threshold_minimum`"
msgstr ""

msgid "Otsu: :py:func:`skimage.filters.threshold_otsu`"
msgstr ""

msgid "Triangle: :py:func:`skimage.filters.threshold_triangle`"
msgstr ""

msgid "Yen: :py:func:`skimage.filters.threshold_yen`"
msgstr ""

msgid "Compute the threshold using the Isodata algorithm with default parameters, see :py:func:`skimage.filters.threshold_isodata`"
msgstr ""

msgid "Compute the threshold using the Li algorithm with default parameters, see :py:func:`skimage.filters.threshold_li`"
msgstr ""

msgid "Compute the threshold using the Mean algorithm, see :py:func:`skimage.filters.threshold_mean`"
msgstr ""

msgid "Compute the threshold using the Minimum algorithm with default parameters, see :py:func:`skimage.filters.threshold_minimum`"
msgstr ""

msgid "Compute the threshold using the Otsu algorithm with default parameters, see :py:func:`skimage.filters.threshold_otsu`"
msgstr ""

msgid "Compute the threshold using the Triangle algorithm with default parameters, see :py:func:`skimage.filters.threshold_triangle`"
msgstr ""

msgid "Compute the threshold using the Yen algorithm with default parameters, see :py:func:`skimage.filters.threshold_yen`"
msgstr ""

msgid "Exposure correction features"
msgstr ""

msgid "Exposure computation module"
msgstr ""

msgid "Gamma adjustment parameters"
msgstr ""

msgid "Gamma correction factor (higher values give more contrast). Float higher than 0.0\\. Default: 1.0."
msgstr ""

msgid "Gain factor (higher values give more contrast). Float higher than 0.0\\. Default: 1.0."
msgstr ""

msgid "Returns a new instance of :py:class:`AdjustGammaParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`AdjustGammaParam`."
msgstr ""

msgid "Gamma correction with :py:func:`skimage.exposure.adjust_gamma`"
msgstr ""

msgid "Logarithmic adjustment parameters"
msgstr ""

msgid "If true, apply inverse logarithmic transformation. Default: False."
msgstr ""

msgid "Returns a new instance of :py:class:`AdjustLogParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`AdjustLogParam`."
msgstr ""

msgid "Compute log correction with :py:func:`skimage.exposure.adjust_log`"
msgstr ""

msgid "Sigmoid adjustment parameters"
msgstr ""

msgid "Cutoff value (higher values give more contrast). Float between 0.0 and 1.0\\. Default: 0.5."
msgstr ""

msgid "Gain factor (higher values give more contrast). Float higher than 0.0\\. Default: 10.0."
msgstr ""

msgid "If true, apply inverse sigmoid transformation. Default: False."
msgstr ""

msgid "Returns a new instance of :py:class:`AdjustSigmoidParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`AdjustSigmoidParam`."
msgstr ""

msgid "Compute sigmoid correction with :py:func:`skimage.exposure.adjust_sigmoid`"
msgstr ""

msgid "Intensity rescaling parameters"
msgstr ""

msgid "Input range\\. Min and max intensity values of input image ('image' refers to input image min/max levels, 'dtype' refers to input image data type range). Single choice from: 'image', 'dtype', 'float32', 'float64', 'complex128', 'uint8', 'int16', 'uint16', 'int32'. Default: 'image'."
msgstr ""

msgid "Output range\\. Min and max intensity values of output image  ('image' refers to input image min/max levels, 'dtype' refers to input image data type range).. Single choice from: 'image', 'dtype', 'float32', 'float64', 'complex128', 'uint8', 'int16', 'uint16', 'int32'. Default: 'dtype'."
msgstr ""

msgid "Returns a new instance of :py:class:`RescaleIntensityParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`RescaleIntensityParam`."
msgstr ""

msgid "Rescale image intensity levels with :py:func:`skimage.exposure.rescale_intensity`"
msgstr ""

msgid "Histogram equalization parameters"
msgstr ""

msgid "Number of bins\\. Number of bins for image histogram. Integer higher than 1\\. Default: 256."
msgstr ""

msgid "Returns a new instance of :py:class:`EqualizeHistParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`EqualizeHistParam`."
msgstr ""

msgid "Histogram equalization with :py:func:`skimage.exposure.equalize_hist`"
msgstr ""

msgid "Adaptive histogram equalization parameters"
msgstr ""

msgid "Clipping limit\\. Clipping limit (higher values give more contrast). Float between 0.0 and 1.0\\. Default: 0.01."
msgstr ""

msgid "Returns a new instance of :py:class:`EqualizeAdaptHistParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`EqualizeAdaptHistParam`."
msgstr ""

msgid "Adaptive histogram equalization with :py:func:`skimage.exposure.equalize_adapthist`"
msgstr ""

msgid "Restoration features"
msgstr ""

msgid "Restoration computation module"
msgstr ""

msgid "Total Variation denoising parameters"
msgstr ""

msgid "Denoising weight\\. The greater weight, the more denoising (at the expense of fidelity to input). Float higher than 0, non zero\\. Default: 0.1."
msgstr ""

msgid "Epsilon\\. Relative difference of the value of the cost function that determines the stop criterion. The algorithm stops when: (e_(n-1) - e_n) < eps \\* e_0\\. Float higher than 0, non zero\\. Default: 0.0002."
msgstr ""

msgid "Max. iterations\\. Maximal number of iterations used for the optimization\\. Integer higher than 0, non zero\\. Default: 200."
msgstr ""

msgid "Returns a new instance of :py:class:`DenoiseTVParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`DenoiseTVParam`."
msgstr ""

msgid "Compute Total Variation denoising with :py:func:`skimage.restoration.denoise_tv_chambolle`"
msgstr ""

msgid "Bilateral filter denoising parameters"
msgstr ""

msgid "σ\\ :subscript:`spatial`\\. Standard deviation for range distance. A larger value results in averaging of pixels with larger spatial differences. Float higher than 0, non zero, unit: pixels\\. Default: 1.0."
msgstr ""

msgid "Single choice from: 'constant', 'edge', 'symmetric', 'reflect', 'wrap'. Default: 'constant'."
msgstr ""

msgid "Used in conjunction with mode 'constant', the value outside the image boundaries. Default: 0."
msgstr ""

msgid "Returns a new instance of :py:class:`DenoiseBilateralParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`DenoiseBilateralParam`."
msgstr ""

msgid "Compute bilateral filter denoising with :py:func:`skimage.restoration.denoise_bilateral`"
msgstr ""

msgid "Wavelet denoising parameters"
msgstr ""

msgid "Single choice from: 'bior1.1', 'bior1.3', 'bior1.5', 'bior2.2', 'bior2.4', 'bior2.6', 'bior2.8', 'bior3.1', 'bior3.3', 'bior3.5', 'bior3.7', 'bior3.9', 'bior4.4', 'bior5.5', 'bior6.8', 'cgau1', 'cgau2', 'cgau3', 'cgau4', 'cgau5', 'cgau6', 'cgau7', 'cgau8', 'cmor', 'coif1', 'coif2', 'coif3', 'coif4', 'coif5', 'coif6', 'coif7', 'coif8', 'coif9', 'coif10', 'coif11', 'coif12', 'coif13', 'coif14', 'coif15', 'coif16', 'coif17', 'db1', 'db2', 'db3', 'db4', 'db5', 'db6', 'db7', 'db8', 'db9', 'db10', 'db11', 'db12', 'db13', 'db14', 'db15', 'db16', 'db17', 'db18', 'db19', 'db20', 'db21', 'db22', 'db23', 'db24', 'db25', 'db26', 'db27', 'db28', 'db29', 'db30', 'db31', 'db32', 'db33', 'db34', 'db35', 'db36', 'db37', 'db38', 'dmey', 'fbsp', 'gaus1', 'gaus2', 'gaus3', 'gaus4', 'gaus5', 'gaus6', 'gaus7', 'gaus8', 'haar', 'mexh', 'morl', 'rbio1.1', 'rbio1.3', 'rbio1.5', 'rbio2.2', 'rbio2.4', 'rbio2.6', 'rbio2.8', 'rbio3.1', 'rbio3.3', 'rbio3.5', 'rbio3.7', 'rbio3.9', 'rbio4.4', 'rbio5.5', 'rbio6.8', 'shan', 'sym2', 'sym3', 'sym4', 'sym5', 'sym6', 'sym7', 'sym8', 'sym9', 'sym10', 'sym11', 'sym12', 'sym13', 'sym14', 'sym15', 'sym16', 'sym17', 'sym18', 'sym19', 'sym20'. Default: 'sym9'."
msgstr ""

msgid "Single choice from: 'soft', 'hard'. Default: 'soft'."
msgstr ""

msgid "Single choice from: 'BayesShrink', 'VisuShrink'. Default: 'VisuShrink'."
msgstr ""

msgid "Returns a new instance of :py:class:`DenoiseWaveletParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`DenoiseWaveletParam`."
msgstr ""

msgid "Compute Wavelet denoising with :py:func:`skimage.restoration.denoise_wavelet`"
msgstr ""

msgid "Denoise using White Top-Hat with :py:func:`skimage.morphology.white_tophat`"
msgstr ""

msgid "Morphological features"
msgstr ""

msgid "Morphology computation module"
msgstr ""

msgid "White Top-Hat parameters"
msgstr ""

msgid "Footprint (disk) radius. Integer higher than 1\\. Default: 1."
msgstr ""

msgid "Returns a new instance of :py:class:`MorphologyParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`MorphologyParam`."
msgstr ""

msgid "Compute White Top-Hat with :py:func:`skimage.morphology.white_tophat`"
msgstr ""

msgid "Compute Black Top-Hat with :py:func:`skimage.morphology.black_tophat`"
msgstr ""

msgid "Compute Erosion with :py:func:`skimage.morphology.erosion`"
msgstr ""

msgid "Compute Dilation with :py:func:`skimage.morphology.dilation`"
msgstr ""

msgid "Compute morphological opening with :py:func:`skimage.morphology.opening`"
msgstr ""

msgid "Compute morphological closing with :py:func:`skimage.morphology.closing`"
msgstr ""

msgid "Edge detection features"
msgstr ""

msgid "Edges computation module"
msgstr ""

msgid "Canny filter parameters"
msgstr ""

msgid "Standard deviation of the gaussian filter. Float higher than 0, non zero, unit: pixels\\. Default: 1.0."
msgstr ""

msgid "Lower bound for hysteresis thresholding (linking edges). Float higher than 0\\. Default: 0.1."
msgstr ""

msgid "Upper bound for hysteresis thresholding (linking edges). Float higher than 0\\. Default: 0.9."
msgstr ""

msgid "If true then treat low_threshold and high_threshold as quantiles of the edge magnitude image, rather than absolute edge magnitude values. If true then the thresholds must be in the range [0, 1]. Default: True."
msgstr ""

msgid "Single choice from: 'reflect', 'constant', 'nearest', 'mirror', 'wrap'. Default: 'constant'."
msgstr ""

msgid "Value to fill past edges of input if mode is constant. Default: 0.0."
msgstr ""

msgid "Returns a new instance of :py:class:`CannyParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`CannyParam`."
msgstr ""

msgid "Compute Canny filter with :py:func:`skimage.feature.canny`"
msgstr ""

msgid "Compute Roberts filter with :py:func:`skimage.filters.roberts`"
msgstr ""

msgid "Compute Prewitt filter with :py:func:`skimage.filters.prewitt`"
msgstr ""

msgid "Compute horizontal Prewitt filter with :py:func:`skimage.filters.prewitt_h`"
msgstr ""

msgid "Compute vertical Prewitt filter with :py:func:`skimage.filters.prewitt_v`"
msgstr ""

msgid "Compute Sobel filter with :py:func:`skimage.filters.sobel`"
msgstr ""

msgid "Compute horizontal Sobel filter with :py:func:`skimage.filters.sobel_h`"
msgstr ""

msgid "Compute vertical Sobel filter with :py:func:`skimage.filters.sobel_v`"
msgstr ""

msgid "Compute Scharr filter with :py:func:`skimage.filters.scharr`"
msgstr ""

msgid "Compute horizontal Scharr filter with :py:func:`skimage.filters.scharr_h`"
msgstr ""

msgid "Compute vertical Scharr filter with :py:func:`skimage.filters.scharr_v`"
msgstr ""

msgid "Compute Farid filter with :py:func:`skimage.filters.farid`"
msgstr ""

msgid "Compute horizontal Farid filter with :py:func:`skimage.filters.farid_h`"
msgstr ""

msgid "Compute vertical Farid filter with :py:func:`skimage.filters.farid_v`"
msgstr ""

msgid "Compute Laplace filter with :py:func:`skimage.filters.laplace`"
msgstr ""

msgid "Detection features"
msgstr ""

msgid "Blob detection computation module"
msgstr ""

msgid "Generic detection parameters"
msgstr ""

msgid "Relative threshold\\. Detection threshold, relative to difference between data maximum and minimum\\. Float between 0.1 and 0.9\\. Default: 0.5."
msgstr ""

msgid "Returns a new instance of :py:class:`GenericDetectionParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`GenericDetectionParam`."
msgstr ""

msgid "Neighborhoods size\\. Size of the sliding window used in maximum/minimum filtering algorithm\\. Integer higher than 1, unit: pixels\\. Default: 10."
msgstr ""

msgid "Returns a new instance of :py:class:`Peak2DDetectionParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`Peak2DDetectionParam`."
msgstr ""

msgid "Compute 2D peak detection with :py:func:`cdl.algorithms.image.get_2d_peaks_coords`"
msgstr ""

msgid "Peak coordinates"
msgstr ""

msgid "Contour shape parameters"
msgstr ""

msgid "Single choice from: 'ellipse', 'circle', 'polygon'. Default: 'ellipse'."
msgstr ""

msgid "Returns a new instance of :py:class:`ContourShapeParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`ContourShapeParam`."
msgstr ""

msgid "Compute contour shape fit with :py:func:`cdl.algorithms.image.get_contour_shapes`"
msgstr ""

msgid "Base class for blob detection parameters"
msgstr ""

msgid "σ\\ :subscript:`min`\\. The minimum standard deviation for gaussian kernel. Keep this low to detect smaller blobs. Float higher than 0, non zero, unit: pixels\\. Default: 1.0."
msgstr ""

msgid "σ\\ :subscript:`max`\\. The maximum standard deviation for gaussian kernel. Keep this high to detect larger blobs. Float higher than 0, non zero, unit: pixels\\. Default: 30.0."
msgstr ""

msgid "Relative threshold\\. Minimum intensity of blobs. Float between 0.0 and 1.0\\. Default: 0.2."
msgstr ""

msgid "If two blobs overlap by a fraction greater than this value, the smaller blob is eliminated. Float between 0.0 and 1.0\\. Default: 0.5."
msgstr ""

msgid "Returns a new instance of :py:class:`BaseBlobParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`BaseBlobParam`."
msgstr ""

msgid "Blob detection using Difference of Gaussian method"
msgstr ""

msgid "If true, exclude blobs from the border of the image. Default: True."
msgstr ""

msgid "Returns a new instance of :py:class:`BlobDOGParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`BlobDOGParam`."
msgstr ""

msgid "Compute blobs using Difference of Gaussian method with :py:func:`cdl.algorithms.image.find_blobs_dog`"
msgstr ""

msgid "Blobs coordinates"
msgstr ""

msgid "Blob detection using Determinant of Hessian method"
msgstr ""

msgid "If set intermediate values of standard deviations are interpolated using a logarithmic scale to the base 10. If not, linear interpolation is used. Default: False."
msgstr ""

msgid "Returns a new instance of :py:class:`BlobDOHParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`BlobDOHParam`."
msgstr ""

msgid "Compute blobs using Determinant of Hessian method with :py:func:`cdl.algorithms.image.find_blobs_doh`"
msgstr ""

msgid "Blob detection using Laplacian of Gaussian method"
msgstr ""

msgid "Returns a new instance of :py:class:`BlobLOGParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`BlobLOGParam`."
msgstr ""

msgid "Compute blobs using Laplacian of Gaussian method with :py:func:`cdl.algorithms.image.find_blobs_log`"
msgstr ""

msgid "Blob detection using OpenCV"
msgstr ""

msgid "Min. threshold\\. The minimum threshold between local maxima and minima. This parameter does not affect the quality of the blobs, only the quantity. Lower thresholds result in larger numbers of blobs. Float higher than 0.0\\. Default: 10.0."
msgstr ""

msgid "Max. threshold\\. The maximum threshold between local maxima and minima. This parameter does not affect the quality of the blobs, only the quantity. Lower thresholds result in larger numbers of blobs. Float higher than 0.0\\. Default: 200.0."
msgstr ""

msgid "Min. repeatability\\. The minimum number of times a blob needs to be detected in a sequence of images to be considered valid. Integer higher than 1\\. Default: 2."
msgstr ""

msgid "Min. distance between blobs\\. The minimum distance between two blobs. If blobs are found closer together than this distance, the smaller blob is removed. Float higher than 0.0, non zero\\. Default: 10.0."
msgstr ""

msgid "If true, the image is filtered by color instead of intensity. Default: True."
msgstr ""

msgid "The color of the blobs to detect (0 for dark blobs, 255 for light blobs). Default: 0."
msgstr ""

msgid "If true, the image is filtered by blob area. Default: True."
msgstr ""

msgid "Min. area\\. The minimum blob area. Float higher than 0.0\\. Default: 25.0."
msgstr ""

msgid "Max. area\\. The maximum blob area. Float higher than 0.0\\. Default: 500.0."
msgstr ""

msgid "If true, the image is filtered by blob circularity. Default: False."
msgstr ""

msgid "Min. circularity\\. The minimum circularity of the blobs. Float between 0.0 and 1.0\\. Default: 0.8."
msgstr ""

msgid "Max. circularity\\. The maximum circularity of the blobs. Float between 0.0 and 1.0\\. Default: 1.0."
msgstr ""

msgid "If true, the image is filtered by blob inertia. Default: False."
msgstr ""

msgid "Min. inertia ratio\\. The minimum inertia ratio of the blobs. Float between 0.0 and 1.0\\. Default: 0.6."
msgstr ""

msgid "Max. inertia ratio\\. The maximum inertia ratio of the blobs. Float between 0.0 and 1.0\\. Default: 1.0."
msgstr ""

msgid "If true, the image is filtered by blob convexity. Default: False."
msgstr ""

msgid "Min. convexity\\. The minimum convexity of the blobs. Float between 0.0 and 1.0\\. Default: 0.8."
msgstr ""

msgid "Max. convexity\\. The maximum convexity of the blobs. Float between 0.0 and 1.0\\. Default: 1.0."
msgstr ""

msgid "Returns a new instance of :py:class:`BlobOpenCVParam` with the fields set to the given values."
msgstr ""

msgid "New instance of :py:class:`BlobOpenCVParam`."
msgstr ""

msgid "Compute blobs using OpenCV with :py:func:`cdl.algorithms.image.find_blobs_opencv`"
msgstr ""
