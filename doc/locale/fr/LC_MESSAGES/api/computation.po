# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, DataLab Platform Developers
# This file is distributed under the same license as the DataLab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: DataLab \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-02-14 11:53+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: fr\n"
"Language-Team: fr <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: cdl.computation:2 of
msgid "Computation (:mod:`cdl.computation`)"
msgstr ""

#: cdl.computation:4 of
msgid ""
"This package contains the computation functions used by the DataLab "
"project. Those functions operate directly on DataLab objects (i.e. "
":class:`cdl.obj.SignalObj` and :class:`cdl.obj.ImageObj`) and are "
"designed to be used in the DataLab pipeline, but can be used "
"independently as well."
msgstr ""

#: cdl.computation:11 of
msgid ""
"The :mod:`cdl.computation` package is the main entry point for the "
"DataLab computation functions when manipulating DataLab objects. See the "
":mod:`cdl.algorithms` package for algorithms that operate directly on "
"NumPy arrays."
msgstr ""

#: cdl.computation:16 of
msgid ""
"Each computation module defines a set of computation objects, that is, "
"functions that implement processing features and classes that implement "
"the corresponding parameters (in the form of "
":py:class:`guidata.dataset.datatypes.Dataset` subclasses). The "
"computation functions takes a DataLab object (e.g. "
":class:`cdl.obj.SignalObj`) and a parameter object (e.g. "
":py:class:`cdl.param.MovingAverageParam`) as input and return a DataLab "
"object as output (the result of the computation). The parameter object is"
" used to configure the computation function (e.g. the size of the moving "
"average window)."
msgstr ""

#: cdl.computation:25 of
msgid ""
"In DataLab overall architecture, the purpose of this package is to "
"provide the computation functions that are used by the "
":mod:`cdl.core.gui.processor` module, based on the algorithms defined in "
"the :mod:`cdl.algorithms` module and on the data model defined in the "
":mod:`cdl.obj` (or :mod:`cdl.core.model`) module."
msgstr ""

#: cdl.computation:30 of
msgid ""
"The computation modules are organized in subpackages according to their "
"purpose. The following subpackages are available:"
msgstr ""

#: cdl.computation:33 of
msgid ":mod:`cdl.computation.base`: Common processing features"
msgstr ""

#: cdl.computation:34 of
msgid ":mod:`cdl.computation.signal`: Signal processing features"
msgstr ""

#: cdl.computation:35 of
msgid ":mod:`cdl.computation.image`: Image processing features"
msgstr ""

#: cdl.computation:38 of
msgid "Common processing features"
msgstr ""

#: cdl.computation.base.ArithmeticParam:1 of
msgid "Arithmetic parameters"
msgstr ""

#: cdl.computation.base.ArithmeticParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid "Single choice from: '+', '-', 'Ã—', '/'. Default: '+'."
msgstr ""

#: cdl.computation.base.ArithmeticParam cdl.computation.base.ClipParam
#: cdl.computation.base.ConstantParam cdl.computation.base.FFTParam
#: cdl.computation.base.GaussianParam cdl.computation.base.HistogramParam
#: cdl.computation.base.MovingAverageParam
#: cdl.computation.base.MovingMedianParam cdl.computation.base.NormalizeParam
#: cdl.computation.base.SpectrumParam cdl.computation.image.AverageProfileParam
#: cdl.computation.image.BinningParam cdl.computation.image.ButterworthParam
#: cdl.computation.image.DataTypeIParam cdl.computation.image.FlatFieldParam
#: cdl.computation.image.GridParam cdl.computation.image.HoughCircleParam
#: cdl.computation.image.LineProfileParam cdl.computation.image.LogP1Param
#: cdl.computation.image.RadialProfileParam cdl.computation.image.ResizeParam
#: cdl.computation.image.RotateParam cdl.computation.image.SegmentProfileParam
#: cdl.computation.image.ZCalibrateParam
#: cdl.computation.image.detection.BaseBlobParam
#: cdl.computation.image.detection.BlobDOGParam
#: cdl.computation.image.detection.BlobDOHParam
#: cdl.computation.image.detection.BlobLOGParam
#: cdl.computation.image.detection.BlobOpenCVParam
#: cdl.computation.image.detection.ContourShapeParam
#: cdl.computation.image.detection.GenericDetectionParam
#: cdl.computation.image.detection.Peak2DDetectionParam
#: cdl.computation.image.edges.CannyParam
#: cdl.computation.image.exposure.AdjustGammaParam
#: cdl.computation.image.exposure.AdjustLogParam
#: cdl.computation.image.exposure.AdjustSigmoidParam
#: cdl.computation.image.exposure.EqualizeAdaptHistParam
#: cdl.computation.image.exposure.EqualizeHistParam
#: cdl.computation.image.exposure.RescaleIntensityParam
#: cdl.computation.image.morphology.MorphologyParam
#: cdl.computation.image.restoration.DenoiseBilateralParam
#: cdl.computation.image.restoration.DenoiseTVParam
#: cdl.computation.image.restoration.DenoiseWaveletParam
#: cdl.computation.image.threshold.ThresholdParam
#: cdl.computation.signal.AllanVarianceParam
#: cdl.computation.signal.BandPassFilterParam
#: cdl.computation.signal.BandStopFilterParam
#: cdl.computation.signal.BaseHighLowBandParam
#: cdl.computation.signal.DataTypeSParam cdl.computation.signal.DetrendingParam
#: cdl.computation.signal.DynamicParam cdl.computation.signal.FWHMParam
#: cdl.computation.signal.FindAbscissaParam
#: cdl.computation.signal.HighPassFilterParam
#: cdl.computation.signal.InterpolationParam
#: cdl.computation.signal.LowPassFilterParam
#: cdl.computation.signal.PeakDetectionParam
#: cdl.computation.signal.PolynomialFitParam cdl.computation.signal.PowerParam
#: cdl.computation.signal.ResamplingParam cdl.computation.signal.WindowingParam
#: cdl.computation.signal.XYCalibrateParam of
msgid "type"
msgstr ""

#: cdl.computation.base.ArithmeticParam:7
#: cdl.computation.base.MovingAverageParam:13
#: cdl.computation.base.MovingMedianParam:13
#: cdl.computation.base.NormalizeParam:7
#: cdl.computation.image.AverageProfileParam:7
#: cdl.computation.image.BinningParam:19 cdl.computation.image.BinningParam:25
#: cdl.computation.image.DataTypeIParam:7 cdl.computation.image.GridParam:7
#: cdl.computation.image.LineProfileParam:7
#: cdl.computation.image.RadialProfileParam:7
#: cdl.computation.image.ResizeParam:13 cdl.computation.image.RotateParam:13
#: cdl.computation.image.detection.ContourShapeParam:13
#: cdl.computation.image.edges.CannyParam:31
#: cdl.computation.image.exposure.RescaleIntensityParam:7
#: cdl.computation.image.exposure.RescaleIntensityParam:13
#: cdl.computation.image.restoration.DenoiseBilateralParam:13
#: cdl.computation.image.restoration.DenoiseWaveletParam:7
#: cdl.computation.image.restoration.DenoiseWaveletParam:13
#: cdl.computation.image.restoration.DenoiseWaveletParam:19
#: cdl.computation.image.threshold.ThresholdParam:7
#: cdl.computation.image.threshold.ThresholdParam:25
#: cdl.computation.signal.BandPassFilterParam:7
#: cdl.computation.signal.BandStopFilterParam:7
#: cdl.computation.signal.BaseHighLowBandParam:7
#: cdl.computation.signal.DataTypeSParam:7
#: cdl.computation.signal.DetrendingParam:7
#: cdl.computation.signal.DynamicParam:13 cdl.computation.signal.FWHMParam:7
#: cdl.computation.signal.HighPassFilterParam:7
#: cdl.computation.signal.InterpolationParam:7
#: cdl.computation.signal.LowPassFilterParam:7
#: cdl.computation.signal.ResamplingParam:7
#: cdl.computation.signal.ResamplingParam:31
#: cdl.computation.signal.WindowingParam:7
#: cdl.computation.signal.XYCalibrateParam:7 of
msgid "guidata.dataset.dataitems.ChoiceItem"
msgstr ""

#: cdl.computation.base.ArithmeticParam:11
#: cdl.computation.image.ZCalibrateParam:5
#: cdl.computation.signal.XYCalibrateParam:11
#: guidata.dataset.datatypes.DataSet.create:3
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid "Default: 1.0."
msgstr ""

#: cdl.computation.base.ArithmeticParam:13
#: cdl.computation.base.ArithmeticParam:19 cdl.computation.base.ClipParam:7
#: cdl.computation.base.ClipParam:13 cdl.computation.base.ConstantParam:7
#: cdl.computation.base.GaussianParam:7 cdl.computation.base.HistogramParam:13
#: cdl.computation.base.HistogramParam:19
#: cdl.computation.image.ButterworthParam:7
#: cdl.computation.image.FlatFieldParam:7 cdl.computation.image.GridParam:25
#: cdl.computation.image.GridParam:31 cdl.computation.image.LogP1Param:7
#: cdl.computation.image.RadialProfileParam:13
#: cdl.computation.image.RadialProfileParam:19
#: cdl.computation.image.ResizeParam:7 cdl.computation.image.ResizeParam:19
#: cdl.computation.image.RotateParam:7 cdl.computation.image.RotateParam:19
#: cdl.computation.image.ZCalibrateParam:7
#: cdl.computation.image.ZCalibrateParam:13
#: cdl.computation.image.detection.BaseBlobParam:7
#: cdl.computation.image.detection.BaseBlobParam:13
#: cdl.computation.image.detection.BaseBlobParam:19
#: cdl.computation.image.detection.BaseBlobParam:25
#: cdl.computation.image.detection.BlobDOGParam:7
#: cdl.computation.image.detection.BlobDOGParam:13
#: cdl.computation.image.detection.BlobDOGParam:19
#: cdl.computation.image.detection.BlobDOGParam:25
#: cdl.computation.image.detection.BlobDOHParam:7
#: cdl.computation.image.detection.BlobDOHParam:13
#: cdl.computation.image.detection.BlobDOHParam:19
#: cdl.computation.image.detection.BlobDOHParam:25
#: cdl.computation.image.detection.BlobLOGParam:7
#: cdl.computation.image.detection.BlobLOGParam:13
#: cdl.computation.image.detection.BlobLOGParam:19
#: cdl.computation.image.detection.BlobLOGParam:25
#: cdl.computation.image.detection.BlobOpenCVParam:7
#: cdl.computation.image.detection.BlobOpenCVParam:13
#: cdl.computation.image.detection.BlobOpenCVParam:25
#: cdl.computation.image.detection.BlobOpenCVParam:49
#: cdl.computation.image.detection.BlobOpenCVParam:55
#: cdl.computation.image.detection.BlobOpenCVParam:67
#: cdl.computation.image.detection.BlobOpenCVParam:73
#: cdl.computation.image.detection.BlobOpenCVParam:85
#: cdl.computation.image.detection.BlobOpenCVParam:91
#: cdl.computation.image.detection.BlobOpenCVParam:103
#: cdl.computation.image.detection.BlobOpenCVParam:109
#: cdl.computation.image.detection.ContourShapeParam:7
#: cdl.computation.image.detection.GenericDetectionParam:7
#: cdl.computation.image.detection.Peak2DDetectionParam:7
#: cdl.computation.image.edges.CannyParam:7
#: cdl.computation.image.edges.CannyParam:13
#: cdl.computation.image.edges.CannyParam:19
#: cdl.computation.image.edges.CannyParam:37
#: cdl.computation.image.exposure.AdjustGammaParam:7
#: cdl.computation.image.exposure.AdjustGammaParam:13
#: cdl.computation.image.exposure.AdjustLogParam:7
#: cdl.computation.image.exposure.AdjustSigmoidParam:7
#: cdl.computation.image.exposure.AdjustSigmoidParam:13
#: cdl.computation.image.exposure.EqualizeAdaptHistParam:13
#: cdl.computation.image.restoration.DenoiseBilateralParam:7
#: cdl.computation.image.restoration.DenoiseBilateralParam:19
#: cdl.computation.image.restoration.DenoiseTVParam:7
#: cdl.computation.image.restoration.DenoiseTVParam:13
#: cdl.computation.image.threshold.ThresholdParam:19
#: cdl.computation.signal.BandPassFilterParam:19
#: cdl.computation.signal.BandPassFilterParam:25
#: cdl.computation.signal.BandPassFilterParam:31
#: cdl.computation.signal.BandPassFilterParam:37
#: cdl.computation.signal.BandStopFilterParam:19
#: cdl.computation.signal.BandStopFilterParam:25
#: cdl.computation.signal.BandStopFilterParam:31
#: cdl.computation.signal.BandStopFilterParam:37
#: cdl.computation.signal.BaseHighLowBandParam:19
#: cdl.computation.signal.BaseHighLowBandParam:25
#: cdl.computation.signal.BaseHighLowBandParam:31
#: cdl.computation.signal.BaseHighLowBandParam:37
#: cdl.computation.signal.DynamicParam:7 cdl.computation.signal.FWHMParam:13
#: cdl.computation.signal.FWHMParam:19
#: cdl.computation.signal.FindAbscissaParam:7
#: cdl.computation.signal.HighPassFilterParam:19
#: cdl.computation.signal.HighPassFilterParam:25
#: cdl.computation.signal.HighPassFilterParam:31
#: cdl.computation.signal.HighPassFilterParam:37
#: cdl.computation.signal.InterpolationParam:13
#: cdl.computation.signal.LowPassFilterParam:19
#: cdl.computation.signal.LowPassFilterParam:25
#: cdl.computation.signal.LowPassFilterParam:31
#: cdl.computation.signal.LowPassFilterParam:37
#: cdl.computation.signal.PowerParam:7
#: cdl.computation.signal.ResamplingParam:13
#: cdl.computation.signal.ResamplingParam:19
#: cdl.computation.signal.ResamplingParam:25
#: cdl.computation.signal.ResamplingParam:37
#: cdl.computation.signal.WindowingParam:13
#: cdl.computation.signal.WindowingParam:19
#: cdl.computation.signal.WindowingParam:25
#: cdl.computation.signal.XYCalibrateParam:13
#: cdl.computation.signal.XYCalibrateParam:19 of
msgid "guidata.dataset.dataitems.FloatItem"
msgstr ""

#: cdl.computation.base.ArithmeticParam:17
#: cdl.computation.image.FlatFieldParam:5
#: cdl.computation.image.ZCalibrateParam:11
#: cdl.computation.signal.XYCalibrateParam:17
#: guidata.dataset.datatypes.DataSet.create:3
#: guidata.dataset.datatypes.DataSet.create:5
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid "Default: 0.0."
msgstr ""

#: cdl.computation.base.ArithmeticParam:23
#: guidata.dataset.datatypes.DataSet.create:9 of
msgid "Default: ''."
msgstr ""

#: cdl.computation.base.ArithmeticParam:25 of
msgid "guidata.dataset.dataitems.StringItem"
msgstr ""

#: cdl.computation.base.ArithmeticParam:29
#: guidata.dataset.datatypes.DataSet.create:11 of
msgid "Result\\.  Default: True."
msgstr ""

#: cdl.computation.base.ArithmeticParam:31 cdl.computation.base.FFTParam:7
#: cdl.computation.base.SpectrumParam:7 cdl.computation.image.BinningParam:31
#: cdl.computation.image.ButterworthParam:13
#: cdl.computation.image.ResizeParam:25 cdl.computation.image.RotateParam:25
#: cdl.computation.image.RotateParam:31
#: cdl.computation.image.detection.BlobDOGParam:31
#: cdl.computation.image.detection.BlobDOHParam:31
#: cdl.computation.image.detection.BlobLOGParam:31
#: cdl.computation.image.detection.BlobLOGParam:37
#: cdl.computation.image.detection.BlobOpenCVParam:31
#: cdl.computation.image.detection.BlobOpenCVParam:43
#: cdl.computation.image.detection.BlobOpenCVParam:61
#: cdl.computation.image.detection.BlobOpenCVParam:79
#: cdl.computation.image.detection.BlobOpenCVParam:97
#: cdl.computation.image.detection.Peak2DDetectionParam:19
#: cdl.computation.image.edges.CannyParam:25
#: cdl.computation.image.exposure.AdjustLogParam:13
#: cdl.computation.image.exposure.AdjustSigmoidParam:19 of
msgid "guidata.dataset.dataitems.BoolItem"
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`ArithmeticParam` with the fields set"
" to the given values."
msgstr ""

#: cdl.computation of
msgid "Parameters"
msgstr ""

#: cdl.computation of
msgid "Returns"
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:14 of
msgid "New instance of :py:class:`ArithmeticParam`."
msgstr ""

#: cdl.computation.base.ArithmeticParam.get_operation:1 of
msgid "Return the operation string"
msgstr ""

#: cdl.computation.base.ArithmeticParam.update_operation:1 of
msgid "Update the operation item"
msgstr ""

#: cdl.computation.base.GaussianParam:1 of
msgid "Gaussian filter parameters"
msgstr ""

#: cdl.computation.base.GaussianParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid "Ïƒ\\.  Default: 1.0."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`GaussianParam` with the fields set "
"to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:6 of
msgid "New instance of :py:class:`GaussianParam`."
msgstr ""

#: cdl.computation.base.MovingAverageParam:1 of
msgid "Moving average parameters"
msgstr ""

#: cdl.computation.base.MovingAverageParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid "Size of the moving window\\.  Integer higher than 1\\. Default: 3."
msgstr ""

#: cdl.computation.base.HistogramParam:7
#: cdl.computation.base.MovingAverageParam:7
#: cdl.computation.base.MovingMedianParam:7
#: cdl.computation.image.AverageProfileParam:13
#: cdl.computation.image.AverageProfileParam:19
#: cdl.computation.image.AverageProfileParam:25
#: cdl.computation.image.AverageProfileParam:31
#: cdl.computation.image.BinningParam:7 cdl.computation.image.BinningParam:13
#: cdl.computation.image.ButterworthParam:19 cdl.computation.image.GridParam:13
#: cdl.computation.image.GridParam:19 cdl.computation.image.HoughCircleParam:7
#: cdl.computation.image.HoughCircleParam:13
#: cdl.computation.image.HoughCircleParam:19
#: cdl.computation.image.LineProfileParam:13
#: cdl.computation.image.LineProfileParam:19
#: cdl.computation.image.ResizeParam:31 cdl.computation.image.RotateParam:37
#: cdl.computation.image.SegmentProfileParam:7
#: cdl.computation.image.SegmentProfileParam:13
#: cdl.computation.image.SegmentProfileParam:19
#: cdl.computation.image.SegmentProfileParam:25
#: cdl.computation.image.detection.BlobOpenCVParam:19
#: cdl.computation.image.detection.BlobOpenCVParam:37
#: cdl.computation.image.detection.Peak2DDetectionParam:13
#: cdl.computation.image.exposure.EqualizeAdaptHistParam:7
#: cdl.computation.image.exposure.EqualizeHistParam:7
#: cdl.computation.image.morphology.MorphologyParam:7
#: cdl.computation.image.restoration.DenoiseTVParam:19
#: cdl.computation.image.threshold.ThresholdParam:13
#: cdl.computation.signal.AllanVarianceParam:7
#: cdl.computation.signal.BandPassFilterParam:13
#: cdl.computation.signal.BandStopFilterParam:13
#: cdl.computation.signal.BaseHighLowBandParam:13
#: cdl.computation.signal.DynamicParam:19
#: cdl.computation.signal.HighPassFilterParam:13
#: cdl.computation.signal.LowPassFilterParam:13
#: cdl.computation.signal.PeakDetectionParam:7
#: cdl.computation.signal.PeakDetectionParam:13
#: cdl.computation.signal.PolynomialFitParam:7
#: cdl.computation.signal.ResamplingParam:43 of
msgid "guidata.dataset.dataitems.IntItem"
msgstr ""

#: cdl.computation.base.MovingAverageParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid ""
"Mode of the filter: - 'reflect': reflect the data at the boundary - "
"'constant': pad with a constant value - 'nearest': pad with the nearest "
"value - 'mirror': reflect the data at the boundary with the data itself -"
" 'wrap': circular boundary\\. Single choice from: 'reflect', 'constant', "
"'nearest', 'mirror', 'wrap'. Default: 'reflect'."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`MovingAverageParam` with the fields "
"set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:8 of
msgid "New instance of :py:class:`MovingAverageParam`."
msgstr ""

#: cdl.computation.base.MovingMedianParam:1 of
msgid "Moving median parameters"
msgstr ""

#: cdl.computation.base.MovingMedianParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid "Size of the moving window\\.  Integer higher than 1, odd\\. Default: 3."
msgstr ""

#: cdl.computation.base.MovingMedianParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid ""
"Mode of the filter: - 'reflect': reflect the data at the boundary - "
"'constant': pad with a constant value - 'nearest': pad with the nearest "
"value - 'mirror': reflect the data at the boundary with the data itself -"
" 'wrap': circular boundary\\. Single choice from: 'reflect', 'constant', "
"'nearest', 'mirror', 'wrap'. Default: 'nearest'."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`MovingMedianParam` with the fields "
"set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:8 of
msgid "New instance of :py:class:`MovingMedianParam`."
msgstr ""

#: cdl.computation.base.ClipParam:1 of
msgid "Data clipping parameters"
msgstr ""

#: cdl.computation.base.ClipParam:5 guidata.dataset.datatypes.DataSet.create:3
#: of
msgid "Lower clipping value\\.  Default: None."
msgstr ""

#: cdl.computation.base.ClipParam:11 guidata.dataset.datatypes.DataSet.create:5
#: of
msgid "Upper clipping value\\.  Default: None."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`ClipParam` with the fields set to "
"the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:8 of
msgid "New instance of :py:class:`ClipParam`."
msgstr ""

#: cdl.computation.base.NormalizeParam:1 of
msgid "Normalize parameters"
msgstr ""

#: cdl.computation.base.NormalizeParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Normalize with respect to\\.  Single choice from: 'maximum', 'amplitude',"
" 'area', 'energy', 'rms'. Default: 'maximum'."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`NormalizeParam` with the fields set "
"to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:6 of
msgid "New instance of :py:class:`NormalizeParam`."
msgstr ""

#: cdl.computation.base.HistogramParam:1 of
msgid "Histogram parameters"
msgstr ""

#: cdl.computation.base.HistogramParam:5
#: cdl.computation.image.threshold.ThresholdParam:11
#: guidata.dataset.datatypes.DataSet.create:3
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid "Number of bins\\.  Integer higher than 1\\. Default: 256."
msgstr ""

#: cdl.computation.base.HistogramParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid "Lower limit\\.  Default: None."
msgstr ""

#: cdl.computation.base.HistogramParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid "Upper limit\\.  Default: None."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`HistogramParam` with the fields set "
"to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:10 of
msgid "New instance of :py:class:`HistogramParam`."
msgstr ""

#: cdl.computation.base.HistogramParam.get_suffix:1 of
msgid "Return suffix for the histogram computation"
msgstr ""

#: cdl.computation.base.HistogramParam.get_suffix:3 of
msgid "data array"
msgstr ""

#: cdl.computation.base.FFTParam:1 of
msgid "FFT parameters"
msgstr ""

#: cdl.computation.base.FFTParam:5 guidata.dataset.datatypes.DataSet.create:3
#: of
msgid "Shift zero frequency to center\\. Default: None."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`FFTParam` with the fields set to the"
" given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:6 of
msgid "New instance of :py:class:`FFTParam`."
msgstr ""

#: cdl.computation.base.SpectrumParam:1 of
msgid "Spectrum parameters"
msgstr ""

#: cdl.computation.base.SpectrumParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid "Default: False."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`SpectrumParam` with the fields set "
"to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:6 of
msgid "New instance of :py:class:`SpectrumParam`."
msgstr ""

#: cdl.computation.base.ConstantParam:1 of
msgid "Parameter used to set a constant value to used in operations"
msgstr ""

#: cdl.computation.base.ConstantParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid "Constant value\\.  Default: None."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`ConstantParam` with the fields set "
"to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:6 of
msgid "New instance of :py:class:`ConstantParam`."
msgstr ""

#: cdl.computation.base.dst_11:1 of
msgid ""
"Create a result object, as returned by the callback function of the "
":func:`cdl.core.gui.processor.base.BaseProcessor.compute_11` method"
msgstr ""

#: cdl.computation.base.dst_11:4 of
msgid "source signal or image object"
msgstr ""

#: cdl.computation.base.dst_11:5 of
#, python-brace-format
msgid ""
"name of the function. If provided, the title of the result object will be"
" `{name}({src.short_id})|{suffix})`, unless the name is a single "
"character, in which case the title will be `{src.short_id}{name}{suffix}`"
" where `name` is an operator and `suffix` is the other term of the "
"operation."
msgstr ""

#: cdl.computation.base.dst_11:9 of
msgid "suffix to add to the title. Optional."
msgstr ""

#: cdl.computation.base.dst_11:11 of
msgid "Result signal or image object"
msgstr ""

#: cdl.computation.base.dst_n1n:1 of
msgid ""
"Create a result  object, as returned by the callback function of the "
":func:`cdl.core.gui.processor.base.BaseProcessor.compute_n1n` method"
msgstr ""

#: cdl.computation.base.dst_n1n:4 cdl.computation.base.dst_n1n:5
#: cdl.computation.base.new_signal_result:6 of
msgid "input signal or image object"
msgstr ""

#: cdl.computation.base.dst_n1n:6 cdl.computation.base.new_signal_result:7
#: cdl.computation.image.dst_11_signal:5 of
msgid "name of the processing function"
msgstr ""

#: cdl.computation.base.dst_n1n:8 of
msgid "Output signal or image object"
msgstr ""

#: cdl.computation.base.new_signal_result:1 of
msgid "Create new signal object as a result of a compute_11 function"
msgstr ""

#: cdl.computation.base.new_signal_result:3 of
msgid ""
"As opposed to the `dst_11` functions, this function creates a new signal "
"object without copying the original object metadata, except for the "
"\"source\" entry."
msgstr ""

#: cdl.computation.base.new_signal_result:8 of
msgid "suffix to add to the title"
msgstr ""

#: cdl.computation.base.new_signal_result:9 of
msgid "units of the output signal"
msgstr ""

#: cdl.computation.base.new_signal_result:10 of
msgid "labels of the output signal"
msgstr ""

#: cdl.computation.base.new_signal_result:12
#: cdl.computation.image.dst_11_signal:7 of
msgid "Output signal object"
msgstr ""

#: cdl.computation.base.calc_resultproperties:1 of
msgid ""
"Calculate result properties by executing a computation function on a "
"signal/image object."
msgstr ""

#: cdl.computation.base.calc_resultproperties:4 of
msgid "title of the result properties"
msgstr ""

#: cdl.computation.base.calc_resultproperties:5 of
msgid "signal or image object"
msgstr ""

#: cdl.computation.base.calc_resultproperties:6 of
msgid ""
"dictionary of labeled computation functions. The keys are the labels of "
"the computation functions and the values are the functions themselves "
"(each function must take a single argument - which is the data of the ROI"
" or the whole signal/image - and return a float)"
msgstr ""

#: cdl.computation.base.calc_resultproperties:11
#: cdl.computation.signal.compute_stats:5 of
msgid "Result properties object"
msgstr ""

#: cdl.computation:44 of
msgid "Signal processing features"
msgstr ""

#: cdl.computation.signal.restore_data_outside_roi:1 of
msgid ""
"Restore data outside the region of interest, after a computation, only if"
" the source signal has a ROI, if the data types are the same and if the "
"shapes are the same. Otherwise, do nothing."
msgstr ""

#: cdl.computation.signal.restore_data_outside_roi:5 of
msgid "destination signal object"
msgstr ""

#: cdl.computation.signal.restore_data_outside_roi:6 of
msgid "source signal object"
msgstr ""

#: cdl.computation.signal.Wrap11Func:1 of
msgid ""
"Wrap a 1 array â†’ 1 array function (the simple case of y1 = f(y0)) to "
"produce a 1 signal â†’ 1 signal function, which can be used inside "
"DataLab's infrastructure to perform computations with "
":class:`cdl.core.gui.processor.signal.SignalProcessor`."
msgstr ""

#: cdl.computation.image.Wrap11Func:5 cdl.computation.signal.Wrap11Func:5 of
msgid ""
"This wrapping mechanism using a class is necessary for the resulted "
"function to be pickable by the ``multiprocessing`` module."
msgstr ""

#: cdl.computation.signal.Wrap11Func:8 of
msgid ""
"The instance of this wrapper is callable and returns a "
":class:`cdl.obj.SignalObj` object."
msgstr ""

#: cdl.computation.image.Wrap11Func:12 cdl.computation.signal.Wrap11Func:12 of
msgid "Example"
msgstr ""

#: cdl.computation.image.Wrap11Func:23 cdl.computation.signal.Wrap11Func:24 of
msgid "1 array â†’ 1 array function"
msgstr ""

#: cdl.computation.image.Wrap11Func:24 cdl.computation.signal.Wrap11Func:25 of
msgid "Additional positional arguments to pass to the function"
msgstr ""

#: cdl.computation.image.Wrap11Func:25 cdl.computation.signal.Wrap11Func:26 of
msgid "Additional keyword arguments to pass to the function"
msgstr ""

#: cdl.computation.signal.compute_addition:1 of
msgid ""
"Add **dst** and **src** signals and return **dst** signal modified in "
"place"
msgstr ""

#: cdl.computation.signal.compute_addition:3
#: cdl.computation.signal.compute_product:3
#: cdl.computation.signal.compute_windowing:4 of
msgid "destination signal"
msgstr ""

#: cdl.computation.signal.compute_abs:3
#: cdl.computation.signal.compute_addition:4
#: cdl.computation.signal.compute_allan_deviation:3
#: cdl.computation.signal.compute_allan_variance:3
#: cdl.computation.signal.compute_astype:3
#: cdl.computation.signal.compute_bandwidth_3db:3
#: cdl.computation.signal.compute_calibration:3
#: cdl.computation.signal.compute_clip:3
#: cdl.computation.signal.compute_derivative:3
#: cdl.computation.signal.compute_detrending:3
#: cdl.computation.signal.compute_dynamic_parameters:11
#: cdl.computation.signal.compute_exp:3 cdl.computation.signal.compute_fft:3
#: cdl.computation.signal.compute_filter:4
#: cdl.computation.signal.compute_fw1e2:3 cdl.computation.signal.compute_fwhm:3
#: cdl.computation.signal.compute_gaussian_filter:3
#: cdl.computation.signal.compute_hadamard_variance:3
#: cdl.computation.signal.compute_histogram:3
#: cdl.computation.signal.compute_ifft:3 cdl.computation.signal.compute_im:3
#: cdl.computation.signal.compute_integral:3
#: cdl.computation.signal.compute_log10:3
#: cdl.computation.signal.compute_magnitude_spectrum:4
#: cdl.computation.signal.compute_modified_allan_variance:3
#: cdl.computation.signal.compute_moving_average:3
#: cdl.computation.signal.compute_moving_median:3
#: cdl.computation.signal.compute_normalize:3
#: cdl.computation.signal.compute_offset_correction:4
#: cdl.computation.signal.compute_overlapping_allan_variance:3
#: cdl.computation.signal.compute_peak_detection:3
#: cdl.computation.signal.compute_phase_spectrum:4
#: cdl.computation.signal.compute_power:3
#: cdl.computation.signal.compute_product:4
#: cdl.computation.signal.compute_psd:4 cdl.computation.signal.compute_re:3
#: cdl.computation.signal.compute_resampling:3
#: cdl.computation.signal.compute_reverse_x:3
#: cdl.computation.signal.compute_sampling_rate_period:7
#: cdl.computation.signal.compute_sqrt:3 cdl.computation.signal.compute_stats:3
#: cdl.computation.signal.compute_swap_axes:3
#: cdl.computation.signal.compute_time_deviation:3
#: cdl.computation.signal.compute_total_variance:3
#: cdl.computation.signal.compute_wiener:3
#: cdl.computation.signal.compute_windowing:5
#: cdl.computation.signal.extract_multiple_roi:3
#: cdl.computation.signal.extract_single_roi:3 of
msgid "source signal"
msgstr ""

#: cdl.computation.signal.compute_addition:6
#: cdl.computation.signal.compute_product:6 of
msgid "Modified **dst** signal (modified in place)"
msgstr ""

#: cdl.computation.signal.compute_product:1 of
msgid ""
"Multiply **dst** and **src** signals and return **dst** signal modified "
"in place"
msgstr ""

#: cdl.computation.signal.compute_addition_constant:1 of
msgid "Add **dst** and a constant value and return a the new result signal object"
msgstr ""

#: cdl.computation.signal.compute_addition_constant:3
#: cdl.computation.signal.compute_difference_constant:3
#: cdl.computation.signal.compute_division_constant:3
#: cdl.computation.signal.compute_product_constant:3 of
msgid "input signal object"
msgstr ""

#: cdl.computation.image.compute_addition_constant:4
#: cdl.computation.image.compute_difference_constant:4
#: cdl.computation.image.compute_division_constant:4
#: cdl.computation.image.compute_product_constant:4
#: cdl.computation.signal.compute_addition_constant:4
#: cdl.computation.signal.compute_difference_constant:4
#: cdl.computation.signal.compute_division_constant:4
#: cdl.computation.signal.compute_product_constant:4 of
msgid "constant value"
msgstr ""

#: cdl.computation.signal.compute_addition_constant:6 of
msgid "Result signal object **src** + **p.value** (new object)"
msgstr ""

#: cdl.computation.signal.compute_difference_constant:1 of
msgid "Subtract a constant value from a signal"
msgstr ""

#: cdl.computation.signal.compute_difference_constant:6 of
msgid "Result signal object **src** - **p.value** (new object)"
msgstr ""

#: cdl.computation.signal.compute_product_constant:1 of
msgid ""
"Multiply **dst** by a constant value and return the new result signal "
"object"
msgstr ""

#: cdl.computation.signal.compute_product_constant:6 of
msgid "Result signal object **src** * **p.value** (new object)"
msgstr ""

#: cdl.computation.signal.compute_division_constant:1 of
msgid "Divide a signal by a constant value"
msgstr ""

#: cdl.computation.signal.compute_division_constant:6 of
msgid "Result signal object **src** / **p.value** (new object)"
msgstr ""

#: cdl.computation.signal.compute_arithmetic:1 of
msgid "Perform arithmetic operation on two signals"
msgstr ""

#: cdl.computation.signal.compute_arithmetic:3
#: cdl.computation.signal.compute_convolution:4
#: cdl.computation.signal.compute_difference:7
#: cdl.computation.signal.compute_division:3
#: cdl.computation.signal.compute_interpolation:3
#: cdl.computation.signal.compute_quadratic_difference:7 of
msgid "source signal 1"
msgstr ""

#: cdl.computation.signal.compute_arithmetic:4
#: cdl.computation.signal.compute_convolution:5
#: cdl.computation.signal.compute_difference:8
#: cdl.computation.signal.compute_division:4
#: cdl.computation.signal.compute_interpolation:4
#: cdl.computation.signal.compute_quadratic_difference:8 of
msgid "source signal 2"
msgstr ""

#: cdl.computation.image.compute_astype:4
#: cdl.computation.image.compute_average_profile:4
#: cdl.computation.image.compute_binning:4
#: cdl.computation.image.compute_butterworth:4
#: cdl.computation.image.compute_clip:4 cdl.computation.image.compute_fft:4
#: cdl.computation.image.compute_gaussian_filter:4
#: cdl.computation.image.compute_histogram:4
#: cdl.computation.image.compute_hough_circle_peaks:5
#: cdl.computation.image.compute_ifft:4
#: cdl.computation.image.compute_line_profile:4
#: cdl.computation.image.compute_logp1:4
#: cdl.computation.image.compute_magnitude_spectrum:5
#: cdl.computation.image.compute_moving_average:4
#: cdl.computation.image.compute_moving_median:4
#: cdl.computation.image.compute_offset_correction:4
#: cdl.computation.image.compute_psd:5
#: cdl.computation.image.compute_radial_profile:5
#: cdl.computation.image.compute_resize:4
#: cdl.computation.image.compute_rotate:4
#: cdl.computation.image.compute_segment_profile:4
#: cdl.computation.image.detection.compute_blob_dog:5
#: cdl.computation.image.detection.compute_blob_doh:5
#: cdl.computation.image.detection.compute_blob_log:5
#: cdl.computation.image.detection.compute_blob_opencv:5
#: cdl.computation.image.detection.compute_peak_detection:5
#: cdl.computation.image.edges.compute_canny:4
#: cdl.computation.image.exposure.compute_adjust_gamma:4
#: cdl.computation.image.exposure.compute_adjust_log:4
#: cdl.computation.image.exposure.compute_adjust_sigmoid:4
#: cdl.computation.image.exposure.compute_equalize_adapthist:5
#: cdl.computation.image.exposure.compute_equalize_hist:4
#: cdl.computation.image.exposure.compute_rescale_intensity:5
#: cdl.computation.image.morphology.compute_black_tophat:4
#: cdl.computation.image.morphology.compute_closing:4
#: cdl.computation.image.morphology.compute_dilation:4
#: cdl.computation.image.morphology.compute_erosion:4
#: cdl.computation.image.morphology.compute_opening:4
#: cdl.computation.image.morphology.compute_white_tophat:4
#: cdl.computation.image.restoration.compute_denoise_bilateral:5
#: cdl.computation.image.restoration.compute_denoise_tophat:5
#: cdl.computation.image.restoration.compute_denoise_tv:5
#: cdl.computation.image.restoration.compute_denoise_wavelet:5
#: cdl.computation.image.threshold.compute_threshold:13
#: cdl.computation.signal.compute_allan_deviation:4
#: cdl.computation.signal.compute_allan_variance:4
#: cdl.computation.signal.compute_arithmetic:5
#: cdl.computation.signal.compute_astype:4
#: cdl.computation.signal.compute_calibration:4
#: cdl.computation.signal.compute_clip:4
#: cdl.computation.signal.compute_detrending:4
#: cdl.computation.signal.compute_dynamic_parameters:12
#: cdl.computation.signal.compute_fft:4 cdl.computation.signal.compute_filter:5
#: cdl.computation.signal.compute_fwhm:4
#: cdl.computation.signal.compute_gaussian_filter:4
#: cdl.computation.signal.compute_hadamard_variance:4
#: cdl.computation.signal.compute_histogram:4
#: cdl.computation.signal.compute_ifft:4
#: cdl.computation.signal.compute_interpolation:5
#: cdl.computation.signal.compute_magnitude_spectrum:5
#: cdl.computation.signal.compute_modified_allan_variance:4
#: cdl.computation.signal.compute_moving_average:4
#: cdl.computation.signal.compute_moving_median:4
#: cdl.computation.signal.compute_normalize:4
#: cdl.computation.signal.compute_offset_correction:5
#: cdl.computation.signal.compute_overlapping_allan_variance:4
#: cdl.computation.signal.compute_peak_detection:4
#: cdl.computation.signal.compute_power:4 cdl.computation.signal.compute_psd:5
#: cdl.computation.signal.compute_resampling:4
#: cdl.computation.signal.compute_time_deviation:4
#: cdl.computation.signal.compute_total_variance:4 of
msgid "parameters"
msgstr ""

#: cdl.computation.signal.compute_abs:5
#: cdl.computation.signal.compute_allan_deviation:6
#: cdl.computation.signal.compute_allan_variance:6
#: cdl.computation.signal.compute_arithmetic:7
#: cdl.computation.signal.compute_astype:6
#: cdl.computation.signal.compute_calibration:6
#: cdl.computation.signal.compute_clip:6
#: cdl.computation.signal.compute_convolution:7
#: cdl.computation.signal.compute_derivative:5
#: cdl.computation.signal.compute_detrending:6
#: cdl.computation.signal.compute_exp:5 cdl.computation.signal.compute_fft:6
#: cdl.computation.signal.compute_filter:7
#: cdl.computation.signal.compute_gaussian_filter:6
#: cdl.computation.signal.compute_hadamard_variance:6
#: cdl.computation.signal.compute_histogram:6
#: cdl.computation.signal.compute_ifft:6 cdl.computation.signal.compute_im:5
#: cdl.computation.signal.compute_integral:5
#: cdl.computation.signal.compute_interpolation:7
#: cdl.computation.signal.compute_log10:5
#: cdl.computation.signal.compute_magnitude_spectrum:7
#: cdl.computation.signal.compute_modified_allan_variance:6
#: cdl.computation.signal.compute_moving_average:6
#: cdl.computation.signal.compute_moving_median:6
#: cdl.computation.signal.compute_normalize:6
#: cdl.computation.signal.compute_offset_correction:7
#: cdl.computation.signal.compute_overlapping_allan_variance:6
#: cdl.computation.signal.compute_peak_detection:6
#: cdl.computation.signal.compute_phase_spectrum:6
#: cdl.computation.signal.compute_power:6 cdl.computation.signal.compute_psd:7
#: cdl.computation.signal.compute_re:5
#: cdl.computation.signal.compute_resampling:6
#: cdl.computation.signal.compute_reverse_x:5
#: cdl.computation.signal.compute_sqrt:5
#: cdl.computation.signal.compute_swap_axes:5
#: cdl.computation.signal.compute_time_deviation:6
#: cdl.computation.signal.compute_total_variance:6
#: cdl.computation.signal.compute_wiener:5
#: cdl.computation.signal.compute_windowing:7 of
msgid "Result signal object"
msgstr ""

#: cdl.computation.signal.compute_difference:1 of
msgid "Compute difference between two signals"
msgstr ""

#: cdl.computation.signal.compute_difference:5
#: cdl.computation.signal.compute_quadratic_difference:5 of
msgid "If uncertainty is available, it is propagated."
msgstr ""

#: cdl.computation.signal.compute_difference:10 of
msgid "Result signal object **src1** - **src2**"
msgstr ""

#: cdl.computation.signal.compute_quadratic_difference:1 of
msgid "Compute quadratic difference between two signals"
msgstr ""

#: cdl.computation.signal.compute_quadratic_difference:10 of
msgid "Result signal object (**src1** - **src2**) / sqrt(2.0)"
msgstr ""

#: cdl.computation.signal.compute_division:1 of
msgid "Compute division between two signals"
msgstr ""

#: cdl.computation.signal.compute_division:6 of
msgid "Result signal object **src1** / **src2**"
msgstr ""

#: cdl.computation.image.extract_multiple_roi:1
#: cdl.computation.signal.extract_multiple_roi:1 of
msgid "Extract multiple regions of interest from data"
msgstr ""

#: cdl.computation.signal.extract_multiple_roi:4 of
msgid "group of parameters"
msgstr ""

#: cdl.computation.signal.extract_multiple_roi:6 of
msgid "Signal with multiple regions of interest"
msgstr ""

#: cdl.computation.signal.extract_single_roi:1 of
msgid "Extract single region of interest from data"
msgstr ""

#: cdl.computation.image.extract_single_roi:4
#: cdl.computation.signal.extract_single_roi:4 of
msgid "ROI parameters"
msgstr ""

#: cdl.computation.signal.extract_single_roi:6 of
msgid "Signal with single region of interest"
msgstr ""

#: cdl.computation.signal.compute_swap_axes:1 of
msgid "Swap axes"
msgstr ""

#: cdl.computation.image.compute_abs:1 cdl.computation.signal.compute_abs:1 of
msgid "Compute absolute value with :py:data:`numpy.absolute`"
msgstr ""

#: cdl.computation.image.compute_re:1 cdl.computation.signal.compute_re:1 of
msgid "Compute real part with :py:func:`numpy.real`"
msgstr ""

#: cdl.computation.image.compute_im:1 cdl.computation.signal.compute_im:1 of
msgid "Compute imaginary part with :py:func:`numpy.imag`"
msgstr ""

#: cdl.computation.signal.DataTypeSParam:1 of
msgid "Convert signal data type parameters"
msgstr ""

#: cdl.computation.signal.DataTypeSParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Destination data type\\. Output image data type. Single choice from: "
"'float32', 'float64', 'complex128'. Default: 'float32'."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`DataTypeSParam` with the fields set "
"to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:6 of
msgid "New instance of :py:class:`DataTypeSParam`."
msgstr ""

#: cdl.computation.signal.compute_astype:1 of
msgid "Convert data type with :py:func:`numpy.astype`"
msgstr ""

#: cdl.computation.signal.compute_log10:1 of
msgid "Compute Log10 with :py:data:`numpy.log10`"
msgstr ""

#: cdl.computation.image.compute_exp:1 cdl.computation.signal.compute_exp:1 of
msgid "Compute exponential with :py:data:`numpy.exp`"
msgstr ""

#: cdl.computation.signal.compute_sqrt:1 of
msgid "Compute square root with :py:data:`numpy.sqrt`"
msgstr ""

#: cdl.computation.signal.PowerParam:1 of
msgid "Power parameters"
msgstr ""

#: cdl.computation.signal.PowerParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid "Default: 2.0."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`PowerParam` with the fields set to "
"the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:6 of
msgid "New instance of :py:class:`PowerParam`."
msgstr ""

#: cdl.computation.signal.compute_power:1 of
msgid "Compute power with :py:data:`numpy.power`"
msgstr ""

#: cdl.computation.image.detection.Peak2DDetectionParam:1
#: cdl.computation.signal.PeakDetectionParam:1 of
msgid "Peak detection parameters"
msgstr ""

#: cdl.computation.signal.PeakDetectionParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid "Integer between 0 and 100, unit: %\\. Default: 30."
msgstr ""

#: cdl.computation.signal.PeakDetectionParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid "Minimum distance\\.  Integer higher than 1, unit: points\\. Default: 1."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`PeakDetectionParam` with the fields "
"set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:8 of
msgid "New instance of :py:class:`PeakDetectionParam`."
msgstr ""

#: cdl.computation.signal.compute_peak_detection:1 of
msgid "Peak detection with :py:func:`cdl.algorithms.signal.peak_indices`"
msgstr ""

#: cdl.computation.signal.compute_normalize:1 of
msgid "Normalize data with :py:func:`cdl.algorithms.signal.normalize`"
msgstr ""

#: cdl.computation.signal.compute_derivative:1 of
msgid "Compute derivative with :py:func:`numpy.gradient`"
msgstr ""

#: cdl.computation.signal.compute_integral:1 of
msgid "Compute integral with :py:func:`scipy.integrate.cumulative_trapezoid`"
msgstr ""

#: cdl.computation.signal.XYCalibrateParam:1 of
msgid "Signal calibration parameters"
msgstr ""

#: cdl.computation.signal.XYCalibrateParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid "Calibrate\\.  Single choice from: 'x', 'y'. Default: 'y'."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`XYCalibrateParam` with the fields "
"set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:10 of
msgid "New instance of :py:class:`XYCalibrateParam`."
msgstr ""

#: cdl.computation.image.compute_calibration:1
#: cdl.computation.signal.compute_calibration:1 of
msgid "Compute linear calibration"
msgstr ""

#: cdl.computation.signal.compute_clip:1 of
msgid "Compute maximum data clipping with :py:func:`numpy.clip`"
msgstr ""

#: cdl.computation.signal.compute_offset_correction:1 of
msgid ""
"Correct offset: subtract the mean value of the signal in the specified "
"range (baseline correction)"
msgstr ""

#: cdl.computation.image.compute_gaussian_filter:1
#: cdl.computation.signal.compute_gaussian_filter:1 of
msgid "Compute gaussian filter with :py:func:`scipy.ndimage.gaussian_filter`"
msgstr ""

#: cdl.computation.image.compute_moving_average:1
#: cdl.computation.signal.compute_moving_average:1 of
msgid "Compute moving average with :py:func:`scipy.ndimage.uniform_filter`"
msgstr ""

#: cdl.computation.image.compute_moving_median:1
#: cdl.computation.signal.compute_moving_median:1 of
msgid "Compute moving median with :py:func:`scipy.ndimage.median_filter`"
msgstr ""

#: cdl.computation.image.compute_wiener:1
#: cdl.computation.signal.compute_wiener:1 of
msgid "Compute Wiener filter with :py:func:`scipy.signal.wiener`"
msgstr ""

#: cdl.computation.signal.FilterType:1 of
msgid "Filter types"
msgstr ""

#: cdl.computation.signal.BaseHighLowBandParam:1 of
msgid "Base class for high-pass, low-pass, band-pass and band-stop filters"
msgstr ""

#: cdl.computation.signal.BandPassFilterParam:5
#: cdl.computation.signal.BandStopFilterParam:5
#: cdl.computation.signal.BaseHighLowBandParam:5
#: cdl.computation.signal.HighPassFilterParam:5
#: cdl.computation.signal.LowPassFilterParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Filter method\\.  Single choice from: 'bessel', 'butter', 'cheby1', "
"'cheby2', 'ellip'. Default: 'bessel'."
msgstr ""

#: cdl.computation.signal.BandPassFilterParam:11
#: cdl.computation.signal.BandStopFilterParam:11
#: cdl.computation.signal.BaseHighLowBandParam:11
#: cdl.computation.signal.HighPassFilterParam:11
#: cdl.computation.signal.LowPassFilterParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid "Filter order\\.  Integer higher than 1\\. Default: 3."
msgstr ""

#: cdl.computation.signal.BandPassFilterParam:17
#: cdl.computation.signal.BandStopFilterParam:17
#: cdl.computation.signal.BaseHighLowBandParam:17
#: cdl.computation.signal.HighPassFilterParam:17
#: cdl.computation.signal.LowPassFilterParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid ""
"Low cutoff frequency\\.  Float higher than 0, non zero, unit: hz\\. "
"Default: None."
msgstr ""

#: cdl.computation.signal.BandPassFilterParam:23
#: cdl.computation.signal.BandStopFilterParam:23
#: cdl.computation.signal.BaseHighLowBandParam:23
#: cdl.computation.signal.HighPassFilterParam:23
#: cdl.computation.signal.LowPassFilterParam:23
#: guidata.dataset.datatypes.DataSet.create:9 of
msgid ""
"High cutoff frequency\\.  Float higher than 0, non zero, unit: hz\\. "
"Default: None."
msgstr ""

#: cdl.computation.signal.BandPassFilterParam:29
#: cdl.computation.signal.BandStopFilterParam:29
#: cdl.computation.signal.BaseHighLowBandParam:29
#: cdl.computation.signal.HighPassFilterParam:29
#: cdl.computation.signal.LowPassFilterParam:29
#: guidata.dataset.datatypes.DataSet.create:11 of
msgid "Passband ripple\\.  Float higher than 0, non zero, unit: db\\. Default: 1."
msgstr ""

#: cdl.computation.signal.BandPassFilterParam:35
#: cdl.computation.signal.BandStopFilterParam:35
#: cdl.computation.signal.BaseHighLowBandParam:35
#: cdl.computation.signal.HighPassFilterParam:35
#: cdl.computation.signal.LowPassFilterParam:35
#: guidata.dataset.datatypes.DataSet.create:13 of
msgid ""
"Stopband attenuation\\.  Float higher than 0, non zero, unit: db\\. "
"Default: 1."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`BaseHighLowBandParam` with the "
"fields set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:16 of
msgid "New instance of :py:class:`BaseHighLowBandParam`."
msgstr ""

#: cdl.computation.signal.BaseHighLowBandParam.get_nyquist_frequency:1 of
msgid "Return the Nyquist frequency of a signal object"
msgstr ""

#: cdl.computation.signal.BaseHighLowBandParam.get_filter_params:4
#: cdl.computation.signal.BaseHighLowBandParam.get_nyquist_frequency:3
#: cdl.computation.signal.BaseHighLowBandParam.update_from_signal:3 of
msgid "signal object"
msgstr ""

#: cdl.computation.signal.BaseHighLowBandParam.update_from_signal:1 of
msgid "Update the filter parameters from a signal object"
msgstr ""

#: cdl.computation.signal.BaseHighLowBandParam.get_filter_params:1 of
msgid ""
"Return the filter parameters (a and b) as a tuple. These parameters are "
"used in the scipy.signal filter functions (eg. `scipy.signal.filtfilt`)."
msgstr ""

#: cdl.computation.signal.BaseHighLowBandParam.get_filter_params:6 of
msgid "filter parameters"
msgstr ""

#: cdl.computation of
msgid "Return type"
msgstr ""

#: cdl.computation.signal.LowPassFilterParam:1 of
msgid "Low-pass filter parameters"
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`LowPassFilterParam` with the fields "
"set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:16 of
msgid "New instance of :py:class:`LowPassFilterParam`."
msgstr ""

#: cdl.computation.signal.HighPassFilterParam:1 of
msgid "High-pass filter parameters"
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`HighPassFilterParam` with the fields"
" set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:16 of
msgid "New instance of :py:class:`HighPassFilterParam`."
msgstr ""

#: cdl.computation.signal.BandPassFilterParam:1 of
msgid "Band-pass filter parameters"
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`BandPassFilterParam` with the fields"
" set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:16 of
msgid "New instance of :py:class:`BandPassFilterParam`."
msgstr ""

#: cdl.computation.signal.BandStopFilterParam:1 of
msgid "Band-stop filter parameters"
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`BandStopFilterParam` with the fields"
" set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:16 of
msgid "New instance of :py:class:`BandStopFilterParam`."
msgstr ""

#: cdl.computation.signal.compute_filter:1 of
msgid ""
"Compute frequency filter (low-pass, high-pass, band-pass, band-stop), "
"with :py:func:`scipy.signal.filtfilt`"
msgstr ""

#: cdl.computation.signal.compute_fft:1 of
msgid "Compute FFT with :py:func:`cdl.algorithms.signal.fft1d`"
msgstr ""

#: cdl.computation.signal.compute_ifft:1 of
msgid "Compute iFFT with :py:func:`cdl.algorithms.signal.ifft1d`"
msgstr ""

#: cdl.computation.signal.compute_magnitude_spectrum:1 of
msgid ""
"Compute magnitude spectrum with "
":py:func:`cdl.algorithms.signal.magnitude_spectrum`"
msgstr ""

#: cdl.computation.signal.compute_phase_spectrum:1 of
msgid ""
"Compute phase spectrum with "
":py:func:`cdl.algorithms.signal.phase_spectrum`"
msgstr ""

#: cdl.computation.signal.compute_psd:1 of
msgid "Compute power spectral density with :py:func:`cdl.algorithms.signal.psd`"
msgstr ""

#: cdl.computation.signal.PolynomialFitParam:1 of
msgid "Polynomial fitting parameters"
msgstr ""

#: cdl.computation.signal.PolynomialFitParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid "Integer between 1 and 10\\. Default: 3."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`PolynomialFitParam` with the fields "
"set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:6 of
msgid "New instance of :py:class:`PolynomialFitParam`."
msgstr ""

#: cdl.computation.signal.compute_histogram:1 of
msgid "Compute histogram with :py:func:`numpy.histogram`"
msgstr ""

#: cdl.computation.signal.InterpolationParam:1 of
msgid "Interpolation parameters"
msgstr ""

#: cdl.computation.signal.InterpolationParam:5
#: cdl.computation.signal.ResamplingParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Interpolation method\\.  Single choice from: 'linear', 'spline', "
"'quadratic', 'cubic', 'barycentric', 'pchip'. Default: 'linear'."
msgstr ""

#: cdl.computation.signal.InterpolationParam:11
#: cdl.computation.signal.ResamplingParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid ""
"Value to use for points outside the interpolation domain (used only with "
"linear, cubic and pchip methods). Default: None."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`InterpolationParam` with the fields "
"set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:8 of
msgid "New instance of :py:class:`InterpolationParam`."
msgstr ""

#: cdl.computation.signal.compute_interpolation:1 of
msgid "Interpolate data with :py:func:`cdl.algorithms.signal.interpolate`"
msgstr ""

#: cdl.computation.signal.ResamplingParam:1 of
msgid "Resample parameters"
msgstr ""

#: cdl.computation.signal.ResamplingParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid "X\\ :subscript:`min`\\.  Default: None."
msgstr ""

#: cdl.computation.signal.ResamplingParam:23
#: guidata.dataset.datatypes.DataSet.create:9 of
msgid "X\\ :subscript:`max`\\.  Default: None."
msgstr ""

#: cdl.computation.signal.ResamplingParam:29
#: guidata.dataset.datatypes.DataSet.create:11 of
msgid "Single choice from: 'dx', 'nbpts'. Default: 'nbpts'."
msgstr ""

#: cdl.computation.signal.ResamplingParam:35
#: guidata.dataset.datatypes.DataSet.create:13 of
msgid "Î”X\\.  Default: None."
msgstr ""

#: cdl.computation.signal.ResamplingParam:41
#: guidata.dataset.datatypes.DataSet.create:15 of
msgid "Number of points\\.  Default: None."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`ResamplingParam` with the fields set"
" to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:18 of
msgid "New instance of :py:class:`ResamplingParam`."
msgstr ""

#: cdl.computation.signal.compute_resampling:1 of
msgid "Resample data with :py:func:`cdl.algorithms.signal.interpolate`"
msgstr ""

#: cdl.computation.signal.DetrendingParam:1 of
msgid "Detrending parameters"
msgstr ""

#: cdl.computation.signal.DetrendingParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Detrending method\\.  Single choice from: 'linear', 'constant'. Default: "
"'linear'."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`DetrendingParam` with the fields set"
" to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:6 of
msgid "New instance of :py:class:`DetrendingParam`."
msgstr ""

#: cdl.computation.signal.compute_detrending:1 of
msgid "Detrend data with :py:func:`scipy.signal.detrend`"
msgstr ""

#: cdl.computation.signal.compute_convolution:1 of
msgid "Compute convolution of two signals with :py:func:`scipy.signal.convolve`"
msgstr ""

#: cdl.computation.signal.WindowingParam:1 of
msgid "Windowing parameters"
msgstr ""

#: cdl.computation.signal.WindowingParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Single choice from: 'barthann', 'bartlett', 'blackman', 'blackman-"
"harris', 'bohman', 'boxcar', 'cosine', 'exponential', 'flat-top', "
"'gaussian', 'hamming', 'hanning', 'kaiser', 'lanczos', 'nuttall', "
"'parzen', 'rectangular', 'taylor', 'tukey'. Default: 'hamming'."
msgstr ""

#: cdl.computation.signal.WindowingParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid "Shape parameter of the tukey windowing function\\. Default: 0.5."
msgstr ""

#: cdl.computation.signal.WindowingParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid "Shape parameter of the kaiser windowing function\\. Default: 14.0."
msgstr ""

#: cdl.computation.signal.WindowingParam:23
#: guidata.dataset.datatypes.DataSet.create:9 of
msgid "Shape parameter of the gaussian windowing function\\. Default: 0.5."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`WindowingParam` with the fields set "
"to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:12 of
msgid "New instance of :py:class:`WindowingParam`."
msgstr ""

#: cdl.computation.signal.compute_windowing:1 of
msgid ""
"Compute windowing (available methods: hamming, hanning, bartlett, "
"blackman, tukey, rectangular) with "
":py:func:`cdl.algorithms.signal.windowing`"
msgstr ""

#: cdl.computation.signal.compute_reverse_x:1 of
msgid "Reverse x-axis"
msgstr ""

#: cdl.computation.signal.AllanVarianceParam:1 of
msgid "Allan variance parameters"
msgstr ""

#: cdl.computation.signal.AllanVarianceParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid "Max Ï„\\.  Integer higher than 1, unit: pts\\. Default: 100."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`AllanVarianceParam` with the fields "
"set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:6 of
msgid "New instance of :py:class:`AllanVarianceParam`."
msgstr ""

#: cdl.computation.signal.compute_allan_variance:1 of
msgid ""
"Compute Allan variance with "
":py:func:`cdl.algorithms.signal.allan_variance`"
msgstr ""

#: cdl.computation.signal.compute_allan_deviation:1 of
msgid ""
"Compute Allan deviation with "
":py:func:`cdl.algorithms.signal.allan_deviation`"
msgstr ""

#: cdl.computation.signal.compute_overlapping_allan_variance:1 of
msgid "Compute Overlapping Allan variance."
msgstr ""

#: cdl.computation.signal.compute_modified_allan_variance:1 of
msgid "Compute Modified Allan variance."
msgstr ""

#: cdl.computation.signal.compute_hadamard_variance:1 of
msgid "Compute Hadamard variance."
msgstr ""

#: cdl.computation.signal.compute_total_variance:1 of
msgid "Compute Total variance."
msgstr ""

#: cdl.computation.signal.compute_time_deviation:1 of
msgid "Compute Time Deviation (TDEV)."
msgstr ""

#: cdl.computation.signal.calc_resultshape:1 of
msgid ""
"Calculate result shape by executing a computation function on a signal "
"object, taking into account the signal ROIs."
msgstr ""

#: cdl.computation.image.calc_resultshape:4
#: cdl.computation.signal.calc_resultshape:4 of
msgid "result title"
msgstr ""

#: cdl.computation.image.calc_resultshape:5
#: cdl.computation.signal.calc_resultshape:5 of
msgid "result shape kind"
msgstr ""

#: cdl.computation.image.calc_resultshape:6 cdl.computation.image.compute_abs:3
#: cdl.computation.image.compute_addition:4
#: cdl.computation.image.compute_addition_constant:3
#: cdl.computation.image.compute_arithmetic:3
#: cdl.computation.image.compute_arithmetic:4
#: cdl.computation.image.compute_astype:3
#: cdl.computation.image.compute_average_profile:3
#: cdl.computation.image.compute_binning:3
#: cdl.computation.image.compute_butterworth:3
#: cdl.computation.image.compute_calibration:3
#: cdl.computation.image.compute_clip:3
#: cdl.computation.image.compute_difference:3
#: cdl.computation.image.compute_difference:4
#: cdl.computation.image.compute_difference_constant:3
#: cdl.computation.image.compute_division:3
#: cdl.computation.image.compute_division:4
#: cdl.computation.image.compute_division_constant:3
#: cdl.computation.image.compute_exp:3 cdl.computation.image.compute_fft:3
#: cdl.computation.image.compute_fliph:3 cdl.computation.image.compute_flipv:3
#: cdl.computation.image.compute_gaussian_filter:3
#: cdl.computation.image.compute_histogram:3
#: cdl.computation.image.compute_ifft:3 cdl.computation.image.compute_im:3
#: cdl.computation.image.compute_line_profile:3
#: cdl.computation.image.compute_log10:3 cdl.computation.image.compute_logp1:3
#: cdl.computation.image.compute_magnitude_spectrum:4
#: cdl.computation.image.compute_moving_average:3
#: cdl.computation.image.compute_moving_median:3
#: cdl.computation.image.compute_normalize:4
#: cdl.computation.image.compute_offset_correction:3
#: cdl.computation.image.compute_phase_spectrum:4
#: cdl.computation.image.compute_product:4
#: cdl.computation.image.compute_product_constant:3
#: cdl.computation.image.compute_psd:4
#: cdl.computation.image.compute_quadratic_difference:3
#: cdl.computation.image.compute_quadratic_difference:4
#: cdl.computation.image.compute_radial_profile:4
#: cdl.computation.image.compute_re:3 cdl.computation.image.compute_resize:3
#: cdl.computation.image.compute_rotate:3
#: cdl.computation.image.compute_rotate270:3
#: cdl.computation.image.compute_rotate90:3
#: cdl.computation.image.compute_segment_profile:3
#: cdl.computation.image.compute_stats:3
#: cdl.computation.image.compute_swap_axes:3
#: cdl.computation.image.compute_wiener:3 cdl.computation.image.dst_11_signal:4
#: cdl.computation.image.edges.compute_canny:3
#: cdl.computation.image.edges.compute_farid:3
#: cdl.computation.image.edges.compute_farid_h:3
#: cdl.computation.image.edges.compute_farid_v:3
#: cdl.computation.image.edges.compute_laplace:3
#: cdl.computation.image.edges.compute_prewitt:3
#: cdl.computation.image.edges.compute_prewitt_h:3
#: cdl.computation.image.edges.compute_prewitt_v:3
#: cdl.computation.image.edges.compute_roberts:3
#: cdl.computation.image.edges.compute_scharr:3
#: cdl.computation.image.edges.compute_scharr_h:3
#: cdl.computation.image.edges.compute_scharr_v:3
#: cdl.computation.image.edges.compute_sobel:3
#: cdl.computation.image.edges.compute_sobel_h:3
#: cdl.computation.image.edges.compute_sobel_v:3
#: cdl.computation.image.exposure.compute_adjust_gamma:3
#: cdl.computation.image.exposure.compute_adjust_log:3
#: cdl.computation.image.exposure.compute_adjust_sigmoid:3
#: cdl.computation.image.exposure.compute_equalize_adapthist:4
#: cdl.computation.image.exposure.compute_equalize_hist:3
#: cdl.computation.image.exposure.compute_rescale_intensity:4
#: cdl.computation.image.extract_multiple_roi:3
#: cdl.computation.image.extract_single_roi:3
#: cdl.computation.image.morphology.compute_black_tophat:3
#: cdl.computation.image.morphology.compute_closing:3
#: cdl.computation.image.morphology.compute_dilation:3
#: cdl.computation.image.morphology.compute_erosion:3
#: cdl.computation.image.morphology.compute_opening:3
#: cdl.computation.image.morphology.compute_white_tophat:3
#: cdl.computation.image.restoration.compute_denoise_bilateral:4
#: cdl.computation.image.restoration.compute_denoise_tophat:4
#: cdl.computation.image.restoration.compute_denoise_tv:4
#: cdl.computation.image.restoration.compute_denoise_wavelet:4
#: cdl.computation.image.restore_data_outside_roi:7
#: cdl.computation.image.threshold.compute_threshold:12
#: cdl.computation.image.threshold.compute_threshold_isodata:4
#: cdl.computation.image.threshold.compute_threshold_li:4
#: cdl.computation.image.threshold.compute_threshold_mean:4
#: cdl.computation.image.threshold.compute_threshold_minimum:4
#: cdl.computation.image.threshold.compute_threshold_otsu:4
#: cdl.computation.image.threshold.compute_threshold_triangle:4
#: cdl.computation.image.threshold.compute_threshold_yen:4
#: cdl.computation.signal.calc_resultshape:6 of
msgid "input image object"
msgstr ""

#: cdl.computation.image.calc_resultshape:7
#: cdl.computation.signal.calc_resultshape:7 of
msgid "computation function"
msgstr ""

#: cdl.computation.image.calc_resultshape:8
#: cdl.computation.signal.calc_resultshape:8 of
msgid "computation function arguments"
msgstr ""

#: cdl.computation.image.calc_resultshape:9
#: cdl.computation.signal.calc_resultshape:9 of
msgid ""
"if True, add a label item (and the geometrical shape) to plot (default to"
" False)"
msgstr ""

#: cdl.computation.image.calc_resultshape:12
#: cdl.computation.signal.calc_resultshape:12 of
msgid "Result shape object or None if no result is found"
msgstr ""

#: cdl.computation.image.calc_resultshape:16
#: cdl.computation.signal.calc_resultshape:16 of
msgid ""
"The computation function must take either a single argument (the data) or"
" multiple arguments (the data followed by the computation parameters)."
msgstr ""

#: cdl.computation.signal.calc_resultshape:19 of
msgid ""
"Moreover, the computation function must return a 1D NumPy array (or a "
"list, or a tuple) containing the result of the computation."
msgstr ""

#: cdl.computation.signal.FWHMParam:1 of
msgid "FWHM parameters"
msgstr ""

#: cdl.computation.signal.FWHMParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Single choice from: 'zero-crossing', 'gauss', 'lorentz', 'voigt'. "
"Default: 'zero-crossing'."
msgstr ""

#: cdl.computation.signal.FWHMParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid ""
"X\\ :subscript:`MIN`\\. Lower x boundary (empty for no limit, i.e. Start "
"of the signal)\\. Default: None."
msgstr ""

#: cdl.computation.signal.FWHMParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid ""
"X\\ :subscript:`MAX`\\. Upper x boundary (empty for no limit, i.e. End of"
" the signal)\\. Default: None."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`FWHMParam` with the fields set to "
"the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:10 of
msgid "New instance of :py:class:`FWHMParam`."
msgstr ""

#: cdl.computation.signal.compute_fwhm:1 of
msgid "Compute FWHM with :py:func:`cdl.algorithms.signal.fwhm`"
msgstr ""

#: cdl.computation.signal.compute_fw1e2:5 cdl.computation.signal.compute_fwhm:6
#: of
msgid "Segment coordinates"
msgstr ""

#: cdl.computation.signal.compute_fw1e2:1 of
msgid "Compute FW at 1/eÂ² with :py:func:`cdl.algorithms.signal.fw1e2`"
msgstr ""

#: cdl.computation.signal.FindAbscissaParam:1 of
msgid "Parameter dataset for abscissa finding"
msgstr ""

#: cdl.computation.signal.FindAbscissaParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid "Ordinate\\.  Default: 0."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`FindAbscissaParam` with the fields "
"set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:6 of
msgid "New instance of :py:class:`FindAbscissaParam`."
msgstr ""

#: cdl.computation.signal.compute_x_at_y:1 of
msgid "Compute the smallest x-value at a given y-value for a signal object."
msgstr ""

#: cdl.computation.signal.compute_x_at_y:3 of
msgid "The signal object containing x and y data."
msgstr ""

#: cdl.computation.signal.compute_x_at_y:4 of
msgid "The parameter dataset for finding the abscissa."
msgstr ""

#: cdl.computation.signal.compute_x_at_y:6 of
msgid "An object containing the x-value."
msgstr ""

#: cdl.computation.signal.compute_stats:1 of
msgid "Compute statistics on a signal"
msgstr ""

#: cdl.computation.signal.compute_bandwidth_3db:1 of
msgid "Compute bandwidth at -3 dB with :py:func:`cdl.algorithms.signal.bandwidth`"
msgstr ""

#: cdl.computation.signal.compute_bandwidth_3db:5 of
msgid "Result properties with bandwidth"
msgstr ""

#: cdl.computation.signal.DynamicParam:1 of
msgid "Parameters for dynamic range computation (ENOB, SNR, SINAD, THD, SFDR)"
msgstr ""

#: cdl.computation.signal.DynamicParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid "Float higher than 0.0, unit: v\\. Default: 0.16."
msgstr ""

#: cdl.computation.signal.DynamicParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid "Unit for sinad\\. Single choice from: 'dBc', 'dBFS'. Default: 'dBc'."
msgstr ""

#: cdl.computation.signal.DynamicParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid ""
"Number of harmonics\\. Number of harmonics to consider for thd\\. Integer"
" higher than 1\\. Default: 5."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`DynamicParam` with the fields set to"
" the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:10 of
msgid "New instance of :py:class:`DynamicParam`."
msgstr ""

#: cdl.computation.signal.compute_dynamic_parameters:1 of
msgid "Compute Dynamic parameters using the following functions:"
msgstr ""

#: cdl.computation.signal.compute_dynamic_parameters:4 of
msgid "Freq: :py:func:`cdl.algorithms.signal.sinus_frequency`"
msgstr ""

#: cdl.computation.signal.compute_dynamic_parameters:5 of
msgid "ENOB: :py:func:`cdl.algorithms.signal.enob`"
msgstr ""

#: cdl.computation.signal.compute_dynamic_parameters:6 of
msgid "SNR: :py:func:`cdl.algorithms.signal.snr`"
msgstr ""

#: cdl.computation.signal.compute_dynamic_parameters:7 of
msgid "SINAD: :py:func:`cdl.algorithms.signal.sinad`"
msgstr ""

#: cdl.computation.signal.compute_dynamic_parameters:8 of
msgid "THD: :py:func:`cdl.algorithms.signal.thd`"
msgstr ""

#: cdl.computation.signal.compute_dynamic_parameters:9 of
msgid "SFDR: :py:func:`cdl.algorithms.signal.sfdr`"
msgstr ""

#: cdl.computation.signal.compute_dynamic_parameters:14 of
msgid "Result properties with ENOB, SNR, SINAD, THD, SFDR"
msgstr ""

#: cdl.computation.signal.compute_sampling_rate_period:1 of
msgid "Compute sampling rate and period using the following functions:"
msgstr ""

#: cdl.computation.signal.compute_sampling_rate_period:4 of
msgid "fs: :py:func:`cdl.algorithms.signal.sampling_rate`"
msgstr ""

#: cdl.computation.signal.compute_sampling_rate_period:5 of
msgid "T: :py:func:`cdl.algorithms.signal.sampling_period`"
msgstr ""

#: cdl.computation.signal.compute_sampling_rate_period:9 of
msgid "Result properties with sampling rate and period"
msgstr ""

#: cdl.computation.signal.compute_contrast:1 of
msgid "Compute contrast with :py:func:`cdl.algorithms.signal.contrast`"
msgstr ""

#: cdl.computation.signal.compute_x_at_minmax:1 of
msgid ""
"Compute the smallest argument at the minima and the smallest argument at "
"the maxima."
msgstr ""

#: cdl.computation.signal.compute_x_at_minmax:3 of
msgid "The signal object."
msgstr ""

#: cdl.computation.signal.compute_x_at_minmax:5 of
msgid "An object containing the x-values at the minima and the maxima."
msgstr ""

#: cdl.computation:50 of
msgid "Image processing features"
msgstr ""

#: cdl.computation:53 of
msgid "Base image processing features"
msgstr ""

#: cdl.computation.image.restore_data_outside_roi:1 of
msgid ""
"Restore data outside the Region Of Interest (ROI) of the input image "
"after a computation, only if the input image has a ROI, if the data types"
" are compatible, and if the shapes are the same. Otherwise, do nothing."
msgstr ""

#: cdl.computation.image.compute_addition:3
#: cdl.computation.image.compute_product:3
#: cdl.computation.image.restore_data_outside_roi:6 of
msgid "output image object"
msgstr ""

#: cdl.computation.image.Wrap11Func:1 of
msgid ""
"Wrap a 1 array â†’ 1 array function to produce a 1 image â†’ 1 image "
"function, which can be used inside DataLab's infrastructure to perform "
"computations with :class:`cdl.core.gui.processor.image.ImageProcessor`."
msgstr ""

#: cdl.computation.image.Wrap11Func:8 of
msgid ""
"The instance of this wrapper is callable and returns a "
":class:`cdl.obj.ImageObj` object."
msgstr ""

#: cdl.computation.image.dst_11_signal:1 of
msgid ""
"Create a result signal object, as returned by the callback function of "
"the :func:`cdl.core.gui.processor.base.BaseProcessor.compute_11` method"
msgstr ""

#: cdl.computation.image.compute_addition:1 of
msgid "Add **dst** and **src** images and return **dst** image modified in place"
msgstr ""

#: cdl.computation.image.compute_addition:6
#: cdl.computation.image.compute_product:6 of
msgid "Output image object (modified in place)"
msgstr ""

#: cdl.computation.image.compute_product:1 of
msgid ""
"Multiply **dst** and **src** images and return **dst** image modified in "
"place"
msgstr ""

#: cdl.computation.image.compute_addition_constant:1 of
msgid "Add **dst** and a constant value and return the new result image object"
msgstr ""

#: cdl.computation.image.compute_addition_constant:6 of
msgid "Result image object **src** + **p.value** (new object)"
msgstr ""

#: cdl.computation.image.compute_difference_constant:1 of
msgid ""
"Subtract a constant value from an image and return the new result image "
"object"
msgstr ""

#: cdl.computation.image.compute_difference_constant:6 of
msgid "Result image object **src** - **p.value** (new object)"
msgstr ""

#: cdl.computation.image.compute_product_constant:1 of
msgid ""
"Multiply **dst** by a constant value and return the new result image "
"object"
msgstr ""

#: cdl.computation.image.compute_product_constant:6 of
msgid "Result image object **src** * **p.value** (new object)"
msgstr ""

#: cdl.computation.image.compute_division_constant:1 of
msgid "Divide an image by a constant value and return the new result image object"
msgstr ""

#: cdl.computation.image.compute_division_constant:6 of
msgid "Result image object **src** / **p.value** (new object)"
msgstr ""

#: cdl.computation.image.compute_arithmetic:1 of
msgid "Compute arithmetic operation on two images"
msgstr ""

#: cdl.computation.image.compute_arithmetic:5 of
msgid "arithmetic parameters"
msgstr ""

#: cdl.computation.image.compute_arithmetic:7 of
msgid "Result image object"
msgstr ""

#: cdl.computation.image.compute_difference:1 of
msgid "Compute difference between two images"
msgstr ""

#: cdl.computation.image.compute_difference:6 of
msgid "Result image object **src1** - **src2** (new object)"
msgstr ""

#: cdl.computation.image.compute_quadratic_difference:1 of
msgid "Compute quadratic difference between two images"
msgstr ""

#: cdl.computation.image.compute_quadratic_difference:6 of
msgid "Result image object (**src1** - **src2**) / sqrt(2.0) (new object)"
msgstr ""

#: cdl.computation.image.compute_division:1 of
msgid "Compute division between two images"
msgstr ""

#: cdl.computation.image.compute_division:6 of
msgid "Result image object **src1** / **src2** (new object)"
msgstr ""

#: cdl.computation.image.FlatFieldParam:1 of
msgid "Flat-field parameters"
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`FlatFieldParam` with the fields set "
"to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:6 of
msgid "New instance of :py:class:`FlatFieldParam`."
msgstr ""

#: cdl.computation.image.compute_flatfield:1 of
msgid ""
"Compute flat field correction with "
":py:func:`cdl.algorithms.image.flatfield`"
msgstr ""

#: cdl.computation.image.compute_flatfield:3 of
msgid "raw data image object"
msgstr ""

#: cdl.computation.image.compute_flatfield:4 of
msgid "flat field image object"
msgstr ""

#: cdl.computation.image.compute_flatfield:5 of
msgid "flat field parameters"
msgstr ""

#: cdl.computation.image.compute_abs:5 cdl.computation.image.compute_astype:6
#: cdl.computation.image.compute_binning:6
#: cdl.computation.image.compute_butterworth:6
#: cdl.computation.image.compute_calibration:6
#: cdl.computation.image.compute_clip:6 cdl.computation.image.compute_exp:5
#: cdl.computation.image.compute_fft:6
#: cdl.computation.image.compute_flatfield:7
#: cdl.computation.image.compute_fliph:5 cdl.computation.image.compute_flipv:5
#: cdl.computation.image.compute_gaussian_filter:6
#: cdl.computation.image.compute_ifft:6 cdl.computation.image.compute_im:5
#: cdl.computation.image.compute_log10:5 cdl.computation.image.compute_logp1:6
#: cdl.computation.image.compute_magnitude_spectrum:7
#: cdl.computation.image.compute_moving_average:6
#: cdl.computation.image.compute_moving_median:6
#: cdl.computation.image.compute_normalize:6
#: cdl.computation.image.compute_offset_correction:6
#: cdl.computation.image.compute_phase_spectrum:6
#: cdl.computation.image.compute_psd:7 cdl.computation.image.compute_re:5
#: cdl.computation.image.compute_resize:6
#: cdl.computation.image.compute_rotate:6
#: cdl.computation.image.compute_rotate270:5
#: cdl.computation.image.compute_rotate90:5
#: cdl.computation.image.compute_swap_axes:5
#: cdl.computation.image.compute_wiener:5
#: cdl.computation.image.edges.compute_canny:6
#: cdl.computation.image.edges.compute_farid:5
#: cdl.computation.image.edges.compute_farid_h:5
#: cdl.computation.image.edges.compute_farid_v:5
#: cdl.computation.image.edges.compute_laplace:5
#: cdl.computation.image.edges.compute_prewitt:5
#: cdl.computation.image.edges.compute_prewitt_h:5
#: cdl.computation.image.edges.compute_prewitt_v:5
#: cdl.computation.image.edges.compute_roberts:5
#: cdl.computation.image.edges.compute_scharr:5
#: cdl.computation.image.edges.compute_scharr_h:5
#: cdl.computation.image.edges.compute_scharr_v:5
#: cdl.computation.image.edges.compute_sobel:5
#: cdl.computation.image.edges.compute_sobel_h:5
#: cdl.computation.image.edges.compute_sobel_v:5
#: cdl.computation.image.exposure.compute_adjust_gamma:6
#: cdl.computation.image.exposure.compute_adjust_log:6
#: cdl.computation.image.exposure.compute_adjust_sigmoid:6
#: cdl.computation.image.exposure.compute_equalize_adapthist:7
#: cdl.computation.image.exposure.compute_equalize_hist:6
#: cdl.computation.image.exposure.compute_rescale_intensity:7
#: cdl.computation.image.extract_multiple_roi:6
#: cdl.computation.image.extract_single_roi:6
#: cdl.computation.image.morphology.compute_black_tophat:6
#: cdl.computation.image.morphology.compute_closing:6
#: cdl.computation.image.morphology.compute_dilation:6
#: cdl.computation.image.morphology.compute_erosion:6
#: cdl.computation.image.morphology.compute_opening:6
#: cdl.computation.image.morphology.compute_white_tophat:6
#: cdl.computation.image.restoration.compute_denoise_bilateral:7
#: cdl.computation.image.restoration.compute_denoise_tophat:7
#: cdl.computation.image.restoration.compute_denoise_tv:7
#: cdl.computation.image.restoration.compute_denoise_wavelet:7
#: cdl.computation.image.threshold.compute_threshold:15
#: cdl.computation.image.threshold.compute_threshold_isodata:6
#: cdl.computation.image.threshold.compute_threshold_li:6
#: cdl.computation.image.threshold.compute_threshold_mean:6
#: cdl.computation.image.threshold.compute_threshold_minimum:6
#: cdl.computation.image.threshold.compute_threshold_otsu:6
#: cdl.computation.image.threshold.compute_threshold_triangle:6
#: cdl.computation.image.threshold.compute_threshold_yen:6 of
msgid "Output image object"
msgstr ""

#: cdl.computation.image.compute_normalize:1 of
msgid ""
"Normalize image data depending on its maximum, with "
":py:func:`cdl.algorithms.image.normalize`"
msgstr ""

#: cdl.computation.image.LogP1Param:1 of
msgid "Log10 parameters"
msgstr ""

#: cdl.computation.image.LogP1Param:5 cdl.computation.image.ResizeParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid "Default: None."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`LogP1Param` with the fields set to "
"the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:6 of
msgid "New instance of :py:class:`LogP1Param`."
msgstr ""

#: cdl.computation.image.compute_logp1:1 of
msgid "Compute log10(z+n) with :py:data:`numpy.log10`"
msgstr ""

#: cdl.computation.image.RotateParam:1 of
msgid "Rotate parameters"
msgstr ""

#: cdl.computation.image.RotateParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid "Angle (Â°)\\.  Default: None."
msgstr ""

#: cdl.computation.image.ResizeParam:11 cdl.computation.image.RotateParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid ""
"Single choice from: 'constant', 'nearest', 'reflect', 'wrap'. Default: "
"'constant'."
msgstr ""

#: cdl.computation.image.ResizeParam:17 cdl.computation.image.RotateParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid ""
"Value used for points outside the boundaries of the input if mode is "
"'constant'\\. Default: 0.0."
msgstr ""

#: cdl.computation.image.RotateParam:23
#: guidata.dataset.datatypes.DataSet.create:9 of
msgid ""
"Reshape the output array so that the input array is contained completely "
"in the output\\. Default: False."
msgstr ""

#: cdl.computation.image.ResizeParam:23 cdl.computation.image.RotateParam:29
#: cdl.computation.image.detection.Peak2DDetectionParam:17
#: guidata.dataset.datatypes.DataSet.create:7
#: guidata.dataset.datatypes.DataSet.create:9
#: guidata.dataset.datatypes.DataSet.create:11 of
msgid "Default: True."
msgstr ""

#: cdl.computation.image.ResizeParam:29 cdl.computation.image.RotateParam:35
#: guidata.dataset.datatypes.DataSet.create:11
#: guidata.dataset.datatypes.DataSet.create:13 of
msgid "Spline interpolation order\\. Integer between 0 and 5\\. Default: 3."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`RotateParam` with the fields set to "
"the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:16 of
msgid "New instance of :py:class:`RotateParam`."
msgstr ""

#: cdl.computation.image.rotate_obj_270:1 cdl.computation.image.rotate_obj_90:1
#: cdl.computation.image.rotate_obj_alpha:1
#: cdl.computation.image.rotate_obj_coords:1 of
msgid "Apply rotation to coords associated to image obj"
msgstr ""

#: cdl.computation.image.rotate_obj_coords:3 of
msgid "rotation angle (in degrees)"
msgstr ""

#: cdl.computation.image.rotate_obj_coords:4 of
msgid "image object"
msgstr ""

#: cdl.computation.image.rotate_obj_coords:5 of
msgid "original image object"
msgstr ""

#: cdl.computation.image.rotate_obj_coords:6 of
msgid "coordinates to rotate"
msgstr ""

#: cdl.computation.image.rotate_obj_coords:8 of
msgid "Output data"
msgstr ""

#: cdl.computation.image.compute_rotate:1 of
msgid "Rotate data with :py:func:`scipy.ndimage.rotate`"
msgstr ""

#: cdl.computation.image.compute_rotate90:1 of
msgid "Rotate data 90Â° with :py:func:`numpy.rot90`"
msgstr ""

#: cdl.computation.image.compute_rotate270:1 of
msgid "Rotate data 270Â° with :py:func:`numpy.rot90`"
msgstr ""

#: cdl.computation.image.hflip_coords:1 of
msgid "Apply HFlip to coords"
msgstr ""

#: cdl.computation.image.compute_fliph:1 of
msgid "Flip data horizontally with :py:func:`numpy.fliplr`"
msgstr ""

#: cdl.computation.image.vflip_coords:1 of
msgid "Apply VFlip to coords"
msgstr ""

#: cdl.computation.image.compute_flipv:1 of
msgid "Flip data vertically with :py:func:`numpy.flipud`"
msgstr ""

#: cdl.computation.image.GridParam:1 of
msgid "Grid parameters"
msgstr ""

#: cdl.computation.image.GridParam:5 guidata.dataset.datatypes.DataSet.create:3
#: of
msgid "Distribute over\\.  Single choice from: 'col', 'row'. Default: 'col'."
msgstr ""

#: cdl.computation.image.GridParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid "Columns\\.  Integer, non zero\\. Default: 1."
msgstr ""

#: cdl.computation.image.GridParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid "Integer, non zero\\. Default: 1."
msgstr ""

#: cdl.computation.image.GridParam:23
#: guidata.dataset.datatypes.DataSet.create:9 of
msgid "Column spacing\\.  Float higher than 0.0\\. Default: 0.0."
msgstr ""

#: cdl.computation.image.GridParam:29
#: guidata.dataset.datatypes.DataSet.create:11 of
msgid "Row spacing\\.  Float higher than 0.0\\. Default: 0.0."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`GridParam` with the fields set to "
"the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:14 of
msgid "New instance of :py:class:`GridParam`."
msgstr ""

#: cdl.computation.image.ResizeParam:1 of
msgid "Resize parameters"
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`ResizeParam` with the fields set to "
"the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:14 of
msgid "New instance of :py:class:`ResizeParam`."
msgstr ""

#: cdl.computation.image.compute_resize:1 of
msgid "Zooming function with :py:func:`scipy.ndimage.zoom`"
msgstr ""

#: cdl.computation.image.BinningParam:1 of
msgid "Binning parameters"
msgstr ""

#: cdl.computation.image.BinningParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Cluster size (X)\\. Number of adjacent pixels to be combined together "
"along x-axis. Integer higher than 2\\. Default: 2."
msgstr ""

#: cdl.computation.image.BinningParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid ""
"Cluster size (Y)\\. Number of adjacent pixels to be combined together "
"along y-axis. Integer higher than 2\\. Default: 2."
msgstr ""

#: cdl.computation.image.BinningParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid ""
"Single choice from: 'sum', 'average', 'median', 'min', 'max'. Default: "
"'sum'."
msgstr ""

#: cdl.computation.image.BinningParam:23
#: guidata.dataset.datatypes.DataSet.create:9 of
msgid ""
"Data type\\. Output image data type. Single choice from: 'dtype', "
"'float32', 'float64', 'complex128', 'uint8', 'int16', 'uint16', 'int32'. "
"Default: 'dtype'."
msgstr ""

#: cdl.computation.image.BinningParam:29
#: guidata.dataset.datatypes.DataSet.create:11 of
msgid ""
"Change pixel size so that overall image size remains the same. Default: "
"False."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`BinningParam` with the fields set to"
" the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:14 of
msgid "New instance of :py:class:`BinningParam`."
msgstr ""

#: cdl.computation.image.compute_binning:1 of
msgid "Binning function on data with :py:func:`cdl.algorithms.image.binning`"
msgstr ""

#: cdl.computation.image.extract_multiple_roi:4 of
msgid "parameters defining the regions of interest"
msgstr ""

#: cdl.computation.image.extract_single_roi:1 of
msgid "Extract single ROI"
msgstr ""

#: cdl.computation.image.LineProfileParam:1 of
msgid "Horizontal or vertical profile parameters"
msgstr ""

#: cdl.computation.image.AverageProfileParam:5
#: cdl.computation.image.LineProfileParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid "Single choice from: 'horizontal', 'vertical'. Default: 'horizontal'."
msgstr ""

#: cdl.computation.image.AverageProfileParam:11
#: cdl.computation.image.LineProfileParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid "Integer higher than 0\\. Default: 0."
msgstr ""

#: cdl.computation.image.LineProfileParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid "Column\\.  Integer higher than 0\\. Default: 0."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`LineProfileParam` with the fields "
"set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:10 of
msgid "New instance of :py:class:`LineProfileParam`."
msgstr ""

#: cdl.computation.image.compute_line_profile:1 of
msgid "Compute horizontal or vertical profile"
msgstr ""

#: cdl.computation.image.compute_line_profile:6 of
msgid "Signal object with the profile"
msgstr ""

#: cdl.computation.image.SegmentProfileParam:1 of
msgid "Segment profile parameters"
msgstr ""

#: cdl.computation.image.SegmentProfileParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid "Start row\\.  Integer higher than 0\\. Default: 0."
msgstr ""

#: cdl.computation.image.SegmentProfileParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid "Start column\\.  Integer higher than 0\\. Default: 0."
msgstr ""

#: cdl.computation.image.SegmentProfileParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid "End row\\.  Integer higher than 0\\. Default: 0."
msgstr ""

#: cdl.computation.image.SegmentProfileParam:23
#: guidata.dataset.datatypes.DataSet.create:9 of
msgid "End column\\.  Integer higher than 0\\. Default: 0."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`SegmentProfileParam` with the fields"
" set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:12 of
msgid "New instance of :py:class:`SegmentProfileParam`."
msgstr ""

#: cdl.computation.image.compute_segment_profile:1 of
msgid "Compute segment profile"
msgstr ""

#: cdl.computation.image.compute_segment_profile:6 of
msgid "Signal object with the segment profile"
msgstr ""

#: cdl.computation.image.AverageProfileParam:1 of
msgid "Average horizontal or vertical profile parameters"
msgstr ""

#: cdl.computation.image.AverageProfileParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid "Integer higher than -1\\. Default: -1."
msgstr ""

#: cdl.computation.image.AverageProfileParam:23
#: guidata.dataset.datatypes.DataSet.create:9 of
msgid "Column 1\\.  Integer higher than 0\\. Default: 0."
msgstr ""

#: cdl.computation.image.AverageProfileParam:29
#: guidata.dataset.datatypes.DataSet.create:11 of
msgid "Column 2\\.  Integer higher than -1\\. Default: -1."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`AverageProfileParam` with the fields"
" set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:14 of
msgid "New instance of :py:class:`AverageProfileParam`."
msgstr ""

#: cdl.computation.image.compute_average_profile:1 of
msgid "Compute horizontal or vertical average profile"
msgstr ""

#: cdl.computation.image.compute_average_profile:6 of
msgid "Signal object with the average profile"
msgstr ""

#: cdl.computation.image.RadialProfileParam:1 of
msgid "Radial profile parameters"
msgstr ""

#: cdl.computation.image.RadialProfileParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Center position\\.  Single choice from: 'centroid', 'center', 'user'. "
"Default: 'centroid'."
msgstr ""

#: cdl.computation.image.RadialProfileParam:11
#: cdl.computation.image.RadialProfileParam:17
#: guidata.dataset.datatypes.DataSet.create:5
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid "X\\ :subscript:`Center`\\.  Float, unit: pixel\\. Default: None."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`RadialProfileParam` with the fields "
"set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:10 of
msgid "New instance of :py:class:`RadialProfileParam`."
msgstr ""

#: cdl.computation.image.RadialProfileParam.update_from_image:1 of
msgid "Update parameters from image"
msgstr ""

#: cdl.computation.image.RadialProfileParam.choice_callback:1 of
msgid "Callback for choice item"
msgstr ""

#: cdl.computation.image.compute_radial_profile:1 of
msgid ""
"Compute radial profile around the centroid with "
":py:func:`cdl.algorithms.image.get_radial_profile`"
msgstr ""

#: cdl.computation.image.compute_radial_profile:7 of
msgid "Signal object with the radial profile"
msgstr ""

#: cdl.computation.image.compute_histogram:1 of
msgid "Compute histogram of the image data, with :py:func:`numpy.histogram`"
msgstr ""

#: cdl.computation.image.compute_histogram:6 of
msgid "Signal object with the histogram"
msgstr ""

#: cdl.computation.image.compute_swap_axes:1 of
msgid "Swap image axes with :py:func:`numpy.transpose`"
msgstr ""

#: cdl.computation.image.DataTypeIParam:1 of
msgid "Convert image data type parameters"
msgstr ""

#: cdl.computation.image.DataTypeIParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Destination data type\\. Output image data type. Single choice from: "
"'float32', 'float64', 'complex128', 'uint8', 'int16', 'uint16', 'int32'. "
"Default: 'float32'."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`DataTypeIParam` with the fields set "
"to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:6 of
msgid "New instance of :py:class:`DataTypeIParam`."
msgstr ""

#: cdl.computation.image.compute_astype:1 of
msgid ""
"Convert image data type with "
":py:func:`cdl.algorithms.datatypes.clip_astype`"
msgstr ""

#: cdl.computation.image.compute_log10:1 of
msgid "Compute log10 with :py:data:`numpy.log10`"
msgstr ""

#: cdl.computation.image.ZCalibrateParam:1 of
msgid "Image linear calibration parameters"
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`ZCalibrateParam` with the fields set"
" to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:8 of
msgid "New instance of :py:class:`ZCalibrateParam`."
msgstr ""

#: cdl.computation.image.compute_calibration:4 of
msgid "calibration parameters"
msgstr ""

#: cdl.computation.image.compute_clip:1 of
msgid "Apply clipping with :py:func:`numpy.clip`"
msgstr ""

#: cdl.computation.image.compute_offset_correction:1 of
msgid "Apply offset correction"
msgstr ""

#: cdl.computation.image.compute_fft:1 of
msgid "Compute FFT with :py:func:`cdl.algorithms.image.fft2d`"
msgstr ""

#: cdl.computation.image.compute_ifft:1 of
msgid "Compute inverse FFT with :py:func:`cdl.algorithms.image.ifft2d`"
msgstr ""

#: cdl.computation.image.compute_magnitude_spectrum:1 of
msgid ""
"Compute magnitude spectrum with "
":py:func:`cdl.algorithms.image.magnitude_spectrum`"
msgstr ""

#: cdl.computation.image.compute_phase_spectrum:1 of
msgid "Compute phase spectrum with :py:func:`cdl.algorithms.image.phase_spectrum`"
msgstr ""

#: cdl.computation.image.compute_psd:1 of
msgid "Compute power spectral density with :py:func:`cdl.algorithms.image.psd`"
msgstr ""

#: cdl.computation.image.ButterworthParam:1 of
msgid "Butterworth filter parameters"
msgstr ""

#: cdl.computation.image.ButterworthParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Cut-off frequency ratio\\. Cut-off frequency ratio\\. Float between 0.0 "
"and 0.5\\. Default: 0.005."
msgstr ""

#: cdl.computation.image.ButterworthParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid "If true, apply high-pass filter instead of low-pass\\. Default: False."
msgstr ""

#: cdl.computation.image.ButterworthParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid "Order of the butterworth filter\\. Integer higher than 1\\. Default: 2."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`ButterworthParam` with the fields "
"set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:10 of
msgid "New instance of :py:class:`ButterworthParam`."
msgstr ""

#: cdl.computation.image.compute_butterworth:1 of
msgid "Compute Butterworth filter with :py:func:`skimage.filters.butterworth`"
msgstr ""

#: cdl.computation.image.calc_resultshape:1 of
msgid ""
"Calculate result shape by executing a computation function on an image "
"object, taking into account the image origin (x0, y0), scale (dx, dy) and"
" ROIs."
msgstr ""

#: cdl.computation.image.calc_resultshape:19 of
msgid ""
"Moreover, the computation function must return a single value or a NumPy "
"array containing the result of the computation. This array contains the "
"coordinates of points, polygons, circles or ellipses in the form [[x, y],"
" ...], or [[x0, y0, x1, y1, ...], ...], or [[x0, y0, r], ...], or [[x0, "
"y0, a, b, theta], ...]."
msgstr ""

#: cdl.computation.image.get_centroid_coords:1 of
msgid ""
"Return centroid coordinates with "
":py:func:`cdl.algorithms.image.get_centroid_fourier`"
msgstr ""

#: cdl.computation.image.get_centroid_coords:4
#: cdl.computation.image.get_enclosing_circle_coords:4 of
msgid "input data"
msgstr ""

#: cdl.computation.image.compute_centroid:6
#: cdl.computation.image.get_centroid_coords:6 of
msgid "Centroid coordinates"
msgstr ""

#: cdl.computation.image.compute_centroid:1 of
msgid "Compute centroid with :py:func:`cdl.algorithms.image.get_centroid_fourier`"
msgstr ""

#: cdl.computation.image.compute_centroid:4
#: cdl.computation.image.compute_enclosing_circle:4
#: cdl.computation.image.compute_hough_circle_peaks:4
#: cdl.computation.image.detection.compute_blob_dog:4
#: cdl.computation.image.detection.compute_blob_doh:4
#: cdl.computation.image.detection.compute_blob_log:4
#: cdl.computation.image.detection.compute_blob_opencv:4
#: cdl.computation.image.detection.compute_peak_detection:4 of
msgid "input image"
msgstr ""

#: cdl.computation.image.get_enclosing_circle_coords:1 of
msgid ""
"Return diameter coords for the circle contour enclosing image values "
"above threshold (FWHM)"
msgstr ""

#: cdl.computation.image.compute_enclosing_circle:6
#: cdl.computation.image.get_enclosing_circle_coords:6 of
msgid "Diameter coords"
msgstr ""

#: cdl.computation.image.compute_enclosing_circle:1 of
msgid ""
"Compute minimum enclosing circle with "
":py:func:`cdl.algorithms.image.get_enclosing_circle`"
msgstr ""

#: cdl.computation.image.HoughCircleParam:1 of
msgid "Circle Hough transform parameters"
msgstr ""

#: cdl.computation.image.HoughCircleParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Radius\\ :subscript:`min`\\.  Integer higher than 0, non zero, unit: "
"pixels\\. Default: None."
msgstr ""

#: cdl.computation.image.HoughCircleParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid ""
"Radius\\ :subscript:`max`\\.  Integer higher than 0, non zero, unit: "
"pixels\\. Default: None."
msgstr ""

#: cdl.computation.image.HoughCircleParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid "Minimal distance\\.  Integer higher than 0\\. Default: None."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`HoughCircleParam` with the fields "
"set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:10 of
msgid "New instance of :py:class:`HoughCircleParam`."
msgstr ""

#: cdl.computation.image.compute_hough_circle_peaks:1 of
msgid ""
"Compute Hough circles with "
":py:func:`cdl.algorithms.image.get_hough_circle_peaks`"
msgstr ""

#: cdl.computation.image.compute_hough_circle_peaks:7 of
msgid "Circle coordinates"
msgstr ""

#: cdl.computation.image.compute_stats:1 of
msgid "Compute statistics on an image"
msgstr ""

#: cdl.computation.image.compute_stats:5 of
msgid "Result properties"
msgstr ""

#: cdl.computation:59 of
msgid "Threshold features"
msgstr ""

#: cdl.computation.image.threshold:2 of
msgid "Threshold computation module"
msgstr ""

#: cdl.computation.image.threshold.ThresholdParam:1 of
msgid "Histogram threshold parameters"
msgstr ""

#: cdl.computation.image.threshold.ThresholdParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Threshold method\\.  Single choice from: 'manual', 'isodata', 'li', "
"'mean', 'minimum', 'otsu', 'triangle', 'yen'. Default: 'manual'."
msgstr ""

#: cdl.computation.image.threshold.ThresholdParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid "Threshold value\\.  Default: 0.0."
msgstr ""

#: cdl.computation.image.threshold.ThresholdParam:23
#: guidata.dataset.datatypes.DataSet.create:9 of
msgid "Single choice from: '>', '<'. Default: '>'."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`ThresholdParam` with the fields set "
"to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:12 of
msgid "New instance of :py:class:`ThresholdParam`."
msgstr ""

#: cdl.computation.image.threshold.compute_threshold:1 of
msgid "Compute the threshold, using one of the available algorithms:"
msgstr ""

#: cdl.computation.image.threshold.compute_threshold:3 of
msgid "Manual: a fixed threshold value"
msgstr ""

#: cdl.computation.image.threshold.compute_threshold:4 of
msgid "ISODATA: :py:func:`skimage.filters.threshold_isodata`"
msgstr ""

#: cdl.computation.image.threshold.compute_threshold:5 of
msgid "Li: :py:func:`skimage.filters.threshold_li`"
msgstr ""

#: cdl.computation.image.threshold.compute_threshold:6 of
msgid "Mean: :py:func:`skimage.filters.threshold_mean`"
msgstr ""

#: cdl.computation.image.threshold.compute_threshold:7 of
msgid "Minimum: :py:func:`skimage.filters.threshold_minimum`"
msgstr ""

#: cdl.computation.image.threshold.compute_threshold:8 of
msgid "Otsu: :py:func:`skimage.filters.threshold_otsu`"
msgstr ""

#: cdl.computation.image.threshold.compute_threshold:9 of
msgid "Triangle: :py:func:`skimage.filters.threshold_triangle`"
msgstr ""

#: cdl.computation.image.threshold.compute_threshold:10 of
msgid "Yen: :py:func:`skimage.filters.threshold_yen`"
msgstr ""

#: cdl.computation.image.threshold.compute_threshold_isodata:1 of
msgid ""
"Compute the threshold using the Isodata algorithm with default "
"parameters, see :py:func:`skimage.filters.threshold_isodata`"
msgstr ""

#: cdl.computation.image.threshold.compute_threshold_li:1 of
msgid ""
"Compute the threshold using the Li algorithm with default parameters, see"
" :py:func:`skimage.filters.threshold_li`"
msgstr ""

#: cdl.computation.image.threshold.compute_threshold_mean:1 of
msgid ""
"Compute the threshold using the Mean algorithm, see "
":py:func:`skimage.filters.threshold_mean`"
msgstr ""

#: cdl.computation.image.threshold.compute_threshold_minimum:1 of
msgid ""
"Compute the threshold using the Minimum algorithm with default "
"parameters, see :py:func:`skimage.filters.threshold_minimum`"
msgstr ""

#: cdl.computation.image.threshold.compute_threshold_otsu:1 of
msgid ""
"Compute the threshold using the Otsu algorithm with default parameters, "
"see :py:func:`skimage.filters.threshold_otsu`"
msgstr ""

#: cdl.computation.image.threshold.compute_threshold_triangle:1 of
msgid ""
"Compute the threshold using the Triangle algorithm with default "
"parameters, see :py:func:`skimage.filters.threshold_triangle`"
msgstr ""

#: cdl.computation.image.threshold.compute_threshold_yen:1 of
msgid ""
"Compute the threshold using the Yen algorithm with default parameters, "
"see :py:func:`skimage.filters.threshold_yen`"
msgstr ""

#: cdl.computation:65 of
msgid "Exposure correction features"
msgstr ""

#: cdl.computation.image.exposure:2 of
msgid "Exposure computation module"
msgstr ""

#: cdl.computation.image.exposure.AdjustGammaParam:1 of
msgid "Gamma adjustment parameters"
msgstr ""

#: cdl.computation.image.exposure.AdjustGammaParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Gamma correction factor (higher values give more contrast). Float higher "
"than 0.0\\. Default: 1.0."
msgstr ""

#: cdl.computation.image.exposure.AdjustGammaParam:11
#: cdl.computation.image.exposure.AdjustLogParam:5
#: guidata.dataset.datatypes.DataSet.create:3
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid ""
"Gain factor (higher values give more contrast). Float higher than 0.0\\. "
"Default: 1.0."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`AdjustGammaParam` with the fields "
"set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:8 of
msgid "New instance of :py:class:`AdjustGammaParam`."
msgstr ""

#: cdl.computation.image.exposure.compute_adjust_gamma:1 of
msgid "Gamma correction with :py:func:`skimage.exposure.adjust_gamma`"
msgstr ""

#: cdl.computation.image.exposure.AdjustLogParam:1 of
msgid "Logarithmic adjustment parameters"
msgstr ""

#: cdl.computation.image.exposure.AdjustLogParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid "If true, apply inverse logarithmic transformation. Default: False."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`AdjustLogParam` with the fields set "
"to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:8 of
msgid "New instance of :py:class:`AdjustLogParam`."
msgstr ""

#: cdl.computation.image.exposure.compute_adjust_log:1 of
msgid "Compute log correction with :py:func:`skimage.exposure.adjust_log`"
msgstr ""

#: cdl.computation.image.exposure.AdjustSigmoidParam:1 of
msgid "Sigmoid adjustment parameters"
msgstr ""

#: cdl.computation.image.exposure.AdjustSigmoidParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Cutoff value (higher values give more contrast). Float between 0.0 and "
"1.0\\. Default: 0.5."
msgstr ""

#: cdl.computation.image.exposure.AdjustSigmoidParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid ""
"Gain factor (higher values give more contrast). Float higher than 0.0\\. "
"Default: 10.0."
msgstr ""

#: cdl.computation.image.exposure.AdjustSigmoidParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid "If true, apply inverse sigmoid transformation. Default: False."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`AdjustSigmoidParam` with the fields "
"set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:10 of
msgid "New instance of :py:class:`AdjustSigmoidParam`."
msgstr ""

#: cdl.computation.image.exposure.compute_adjust_sigmoid:1 of
msgid "Compute sigmoid correction with :py:func:`skimage.exposure.adjust_sigmoid`"
msgstr ""

#: cdl.computation.image.exposure.RescaleIntensityParam:1 of
msgid "Intensity rescaling parameters"
msgstr ""

#: cdl.computation.image.exposure.RescaleIntensityParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Input range\\. Min and max intensity values of input image ('image' "
"refers to input image min/max levels, 'dtype' refers to input image data "
"type range). Single choice from: 'image', 'dtype', 'float32', 'float64', "
"'complex128', 'uint8', 'int16', 'uint16', 'int32'. Default: 'image'."
msgstr ""

#: cdl.computation.image.exposure.RescaleIntensityParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid ""
"Output range\\. Min and max intensity values of output image  ('image' "
"refers to input image min/max levels, 'dtype' refers to input image data "
"type range).. Single choice from: 'image', 'dtype', 'float32', 'float64',"
" 'complex128', 'uint8', 'int16', 'uint16', 'int32'. Default: 'dtype'."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`RescaleIntensityParam` with the "
"fields set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:8 of
msgid "New instance of :py:class:`RescaleIntensityParam`."
msgstr ""

#: cdl.computation.image.exposure.compute_rescale_intensity:1 of
msgid ""
"Rescale image intensity levels with "
":py:func:`skimage.exposure.rescale_intensity`"
msgstr ""

#: cdl.computation.image.exposure.EqualizeHistParam:1 of
msgid "Histogram equalization parameters"
msgstr ""

#: cdl.computation.image.exposure.EqualizeAdaptHistParam:5
#: cdl.computation.image.exposure.EqualizeHistParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Number of bins\\. Number of bins for image histogram. Integer higher than"
" 1\\. Default: 256."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`EqualizeHistParam` with the fields "
"set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:6 of
msgid "New instance of :py:class:`EqualizeHistParam`."
msgstr ""

#: cdl.computation.image.exposure.compute_equalize_hist:1 of
msgid "Histogram equalization with :py:func:`skimage.exposure.equalize_hist`"
msgstr ""

#: cdl.computation.image.exposure.EqualizeAdaptHistParam:1 of
msgid "Adaptive histogram equalization parameters"
msgstr ""

#: cdl.computation.image.exposure.EqualizeAdaptHistParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid ""
"Clipping limit\\. Clipping limit (higher values give more contrast). "
"Float between 0.0 and 1.0\\. Default: 0.01."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`EqualizeAdaptHistParam` with the "
"fields set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:8 of
msgid "New instance of :py:class:`EqualizeAdaptHistParam`."
msgstr ""

#: cdl.computation.image.exposure.compute_equalize_adapthist:1 of
msgid ""
"Adaptive histogram equalization with "
":py:func:`skimage.exposure.equalize_adapthist`"
msgstr ""

#: cdl.computation:71 of
msgid "Restoration features"
msgstr ""

#: cdl.computation.image.restoration:2 of
msgid "Restoration computation module"
msgstr ""

#: cdl.computation.image.restoration.DenoiseTVParam:1 of
msgid "Total Variation denoising parameters"
msgstr ""

#: cdl.computation.image.restoration.DenoiseTVParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Denoising weight\\. The greater weight, the more denoising (at the "
"expense of fidelity to input). Float higher than 0, non zero\\. Default: "
"0.1."
msgstr ""

#: cdl.computation.image.restoration.DenoiseTVParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid ""
"Epsilon\\. Relative difference of the value of the cost function that "
"determines the stop criterion. The algorithm stops when: (e_(n-1) - e_n) "
"< eps \\* e_0\\. Float higher than 0, non zero\\. Default: 0.0002."
msgstr ""

#: cdl.computation.image.restoration.DenoiseTVParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid ""
"Max. iterations\\. Maximal number of iterations used for the "
"optimization\\. Integer higher than 0, non zero\\. Default: 200."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`DenoiseTVParam` with the fields set "
"to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:10 of
msgid "New instance of :py:class:`DenoiseTVParam`."
msgstr ""

#: cdl.computation.image.restoration.compute_denoise_tv:1 of
msgid ""
"Compute Total Variation denoising with "
":py:func:`skimage.restoration.denoise_tv_chambolle`"
msgstr ""

#: cdl.computation.image.restoration.DenoiseBilateralParam:1 of
msgid "Bilateral filter denoising parameters"
msgstr ""

#: cdl.computation.image.restoration.DenoiseBilateralParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Ïƒ\\ :subscript:`spatial`\\. Standard deviation for range distance. A "
"larger value results in averaging of pixels with larger spatial "
"differences. Float higher than 0, non zero, unit: pixels\\. Default: 1.0."
msgstr ""

#: cdl.computation.image.restoration.DenoiseBilateralParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid ""
"Single choice from: 'constant', 'edge', 'symmetric', 'reflect', 'wrap'. "
"Default: 'constant'."
msgstr ""

#: cdl.computation.image.restoration.DenoiseBilateralParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid ""
"Used in conjunction with mode 'constant', the value outside the image "
"boundaries. Default: 0."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`DenoiseBilateralParam` with the "
"fields set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:10 of
msgid "New instance of :py:class:`DenoiseBilateralParam`."
msgstr ""

#: cdl.computation.image.restoration.compute_denoise_bilateral:1 of
msgid ""
"Compute bilateral filter denoising with "
":py:func:`skimage.restoration.denoise_bilateral`"
msgstr ""

#: cdl.computation.image.restoration.DenoiseWaveletParam:1 of
msgid "Wavelet denoising parameters"
msgstr ""

#: cdl.computation.image.restoration.DenoiseWaveletParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Single choice from: 'bior1.1', 'bior1.3', 'bior1.5', 'bior2.2', "
"'bior2.4', 'bior2.6', 'bior2.8', 'bior3.1', 'bior3.3', 'bior3.5', "
"'bior3.7', 'bior3.9', 'bior4.4', 'bior5.5', 'bior6.8', 'cgau1', 'cgau2', "
"'cgau3', 'cgau4', 'cgau5', 'cgau6', 'cgau7', 'cgau8', 'cmor', 'coif1', "
"'coif2', 'coif3', 'coif4', 'coif5', 'coif6', 'coif7', 'coif8', 'coif9', "
"'coif10', 'coif11', 'coif12', 'coif13', 'coif14', 'coif15', 'coif16', "
"'coif17', 'db1', 'db2', 'db3', 'db4', 'db5', 'db6', 'db7', 'db8', 'db9', "
"'db10', 'db11', 'db12', 'db13', 'db14', 'db15', 'db16', 'db17', 'db18', "
"'db19', 'db20', 'db21', 'db22', 'db23', 'db24', 'db25', 'db26', 'db27', "
"'db28', 'db29', 'db30', 'db31', 'db32', 'db33', 'db34', 'db35', 'db36', "
"'db37', 'db38', 'dmey', 'fbsp', 'gaus1', 'gaus2', 'gaus3', 'gaus4', "
"'gaus5', 'gaus6', 'gaus7', 'gaus8', 'haar', 'mexh', 'morl', 'rbio1.1', "
"'rbio1.3', 'rbio1.5', 'rbio2.2', 'rbio2.4', 'rbio2.6', 'rbio2.8', "
"'rbio3.1', 'rbio3.3', 'rbio3.5', 'rbio3.7', 'rbio3.9', 'rbio4.4', "
"'rbio5.5', 'rbio6.8', 'shan', 'sym2', 'sym3', 'sym4', 'sym5', 'sym6', "
"'sym7', 'sym8', 'sym9', 'sym10', 'sym11', 'sym12', 'sym13', 'sym14', "
"'sym15', 'sym16', 'sym17', 'sym18', 'sym19', 'sym20'. Default: 'sym9'."
msgstr ""

#: cdl.computation.image.restoration.DenoiseWaveletParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid "Single choice from: 'soft', 'hard'. Default: 'soft'."
msgstr ""

#: cdl.computation.image.restoration.DenoiseWaveletParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid "Single choice from: 'BayesShrink', 'VisuShrink'. Default: 'VisuShrink'."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`DenoiseWaveletParam` with the fields"
" set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:10 of
msgid "New instance of :py:class:`DenoiseWaveletParam`."
msgstr ""

#: cdl.computation.image.restoration.compute_denoise_wavelet:1 of
msgid ""
"Compute Wavelet denoising with "
":py:func:`skimage.restoration.denoise_wavelet`"
msgstr ""

#: cdl.computation.image.restoration.compute_denoise_tophat:1 of
msgid ""
"Denoise using White Top-Hat with "
":py:func:`skimage.morphology.white_tophat`"
msgstr ""

#: cdl.computation:77 of
msgid "Morphological features"
msgstr ""

#: cdl.computation.image.morphology:2 of
msgid "Morphology computation module"
msgstr ""

#: cdl.computation.image.morphology.MorphologyParam:1 of
msgid "White Top-Hat parameters"
msgstr ""

#: cdl.computation.image.morphology.MorphologyParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid "Footprint (disk) radius. Integer higher than 1\\. Default: 1."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`MorphologyParam` with the fields set"
" to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:6 of
msgid "New instance of :py:class:`MorphologyParam`."
msgstr ""

#: cdl.computation.image.morphology.compute_white_tophat:1 of
msgid "Compute White Top-Hat with :py:func:`skimage.morphology.white_tophat`"
msgstr ""

#: cdl.computation.image.morphology.compute_black_tophat:1 of
msgid "Compute Black Top-Hat with :py:func:`skimage.morphology.black_tophat`"
msgstr ""

#: cdl.computation.image.morphology.compute_erosion:1 of
msgid "Compute Erosion with :py:func:`skimage.morphology.erosion`"
msgstr ""

#: cdl.computation.image.morphology.compute_dilation:1 of
msgid "Compute Dilation with :py:func:`skimage.morphology.dilation`"
msgstr ""

#: cdl.computation.image.morphology.compute_opening:1 of
msgid "Compute morphological opening with :py:func:`skimage.morphology.opening`"
msgstr ""

#: cdl.computation.image.morphology.compute_closing:1 of
msgid "Compute morphological closing with :py:func:`skimage.morphology.closing`"
msgstr ""

#: cdl.computation:83 of
msgid "Edge detection features"
msgstr ""

#: cdl.computation.image.edges:2 of
msgid "Edges computation module"
msgstr ""

#: cdl.computation.image.edges.CannyParam:1 of
msgid "Canny filter parameters"
msgstr ""

#: cdl.computation.image.edges.CannyParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Standard deviation of the gaussian filter. Float higher than 0, non zero,"
" unit: pixels\\. Default: 1.0."
msgstr ""

#: cdl.computation.image.edges.CannyParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid ""
"Lower bound for hysteresis thresholding (linking edges). Float higher "
"than 0\\. Default: 0.1."
msgstr ""

#: cdl.computation.image.edges.CannyParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid ""
"Upper bound for hysteresis thresholding (linking edges). Float higher "
"than 0\\. Default: 0.9."
msgstr ""

#: cdl.computation.image.edges.CannyParam:23
#: guidata.dataset.datatypes.DataSet.create:9 of
msgid ""
"If true then treat low_threshold and high_threshold as quantiles of the "
"edge magnitude image, rather than absolute edge magnitude values. If true"
" then the thresholds must be in the range [0, 1]. Default: True."
msgstr ""

#: cdl.computation.image.edges.CannyParam:29
#: guidata.dataset.datatypes.DataSet.create:11 of
msgid ""
"Single choice from: 'reflect', 'constant', 'nearest', 'mirror', 'wrap'. "
"Default: 'constant'."
msgstr ""

#: cdl.computation.image.edges.CannyParam:35
#: guidata.dataset.datatypes.DataSet.create:13 of
msgid "Value to fill past edges of input if mode is constant. Default: 0.0."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`CannyParam` with the fields set to "
"the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:16 of
msgid "New instance of :py:class:`CannyParam`."
msgstr ""

#: cdl.computation.image.edges.compute_canny:1 of
msgid "Compute Canny filter with :py:func:`skimage.feature.canny`"
msgstr ""

#: cdl.computation.image.edges.compute_roberts:1 of
msgid "Compute Roberts filter with :py:func:`skimage.filters.roberts`"
msgstr ""

#: cdl.computation.image.edges.compute_prewitt:1 of
msgid "Compute Prewitt filter with :py:func:`skimage.filters.prewitt`"
msgstr ""

#: cdl.computation.image.edges.compute_prewitt_h:1 of
msgid ""
"Compute horizontal Prewitt filter with "
":py:func:`skimage.filters.prewitt_h`"
msgstr ""

#: cdl.computation.image.edges.compute_prewitt_v:1 of
msgid "Compute vertical Prewitt filter with :py:func:`skimage.filters.prewitt_v`"
msgstr ""

#: cdl.computation.image.edges.compute_sobel:1 of
msgid "Compute Sobel filter with :py:func:`skimage.filters.sobel`"
msgstr ""

#: cdl.computation.image.edges.compute_sobel_h:1 of
msgid "Compute horizontal Sobel filter with :py:func:`skimage.filters.sobel_h`"
msgstr ""

#: cdl.computation.image.edges.compute_sobel_v:1 of
msgid "Compute vertical Sobel filter with :py:func:`skimage.filters.sobel_v`"
msgstr ""

#: cdl.computation.image.edges.compute_scharr:1 of
msgid "Compute Scharr filter with :py:func:`skimage.filters.scharr`"
msgstr ""

#: cdl.computation.image.edges.compute_scharr_h:1 of
msgid "Compute horizontal Scharr filter with :py:func:`skimage.filters.scharr_h`"
msgstr ""

#: cdl.computation.image.edges.compute_scharr_v:1 of
msgid "Compute vertical Scharr filter with :py:func:`skimage.filters.scharr_v`"
msgstr ""

#: cdl.computation.image.edges.compute_farid:1 of
msgid "Compute Farid filter with :py:func:`skimage.filters.farid`"
msgstr ""

#: cdl.computation.image.edges.compute_farid_h:1 of
msgid "Compute horizontal Farid filter with :py:func:`skimage.filters.farid_h`"
msgstr ""

#: cdl.computation.image.edges.compute_farid_v:1 of
msgid "Compute vertical Farid filter with :py:func:`skimage.filters.farid_v`"
msgstr ""

#: cdl.computation.image.edges.compute_laplace:1 of
msgid "Compute Laplace filter with :py:func:`skimage.filters.laplace`"
msgstr ""

#: cdl.computation:88 of
msgid "Detection features"
msgstr ""

#: cdl.computation.image.detection:2 of
msgid "Blob detection computation module"
msgstr ""

#: cdl.computation.image.detection.GenericDetectionParam:1 of
msgid "Generic detection parameters"
msgstr ""

#: cdl.computation.image.detection.ContourShapeParam:5
#: cdl.computation.image.detection.GenericDetectionParam:5
#: cdl.computation.image.detection.Peak2DDetectionParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Relative threshold\\. Detection threshold, relative to difference between"
" data maximum and minimum\\. Float between 0.1 and 0.9\\. Default: 0.5."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`GenericDetectionParam` with the "
"fields set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:6 of
msgid "New instance of :py:class:`GenericDetectionParam`."
msgstr ""

#: cdl.computation.image.detection.Peak2DDetectionParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid ""
"Neighborhoods size\\. Size of the sliding window used in maximum/minimum "
"filtering algorithm\\. Integer higher than 1, unit: pixels\\. Default: "
"10."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`Peak2DDetectionParam` with the "
"fields set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:10 of
msgid "New instance of :py:class:`Peak2DDetectionParam`."
msgstr ""

#: cdl.computation.image.detection.compute_peak_detection:1 of
msgid ""
"Compute 2D peak detection with "
":py:func:`cdl.algorithms.image.get_2d_peaks_coords`"
msgstr ""

#: cdl.computation.image.detection.compute_peak_detection:7 of
msgid "Peak coordinates"
msgstr ""

#: cdl.computation.image.detection.ContourShapeParam:1 of
msgid "Contour shape parameters"
msgstr ""

#: cdl.computation.image.detection.ContourShapeParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid "Single choice from: 'ellipse', 'circle', 'polygon'. Default: 'ellipse'."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`ContourShapeParam` with the fields "
"set to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:8 of
msgid "New instance of :py:class:`ContourShapeParam`."
msgstr ""

#: cdl.computation.image.detection.compute_contour_shape:1 of
msgid ""
"Compute contour shape fit with "
":py:func:`cdl.algorithms.image.get_contour_shapes`"
msgstr ""

#: cdl.computation.image.detection.BaseBlobParam:1 of
msgid "Base class for blob detection parameters"
msgstr ""

#: cdl.computation.image.detection.BaseBlobParam:5
#: cdl.computation.image.detection.BlobDOGParam:5
#: cdl.computation.image.detection.BlobDOHParam:5
#: cdl.computation.image.detection.BlobLOGParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Ïƒ\\ :subscript:`min`\\. The minimum standard deviation for gaussian "
"kernel. Keep this low to detect smaller blobs. Float higher than 0, non "
"zero, unit: pixels\\. Default: 1.0."
msgstr ""

#: cdl.computation.image.detection.BaseBlobParam:11
#: cdl.computation.image.detection.BlobDOGParam:11
#: cdl.computation.image.detection.BlobDOHParam:11
#: cdl.computation.image.detection.BlobLOGParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid ""
"Ïƒ\\ :subscript:`max`\\. The maximum standard deviation for gaussian "
"kernel. Keep this high to detect larger blobs. Float higher than 0, non "
"zero, unit: pixels\\. Default: 30.0."
msgstr ""

#: cdl.computation.image.detection.BaseBlobParam:17
#: cdl.computation.image.detection.BlobDOGParam:17
#: cdl.computation.image.detection.BlobDOHParam:17
#: cdl.computation.image.detection.BlobLOGParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid ""
"Relative threshold\\. Minimum intensity of blobs. Float between 0.0 and "
"1.0\\. Default: 0.2."
msgstr ""

#: cdl.computation.image.detection.BaseBlobParam:23
#: cdl.computation.image.detection.BlobDOGParam:23
#: cdl.computation.image.detection.BlobDOHParam:23
#: cdl.computation.image.detection.BlobLOGParam:23
#: guidata.dataset.datatypes.DataSet.create:9 of
msgid ""
"If two blobs overlap by a fraction greater than this value, the smaller "
"blob is eliminated. Float between 0.0 and 1.0\\. Default: 0.5."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`BaseBlobParam` with the fields set "
"to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:12 of
msgid "New instance of :py:class:`BaseBlobParam`."
msgstr ""

#: cdl.computation.image.detection.BlobDOGParam:1 of
msgid "Blob detection using Difference of Gaussian method"
msgstr ""

#: cdl.computation.image.detection.BlobDOGParam:29
#: cdl.computation.image.detection.BlobLOGParam:35
#: guidata.dataset.datatypes.DataSet.create:11
#: guidata.dataset.datatypes.DataSet.create:13 of
msgid "If true, exclude blobs from the border of the image. Default: True."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`BlobDOGParam` with the fields set to"
" the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:14 of
msgid "New instance of :py:class:`BlobDOGParam`."
msgstr ""

#: cdl.computation.image.detection.compute_blob_dog:1 of
msgid ""
"Compute blobs using Difference of Gaussian method with "
":py:func:`cdl.algorithms.image.find_blobs_dog`"
msgstr ""

#: cdl.computation.image.detection.compute_blob_dog:7
#: cdl.computation.image.detection.compute_blob_doh:7
#: cdl.computation.image.detection.compute_blob_log:7
#: cdl.computation.image.detection.compute_blob_opencv:7 of
msgid "Blobs coordinates"
msgstr ""

#: cdl.computation.image.detection.BlobDOHParam:1 of
msgid "Blob detection using Determinant of Hessian method"
msgstr ""

#: cdl.computation.image.detection.BlobDOHParam:29
#: cdl.computation.image.detection.BlobLOGParam:29
#: guidata.dataset.datatypes.DataSet.create:11 of
msgid ""
"If set intermediate values of standard deviations are interpolated using "
"a logarithmic scale to the base 10. If not, linear interpolation is used."
" Default: False."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`BlobDOHParam` with the fields set to"
" the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:14 of
msgid "New instance of :py:class:`BlobDOHParam`."
msgstr ""

#: cdl.computation.image.detection.compute_blob_doh:1 of
msgid ""
"Compute blobs using Determinant of Hessian method with "
":py:func:`cdl.algorithms.image.find_blobs_doh`"
msgstr ""

#: cdl.computation.image.detection.BlobLOGParam:1 of
msgid "Blob detection using Laplacian of Gaussian method"
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`BlobLOGParam` with the fields set to"
" the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:16 of
msgid "New instance of :py:class:`BlobLOGParam`."
msgstr ""

#: cdl.computation.image.detection.compute_blob_log:1 of
msgid ""
"Compute blobs using Laplacian of Gaussian method with "
":py:func:`cdl.algorithms.image.find_blobs_log`"
msgstr ""

#: cdl.computation.image.detection.BlobOpenCVParam:1 of
msgid "Blob detection using OpenCV"
msgstr ""

#: cdl.computation.image.detection.BlobOpenCVParam:5
#: guidata.dataset.datatypes.DataSet.create:3 of
msgid ""
"Min. threshold\\. The minimum threshold between local maxima and minima. "
"This parameter does not affect the quality of the blobs, only the "
"quantity. Lower thresholds result in larger numbers of blobs. Float "
"higher than 0.0\\. Default: 10.0."
msgstr ""

#: cdl.computation.image.detection.BlobOpenCVParam:11
#: guidata.dataset.datatypes.DataSet.create:5 of
msgid ""
"Max. threshold\\. The maximum threshold between local maxima and minima. "
"This parameter does not affect the quality of the blobs, only the "
"quantity. Lower thresholds result in larger numbers of blobs. Float "
"higher than 0.0\\. Default: 200.0."
msgstr ""

#: cdl.computation.image.detection.BlobOpenCVParam:17
#: guidata.dataset.datatypes.DataSet.create:7 of
msgid ""
"Min. repeatability\\. The minimum number of times a blob needs to be "
"detected in a sequence of images to be considered valid. Integer higher "
"than 1\\. Default: 2."
msgstr ""

#: cdl.computation.image.detection.BlobOpenCVParam:23
#: guidata.dataset.datatypes.DataSet.create:9 of
msgid ""
"Min. distance between blobs\\. The minimum distance between two blobs. If"
" blobs are found closer together than this distance, the smaller blob is "
"removed. Float higher than 0.0, non zero\\. Default: 10.0."
msgstr ""

#: cdl.computation.image.detection.BlobOpenCVParam:29
#: guidata.dataset.datatypes.DataSet.create:11 of
msgid ""
"If true, the image is filtered by color instead of intensity. Default: "
"True."
msgstr ""

#: cdl.computation.image.detection.BlobOpenCVParam:35
#: guidata.dataset.datatypes.DataSet.create:13 of
msgid ""
"The color of the blobs to detect (0 for dark blobs, 255 for light blobs)."
" Default: 0."
msgstr ""

#: cdl.computation.image.detection.BlobOpenCVParam:41
#: guidata.dataset.datatypes.DataSet.create:15 of
msgid "If true, the image is filtered by blob area. Default: True."
msgstr ""

#: cdl.computation.image.detection.BlobOpenCVParam:47
#: guidata.dataset.datatypes.DataSet.create:17 of
msgid ""
"Min. area\\. The minimum blob area. Float higher than 0.0\\. Default: "
"25.0."
msgstr ""

#: cdl.computation.image.detection.BlobOpenCVParam:53
#: guidata.dataset.datatypes.DataSet.create:19 of
msgid ""
"Max. area\\. The maximum blob area. Float higher than 0.0\\. Default: "
"500.0."
msgstr ""

#: cdl.computation.image.detection.BlobOpenCVParam:59
#: guidata.dataset.datatypes.DataSet.create:21 of
msgid "If true, the image is filtered by blob circularity. Default: False."
msgstr ""

#: cdl.computation.image.detection.BlobOpenCVParam:65
#: guidata.dataset.datatypes.DataSet.create:23 of
msgid ""
"Min. circularity\\. The minimum circularity of the blobs. Float between "
"0.0 and 1.0\\. Default: 0.8."
msgstr ""

#: cdl.computation.image.detection.BlobOpenCVParam:71
#: guidata.dataset.datatypes.DataSet.create:25 of
msgid ""
"Max. circularity\\. The maximum circularity of the blobs. Float between "
"0.0 and 1.0\\. Default: 1.0."
msgstr ""

#: cdl.computation.image.detection.BlobOpenCVParam:77
#: guidata.dataset.datatypes.DataSet.create:27 of
msgid "If true, the image is filtered by blob inertia. Default: False."
msgstr ""

#: cdl.computation.image.detection.BlobOpenCVParam:83
#: guidata.dataset.datatypes.DataSet.create:29 of
msgid ""
"Min. inertia ratio\\. The minimum inertia ratio of the blobs. Float "
"between 0.0 and 1.0\\. Default: 0.6."
msgstr ""

#: cdl.computation.image.detection.BlobOpenCVParam:89
#: guidata.dataset.datatypes.DataSet.create:31 of
msgid ""
"Max. inertia ratio\\. The maximum inertia ratio of the blobs. Float "
"between 0.0 and 1.0\\. Default: 1.0."
msgstr ""

#: cdl.computation.image.detection.BlobOpenCVParam:95
#: guidata.dataset.datatypes.DataSet.create:33 of
msgid "If true, the image is filtered by blob convexity. Default: False."
msgstr ""

#: cdl.computation.image.detection.BlobOpenCVParam:101
#: guidata.dataset.datatypes.DataSet.create:35 of
msgid ""
"Min. convexity\\. The minimum convexity of the blobs. Float between 0.0 "
"and 1.0\\. Default: 0.8."
msgstr ""

#: cdl.computation.image.detection.BlobOpenCVParam:107
#: guidata.dataset.datatypes.DataSet.create:37 of
msgid ""
"Max. convexity\\. The maximum convexity of the blobs. Float between 0.0 "
"and 1.0\\. Default: 1.0."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:1 of
msgid ""
"Returns a new instance of :py:class:`BlobOpenCVParam` with the fields set"
" to the given values."
msgstr ""

#: guidata.dataset.datatypes.DataSet.create:40 of
msgid "New instance of :py:class:`BlobOpenCVParam`."
msgstr ""

#: cdl.computation.image.detection.compute_blob_opencv:1 of
msgid ""
"Compute blobs using OpenCV with "
":py:func:`cdl.algorithms.image.find_blobs_opencv`"
msgstr ""
