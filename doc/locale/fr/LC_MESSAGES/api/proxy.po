# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, DataLab Platform Developers
# This file is distributed under the same license as the DataLab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: DataLab \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-04-28 14:03+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: fr\n"
"Language-Team: fr <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

msgid "Proxy objects (:mod:`cdl.proxy`)"
msgstr ""

msgid "The :mod:`cdl.proxy` module provides a way to access DataLab features from a proxy class."
msgstr ""

msgid "The list of compute methods accessible from the proxy objects is available in the :ref:`processor_methods` section."
msgstr ""

msgid "Remote proxy"
msgstr ""

msgid "The remote proxy is used when DataLab is started from a different process than the proxy. In this case, the proxy connects to DataLab XML-RPC server."
msgstr ""

msgid "DataLab remote proxy class."
msgstr ""

msgid "This class provides access to DataLab features from a proxy class. This is the remote version of proxy, which is used when DataLab is started from a different process than the proxy."
msgstr ""

msgid "Parameters"
msgstr ""

msgid "Automatically connect to DataLab XML-RPC server."
msgstr ""

msgid "Raises"
msgstr ""

msgid "Unable to connect to DataLab"
msgstr ""

msgid "Invalid timeout (must be >= 0.0)"
msgstr ""

msgid "Invalid number of retries (must be >= 1)"
msgstr ""

msgid "The proxy object also allows to access DataLab computing methods exposed by the processor classes (see :ref:`processor_methods`)."
msgstr ""

msgid "Examples"
msgstr ""

msgid "Here is a simple example of how to use RemoteProxy in a Python script or in a Jupyter notebook:"
msgstr ""

msgid "Add object annotations (annotation plot items)."
msgstr ""

msgid "annotation plot items"
msgstr ""

msgid "refresh plot. Defaults to True."
msgstr ""

msgid "panel name (valid values: \"signal\", \"image\"). If None, current panel is used."
msgstr ""

msgid "Add group to DataLab."
msgstr ""

msgid "Group title"
msgstr ""

msgid "Panel name (valid values: \"signal\", \"image\"). Defaults to None."
msgstr ""

msgid "Select the group after creation. Defaults to False."
msgstr ""

msgid "Add image data to DataLab."
msgstr ""

msgid "Image title"
msgstr ""

msgid "Image data"
msgstr ""

msgid "X unit. Defaults to None"
msgstr ""

msgid "Y unit. Defaults to None"
msgstr ""

msgid "Z unit. Defaults to None"
msgstr ""

msgid "X label. Defaults to None"
msgstr ""

msgid "Y label. Defaults to None"
msgstr ""

msgid "Z label. Defaults to None"
msgstr ""

msgid "group id in which to add the image. Defaults to \"\""
msgstr ""

msgid "if True, set the added image as current"
msgstr ""

msgid "Returns"
msgstr ""

msgid "True if image was added successfully, False otherwise"
msgstr ""

msgid "Invalid data dtype"
msgstr ""

msgid "Add a label with object title on the associated plot"
msgstr ""

msgid "Label title. Defaults to None. If None, the title is the object title."
msgstr ""

msgid "Add object to DataLab."
msgstr ""

msgid "Signal or image object"
msgstr ""

msgid "group id in which to add the object. Defaults to \"\""
msgstr ""

msgid "if True, set the added object as current"
msgstr ""

msgid "Add signal data to DataLab."
msgstr ""

msgid "Signal title"
msgstr ""

msgid "X data"
msgstr ""

msgid "Y data"
msgstr ""

msgid "group id in which to add the signal. Defaults to \"\""
msgstr ""

msgid "if True, set the added signal as current"
msgstr ""

msgid "True if signal was added successfully, False otherwise"
msgstr ""

msgid "Invalid xdata dtype"
msgstr ""

msgid "Invalid ydata dtype"
msgstr ""

msgid "Call compute function ``name`` in current panel's processor."
msgstr ""

msgid "Compute function name"
msgstr ""

msgid "Compute function parameter. Defaults to None."
msgstr ""

msgid "unknown function"
msgstr ""

msgid "Close DataLab application"
msgstr ""

msgid "Try to connect to DataLab XML-RPC server."
msgstr ""

msgid "XML-RPC port to connect to. If not specified, the port is automatically retrieved from DataLab configuration."
msgstr ""

msgid "Timeout in seconds. Defaults to 5.0."
msgstr ""

msgid "Number of retries. Defaults to 10."
msgstr ""

msgid "Return a context manager to temporarily disable auto refresh."
msgstr ""

msgid "Context manager"
msgstr ""

msgid "Example"
msgstr ""

msgid "Delete metadata of selected objects"
msgstr ""

msgid "Refresh plot. Defaults to True."
msgstr ""

msgid "Keep ROI. Defaults to False."
msgstr ""

msgid "Disconnect from DataLab XML-RPC server."
msgstr ""

msgid "Return current panel name."
msgstr ""

msgid "\"signal\", \"image\", \"macro\"))"
msgstr ""

msgid "Return type"
msgstr ""

msgid "Return groups titles and lists of inner objects uuids and titles."
msgstr ""

msgid "groups titles, lists of inner objects uuids and titles"
msgstr ""

msgid "Return list of available methods."
msgstr ""

msgid "Get object (signal/image) from index."
msgstr ""

msgid "Object number, or object id, or object title. Defaults to None (current object)."
msgstr ""

msgid "Panel name. Defaults to None (current panel)."
msgstr ""

msgid "Object"
msgstr ""

msgid "if object not found"
msgstr ""

msgid "Get plot item shapes associated to object (signal/image)."
msgstr ""

msgid "List of plot item shapes"
msgstr ""

msgid "Get object (signal/image) list for current panel. Objects are sorted by group number and object index in group."
msgstr ""

msgid "panel name (valid values: \"signal\", \"image\", \"macro\"). If None, current data panel is used (i.e. signal or image panel)."
msgstr ""

msgid "List of object titles"
msgstr ""

msgid "if panel not found"
msgstr ""

msgid "Get object (signal/image) uuid list for current panel. Objects are sorted by group number and object index in group."
msgstr ""

msgid "Group number, or group id, or group title. Defaults to None (all groups)."
msgstr ""

msgid "List of object uuids"
msgstr ""

msgid "Return all public methods of the class, except itself."
msgstr ""

msgid "List of public methods"
msgstr ""

msgid "Return selected objects uuids."
msgstr ""

msgid "If True, also return objects from selected groups."
msgstr ""

msgid "List of selected objects uuids."
msgstr ""

msgid "Return DataLab public version."
msgstr ""

msgid "DataLab version"
msgstr ""

msgid "Open DataLab HDF5 browser to Import HDF5 file."
msgstr ""

msgid "HDF5 file name"
msgstr ""

msgid "Reset all application data. Defaults to None."
msgstr ""

msgid "Import macro from file"
msgstr ""

msgid "Filename."
msgstr ""

msgid "Return True if connected to DataLab XML-RPC server."
msgstr ""

msgid "Open objects from directory in current panel (signals/images)."
msgstr ""

msgid "directory path"
msgstr ""

msgid "Open objects from files in current panel (signals/images)."
msgstr ""

msgid "list of file names"
msgstr ""

msgid "Open a DataLab HDF5 file or import from any other HDF5 file."
msgstr ""

msgid "List of HDF5 files to open. Defaults to None."
msgstr ""

msgid "Import all objects from HDF5 files. Defaults to None."
msgstr ""

msgid "Raise DataLab window"
msgstr ""

msgid "Reset all application data"
msgstr ""

msgid "Run macro."
msgstr ""

msgid "Macro number, or macro title. Defaults to None (current macro)."
msgstr ""

msgid "if macro not found"
msgstr ""

msgid "Save to a DataLab HDF5 file."
msgstr ""

msgid "Select groups in current panel."
msgstr ""

msgid "List of group numbers (1 to N), or list of group uuids, or None to select all groups. Defaults to None."
msgstr ""

msgid "panel name (valid values: \"signal\", \"image\"). If None, current panel is used. Defaults to None."
msgstr ""

msgid "Select objects in current panel."
msgstr ""

msgid "List of object numbers (1 to N) or uuids to select"
msgstr ""

msgid "Switch to panel."
msgstr ""

msgid "Panel name (valid values: \"signal\", \"image\", \"macro\"))"
msgstr ""

msgid "Stop macro."
msgstr ""

msgid "Toggle auto refresh state."
msgstr ""

msgid "Auto refresh state"
msgstr ""

msgid "Toggle show titles state."
msgstr ""

msgid "Show titles state"
msgstr ""

msgid "Local proxy"
msgstr ""

msgid "The local proxy is used when DataLab is started from the same process as the proxy. In this case, the proxy is directly connected to DataLab main window instance. The typical use case is high-level scripting."
msgstr ""

msgid "DataLab local proxy class."
msgstr ""

msgid "This class provides access to DataLab features from a proxy class. This is the local version of proxy, which is used when DataLab is started from the same process as the proxy."
msgstr ""

msgid "CDLMainWindow instance."
msgstr ""

msgid "Compute function parameter. Defaults to None"
msgstr ""

msgid "Object number, or object id, or object title. Defaults to None (current object)"
msgstr ""

msgid "Panel name. Defaults to None (current panel)"
msgstr ""

msgid "refresh plot. Defaults to True"
msgstr ""

msgid "panel name (valid values: \"signal\", \"image\"). If None, current panel is used"
msgstr ""

msgid "Proxy context manager"
msgstr ""

msgid "The proxy context manager is a convenient way to handle proxy creation and destruction. It is used as follows:"
msgstr ""

msgid "The proxy type can be \"local\" or \"remote\". For remote proxy, the port can be specified as \"remote:port\"."
msgstr ""

msgid "The proxy context manager allows to use the proxy in various contexts (Python script, Jupyter notebook, etc.). It also allows to switch seamlessly between local and remote proxy, keeping the same code inside the context."
msgstr ""

msgid "Context manager handling CDL proxy creation and destruction."
msgstr ""

msgid "proxy type (\"local\" or \"remote\") For remote proxy, the port can be specified as \"remote:port\""
msgstr ""

msgid "Yields"
msgstr ""

msgid "proxy"
msgstr ""

msgid "LocalProxy if what == \"local\" RemoteProxy if what == \"remote\" or \"remote:port\""
msgstr ""

msgid "with proxy_context(\"local\") as proxy:"
msgstr ""

msgid "proxy.add_signal(...)"
msgstr ""

msgid "Calling processor methods using proxy objects"
msgstr ""

msgid "All the proxy objects provide access to the DataLab computing methods exposed by the processor classes:"
msgstr ""

msgid ":class:`cdl.gui.processor.signal.SignalProcessor`"
msgstr ""

msgid ":class:`cdl.gui.processor.image.ImageProcessor`"
msgstr ""

msgid "The list of processor methods is available in tables below."
msgstr ""

msgid "There are two ways to call a processor method:"
msgstr ""

msgid "Using the :meth:`calc` method of the proxy object:"
msgstr ""

msgid "Directly calling the processor method from the proxy object:"
msgstr ""

#, python-brace-format
msgid "The `compute_{name}` methods are not statically defined in the proxy classes (and not even dynamically). They are nevertheless available through the proxy objects thanks to the magic method :meth:`__getattr__` which forwards the call to the :meth:`calc` method. However, this means that the methods are not listed in the proxy classes documentation, and they are not available in the auto-completion feature of your IDE."
msgstr ""

msgid "Number of compute methods"
msgstr ""

msgid "Signal"
msgstr ""

msgid "Image"
msgstr ""

msgid "Total"
msgstr ""

msgid "75"
msgstr ""

msgid "102"
msgstr ""

msgid "177"
msgstr ""

msgid "Signal processing"
msgstr ""

msgid "The following table lists the signal processor methods - it is automatically generated from the source code:"
msgstr ""

msgid "Signal processor methods"
msgstr ""

msgid "Compute method"
msgstr ""

msgid "Description"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_XY_mode`"
msgstr ""

msgid "Compute XY mode with :py:func:`sigima_.signal.compute_XY_mode.`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_abs`"
msgstr ""

msgid "Compute absolute value with :py:func:`sigima_.signal.compute_abs`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_addition_constant`"
msgstr ""

msgid "Compute sum with a constant"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_all_stability`"
msgstr ""

msgid "Compute all stability analysis features"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_allan_deviation`"
msgstr ""

msgid "Compute Allan deviation"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_allan_variance`"
msgstr ""

msgid "Compute Allan variance"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_arithmetic`"
msgstr ""

msgid "Compute arithmetic operation between two signals"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_astype`"
msgstr ""

msgid "Convert data type with :py:func:`sigima_.signal.compute_astype`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_average`"
msgstr ""

msgid "Compute average with :py:func:`sigima_.signal.compute_sum`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_bandpass`"
msgstr ""

msgid "Compute band-pass filter"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_bandstop`"
msgstr ""

msgid "Compute band-stop filter"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_bandwidth_3db`"
msgstr ""

msgid "Compute bandwidth at -3dB"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_calibration`"
msgstr ""

msgid "Compute data linear calibration"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_to_polar`"
msgstr ""

msgid "Convert cartesian to polar coordinates"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_clip`"
msgstr ""

msgid "Compute maximum data clipping"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_contrast`"
msgstr ""

msgid "Compute contrast with :py:func:`sigima_.signal.compute_contrast`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_convolution`"
msgstr ""

msgid "Compute convolution"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_derivative`"
msgstr ""

msgid "Compute derivative"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_detrending`"
msgstr ""

msgid "Compute detrending"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_difference`"
msgstr ""

msgid "Compute difference between two signals"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_difference_constant`"
msgstr ""

msgid "Compute difference with a constant"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_division`"
msgstr ""

msgid "Compute division between two signals"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_division_constant`"
msgstr ""

msgid "Compute division by a constant"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_dynamic_parameters`"
msgstr ""

msgid "Compute Dynamic Parameters (ENOB, SINAD, THD, SFDR, SNR)"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_exp`"
msgstr ""

msgid "Compute Log10 with :py:func:`sigima_.signal.compute_exp`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_fft`"
msgstr ""

msgid "Compute FFT with :py:func:`sigima_.signal.compute_fft`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_fit`"
msgstr ""

msgid "Compute fitting curve using an interactive dialog"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_full_width_at_y`"
msgstr ""

msgid "Compute full width at a given y"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_fw1e2`"
msgstr ""

msgid "Compute FW at 1/e² with :py:func:`sigima_.signal.compute_fw1e2`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_fwhm`"
msgstr ""

msgid "Compute FWHM with :py:func:`sigima_.signal.compute_fwhm`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_gaussian_filter`"
msgstr ""

msgid "Compute gaussian filter"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_hadamard_variance`"
msgstr ""

msgid "Compute Hadamard variance"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_highpass`"
msgstr ""

msgid "Compute high-pass filter"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_histogram`"
msgstr ""

msgid "Compute histogram"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_ifft`"
msgstr ""

msgid "Compute iFFT with :py:func:`sigima_.signal.compute_ifft`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_im`"
msgstr ""

msgid "Compute imaginary part with :py:func:`sigima_.signal.compute_im`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_integral`"
msgstr ""

msgid "Compute integral with :py:func:`sigima_.signal.compute_integral`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_interpolation`"
msgstr ""

msgid "Compute interpolation"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_inverse`"
msgstr ""

msgid "Compute inverse"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_log10`"
msgstr ""

msgid "Compute Log10 with :py:func:`sigima_.signal.compute_log10`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_lowpass`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_magnitude_spectrum`"
msgstr ""

msgid "Compute magnitude spectrum"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_modified_allan_variance`"
msgstr ""

msgid "Compute modified Allan variance"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_moving_average`"
msgstr ""

msgid "Compute moving average"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_moving_median`"
msgstr ""

msgid "Compute moving median"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_multigaussianfit`"
msgstr ""

msgid "Compute multi-Gaussian fitting curve using an interactive dialog"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_normalize`"
msgstr ""

msgid "Normalize data with :py:func:`sigima_.signal.compute_normalize`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_offset_correction`"
msgstr ""

msgid "Compute offset correction"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_overlapping_allan_variance`"
msgstr ""

msgid "Compute overlapping Allan variance"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_peak_detection`"
msgstr ""

msgid "Detect peaks from data"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_phase_spectrum`"
msgstr ""

msgid "Compute phase spectrum"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_to_cartesian`"
msgstr ""

msgid "Convert polar to cartesian coordinates"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_polyfit`"
msgstr ""

msgid "Compute polynomial fitting curve"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_power`"
msgstr ""

msgid "Compute power with :py:func:`sigima_.signal.compute_power`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_product`"
msgstr ""

msgid "Compute product with :py:func:`sigima_.signal.compute_product`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_product_constant`"
msgstr ""

msgid "Compute product with a constant"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_psd`"
msgstr ""

msgid "Compute power spectral density"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_quadratic_difference`"
msgstr ""

msgid "Compute quadratic difference between two signals"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_re`"
msgstr ""

msgid "Compute real part with :py:func:`sigima_.signal.compute_re`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_resampling`"
msgstr ""

msgid "Compute resampling"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_reverse_x`"
msgstr ""

msgid "Reverse X axis with :py:func:`sigima_.signal.compute_reverse_x`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_roi_extraction`"
msgstr ""

msgid "Extract Region Of Interest (ROI) from data"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_sampling_rate_period`"
msgstr ""

msgid "Compute sampling rate and period (mean and std)"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_sqrt`"
msgstr ""

msgid "Compute square root with :py:func:`sigima_.signal.compute_sqrt`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_stats`"
msgstr ""

msgid "Compute data statistics"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_sum`"
msgstr ""

msgid "Compute sum with :py:func:`sigima_.signal.compute_sum`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_swap_axes`"
msgstr ""

msgid "Swap data axes with :py:func:`sigima_.signal.compute_swap_axes`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_time_deviation`"
msgstr ""

msgid "Compute time deviation"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_total_variance`"
msgstr ""

msgid "Compute total variance"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_wiener`"
msgstr ""

msgid "Compute Wiener filter"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_windowing`"
msgstr ""

msgid "Compute windowing"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_x_at_minmax`"
msgstr ""

msgid "Compute x at min/max"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_x_at_y`"
msgstr ""

msgid "Compute x at y with :py:func:`sigima_.signal.compute_x_at_y`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_y_at_x`"
msgstr ""

msgid "Compute y at x with :py:func:`sigima_.signal.compute_y_at_x`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.signal.SignalProcessor.compute_zero_padding`"
msgstr ""

msgid "Compute zero padding"
msgstr ""

msgid "Image processing"
msgstr ""

msgid "The following table lists the image processor methods - it is automatically generated from the source code:"
msgstr ""

msgid "Image processor methods"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_abs`"
msgstr ""

msgid "Compute absolute value with :py:func:`sigima_.image.compute_abs`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_addition_constant`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_adjust_gamma`"
msgstr ""

msgid "Compute gamma correction"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_adjust_log`"
msgstr ""

msgid "Compute log correction"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_adjust_sigmoid`"
msgstr ""

msgid "Compute sigmoid correction"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_all_denoise`"
msgstr ""

msgid "Compute all denoising filters"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_all_edges`"
msgstr ""

msgid "Compute all edges filters"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_all_morphology`"
msgstr ""

msgid "Compute all morphology filters"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_all_threshold`"
msgstr ""

msgid "Compute all threshold algorithms"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_arithmetic`"
msgstr ""

msgid "Compute arithmetic operation between two images"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_astype`"
msgstr ""

msgid "Convert data type with :py:func:`sigima_.image.compute_astype`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_average`"
msgstr ""

msgid "Compute average with :py:func:`sigima_.image.compute_sum`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_average_profile`"
msgstr ""

msgid "Compute average profile"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_binning`"
msgstr ""

msgid "Binning image with :py:func:`sigima_.image.compute_binning`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_black_tophat`"
msgstr ""

msgid "Compute Black Top-Hat"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_blob_dog`"
msgstr ""

msgid "Compute blob detection using Difference of Gaussian method"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_blob_doh`"
msgstr ""

msgid "Compute blob detection using Determinant of Hessian method"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_blob_log`"
msgstr ""

msgid "Compute blob detection using Laplacian of Gaussian method"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_blob_opencv`"
msgstr ""

msgid "Compute blob detection using OpenCV"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_butterworth`"
msgstr ""

msgid "Compute Butterworth filter"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_calibration`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_canny`"
msgstr ""

msgid "Compute Canny filter"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_centroid`"
msgstr ""

msgid "Compute image centroid"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_clip`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_closing`"
msgstr ""

msgid "Compute morphological closing"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_contour_shape`"
msgstr ""

msgid "Compute contour shape fit"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_denoise_bilateral`"
msgstr ""

msgid "Compute bilateral filter denoising"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_denoise_tophat`"
msgstr ""

msgid "Denoise using White Top-Hat"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_denoise_tv`"
msgstr ""

msgid "Compute Total Variation denoising"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_denoise_wavelet`"
msgstr ""

msgid "Compute Wavelet denoising"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_difference`"
msgstr ""

msgid "Compute difference between two images"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_difference_constant`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_dilation`"
msgstr ""

msgid "Compute Dilation"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_division`"
msgstr ""

msgid "Compute division between two images"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_division_constant`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_enclosing_circle`"
msgstr ""

msgid "Compute minimum enclosing circle"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_equalize_adapthist`"
msgstr ""

msgid "Adaptive histogram equalization"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_equalize_hist`"
msgstr ""

msgid "Histogram equalization"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_erosion`"
msgstr ""

msgid "Compute Erosion"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_exp`"
msgstr ""

msgid "Compute Log10 with :py:func:`sigima_.image.compute_exp`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_farid`"
msgstr ""

msgid "Compute Farid filter"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_farid_h`"
msgstr ""

msgid "Compute Farid filter (horizontal)"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_farid_v`"
msgstr ""

msgid "Compute Farid filter (vertical)"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_fft`"
msgstr ""

msgid "Compute FFT with :py:func:`sigima_.image.compute_fft`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_flatfield`"
msgstr ""

msgid "Compute flat field correction"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_fliph`"
msgstr ""

msgid "Flip data horizontally"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_flipv`"
msgstr ""

msgid "Flip data vertically with :py:func:`sigima_.image.compute_flipv`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_gaussian_filter`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_histogram`"
msgstr ""

msgid "Compute histogram with :py:func:`sigima_.image.compute_histogram`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_hough_circle_peaks`"
msgstr ""

msgid "Compute peak detection based on a circle Hough transform"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_ifft`"
msgstr ""

msgid "Compute iFFT with :py:func:`sigima_.image.compute_ifft`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_im`"
msgstr ""

msgid "Compute imaginary part with :py:func:`sigima_.image.compute_im`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_inverse`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_laplace`"
msgstr ""

msgid "Compute Laplace filter"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_line_profile`"
msgstr ""

msgid "Compute profile along a vertical or horizontal line"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_log10`"
msgstr ""

msgid "Compute Log10 with :py:func:`sigima_.image.compute_log10`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_logp1`"
msgstr ""

msgid "Compute base 10 logarithm"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_magnitude_spectrum`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_moving_average`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_moving_median`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_normalize`"
msgstr ""

msgid "Normalize data with :py:func:`sigima_.image.compute_normalize`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_offset_correction`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_opening`"
msgstr ""

msgid "Compute morphological opening"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_peak_detection`"
msgstr ""

msgid "Compute 2D peak detection"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_phase_spectrum`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_prewitt`"
msgstr ""

msgid "Compute Prewitt filter"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_prewitt_h`"
msgstr ""

msgid "Compute Prewitt filter (horizontal)"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_prewitt_v`"
msgstr ""

msgid "Compute Prewitt filter (vertical)"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_product`"
msgstr ""

msgid "Compute product with :py:func:`sigima_.image.compute_product`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_product_constant`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_psd`"
msgstr ""

msgid "Compute Power Spectral Density (PSD)"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_quadratic_difference`"
msgstr ""

msgid "Compute quadratic difference between two images"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_radial_profile`"
msgstr ""

msgid "Compute radial profile"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_re`"
msgstr ""

msgid "Compute real part with :py:func:`sigima_.image.compute_re`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_rescale_intensity`"
msgstr ""

msgid "Rescale image intensity levels"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_resize`"
msgstr ""

msgid "Resize image with :py:func:`sigima_.image.compute_resize`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_roberts`"
msgstr ""

msgid "Compute Roberts filter"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_roi_extraction`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_rotate`"
msgstr ""

msgid "Rotate data arbitrarily"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_rotate270`"
msgstr ""

msgid "Rotate data 270° with :py:func:`sigima_.image.compute_rotate270`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_rotate90`"
msgstr ""

msgid "Rotate data 90° with :py:func:`sigima_.image.compute_rotate90`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_scharr`"
msgstr ""

msgid "Compute Scharr filter"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_scharr_h`"
msgstr ""

msgid "Compute Scharr filter (horizontal)"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_scharr_v`"
msgstr ""

msgid "Compute Scharr filter (vertical)"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_segment_profile`"
msgstr ""

msgid "Compute profile along a segment"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_sobel`"
msgstr ""

msgid "Compute Sobel filter"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_sobel_h`"
msgstr ""

msgid "Compute Sobel filter (horizontal)"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_sobel_v`"
msgstr ""

msgid "Compute Sobel filter (vertical)"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_stats`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_sum`"
msgstr ""

msgid "Compute sum with :py:func:`sigima_.image.compute_sum`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_swap_axes`"
msgstr ""

msgid "Swap data axes with :py:func:`sigima_.image.compute_swap_axes`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_threshold`"
msgstr ""

msgid "Compute parametric threshold"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_threshold_isodata`"
msgstr ""

msgid "Compute threshold using Isodata algorithm"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_threshold_li`"
msgstr ""

msgid "Compute threshold using Li algorithm"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_threshold_mean`"
msgstr ""

msgid "Compute threshold using Mean algorithm"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_threshold_minimum`"
msgstr ""

msgid "Compute threshold using Minimum algorithm"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_threshold_otsu`"
msgstr ""

msgid "Compute threshold using Otsu algorithm"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_threshold_triangle`"
msgstr ""

msgid "Compute threshold using Triangle algorithm"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_threshold_yen`"
msgstr ""

msgid "Compute threshold using Yen algorithm"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_white_tophat`"
msgstr ""

msgid "Compute White Top-Hat"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_wiener`"
msgstr ""

msgid ":py:func:`~cdl.gui.processor.image.ImageProcessor.compute_zero_padding`"
msgstr ""
